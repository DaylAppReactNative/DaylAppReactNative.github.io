[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "src/components/Artwork/index.tsx",
    "content": "import React from 'react';\nimport {Image, Text, TouchableOpacity, View} from 'react-native';\nimport {useNavigation} from \"@react-navigation/native\";\nimport styles from \"./styles\"\nimport {useAuth} from \"../../contexts/Auth\";\nimport {useInteractions} from \"../../contexts/UserInteractions\";\nimport {LOREM} from \"../../services/constantes\";\n\n// PROPS\nexport type artworkProps = {\n    id: string;\n    imageUri: string;\n    artistName: string;\n    artworkName: string;\n    artistId: string,\n}\n\n/**\n * Component displaying an Artwork with image, name and artist name\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=19vamBJAY1JchpK47QNtNfrkuGSZwz120\" alt=\"AllMyArtistsMockup\" height=\"500\">\n * @param {artworkProps} props\n * @param {string} props.id - ID of the artwork\n * @param {string} props.imageUri - URI of the image\n * @param {string} props.artistName - Name of the Artist\n * @param {string} props.artworkName - Name of the artwork\n * @param {string} props.artistId - ID of the artist\n * @return ArtworkComponent\n */\nexport function ArtworkComponent(props: artworkProps) {\n\n    const navigation = useNavigation();\n\n    const auth = useAuth()\n\n    const userInt = useInteractions()\n\n    // WHEN CLICKED NAVIGATES TO ARTWORK PAGE\n    const onPressArtwork = () => {\n        navigation.navigate('ArtworkPage', {\n            id: props.id,\n            imageUri: props.imageUri,\n            information: LOREM,\n            artworkName: props.artworkName,\n            artistId: props.artistId,\n            artistName: props.artistName\n        })\n    }\n\n    // FUNCTION THAT FILTERS THROUGH AUTH.SELECTED TO FIND THE ACCORDING ID AND THEN REMOVES IT IF ITS PRESENT AND ADDS IT OTHERWISE\n    const addToSelected = () => {\n        // IF ALREADY IN LIST THEN REMOVE\n        if (userInt.selected.includes(props.id))\n            userInt.setSelected(userInt.selected.filter(el => el !== props.id))\n        // ELSE ADD IT TO LIST\n        else\n            userInt.setSelected([...userInt.selected, props.id])\n    }\n\n    return (\n        <View style={styles.container}>\n            {/*CUSTOM BUTTON - ON PRESS NAVIGATE TOWARDS ARTWORK PAGE*/}\n            <TouchableOpacity onPress={() => userInt.edit ? addToSelected() : onPressArtwork()}>\n                <Image source={{uri: props.imageUri}} style={styles.image}/>\n                {/*ARTWORK NAME - TEXT*/}\n                <Text numberOfLines={1} style={styles.artworkName}>{props.artworkName}</Text>\n                {/*ARTIST NAME - TEXT*/}\n                <Text numberOfLines={1} style={styles.artistName}>{props.artistName}</Text>\n            </TouchableOpacity>\n        </View>\n    )\n}",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/Artwork/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "function",
    "name": "ArtworkComponent",
    "memberof": "src/components/Artwork/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Artwork/index.tsx~ArtworkComponent",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/Artwork/index.tsx",
    "importStyle": "{ArtworkComponent}",
    "description": "Component displaying an Artwork with image, name and artist name\n\n<img src=\"https://drive.google.com/uc?export=view&id=19vamBJAY1JchpK47QNtNfrkuGSZwz120\" alt=\"AllMyArtistsMockup\" height=\"500\">",
    "lineNumber": 30,
    "params": [
      {
        "nullable": null,
        "types": [
          "artworkProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.id",
        "description": "ID of the artwork"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.imageUri",
        "description": "URI of the image"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.artistName",
        "description": "Name of the Artist"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.artworkName",
        "description": "Name of the artwork"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.artistId",
        "description": "ID of the artist"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "ArtworkComponent"
    }
  },
  {
    "__docId__": 2,
    "kind": "file",
    "name": "src/components/ArtworkCarouselDouble/LikedArtworksCarousel/index.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {URL} from \"../../../services/constantes\";\nimport {useNavigation} from \"@react-navigation/native\";\nimport {useAuth} from \"../../../contexts/Auth\";\nimport {Text, TouchableOpacity, View} from \"react-native\";\nimport styles from \"../../DiscoverByColor/styles\";\nimport {Entypo} from \"@expo/vector-icons\";\nimport ArtworkCarouselSingle from \"../../ArtworkCarouselSingle\";\n\n/**\n * Component displaying an {@link ArtworkCarouselSingle} of liked artworks\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=17_yTpjYuS72FhFQ6SZGlj8Opw5MBNRSe\" alt=\"ArtworkPage\" height=\"500\">\n * @constructor\n * @return LikedArtworksCarousel\n */\nconst LikedArtworksCarousel = () => {\n\n    const navigation = useNavigation()\n    const auth = useAuth()\n\n    const [painting, setPainting] = useState<any>([]);\n\n    // API CALL TO GET ALL LIKED ARTWORKS OF USER AND PARSE THEM INTO `ARTWORK`\n    useEffect(() => {\n        setPainting([])\n        auth.authData.paintingLiked && auth.authData.paintingLiked.forEach((paintingId) => {\n            axios.get(URL + `paintingEntity/${paintingId}`).then((response) => {\n                let data = response.data;\n                let parsedData = {\n                    id: data.id,\n                    imageUri: URL + `images/content/mini/${data.artist_idtf_intern}/${data.generatedId}`,\n                    artistName: data.artist_name_tot,\n                    artworkName: data.aw_title_Eng,\n                    artistId: data.artist_idtf_intern\n                }\n                setPainting((painting: any) => [...painting, parsedData])\n            });\n        })\n    }, [auth.authData.paintingLiked, auth.refreshKey])\n\n    // useEffect(() => {\n    //     setPainting([])\n    //     if (auth.authData.paintingLiked) {\n    //         for (let i = 0; i < auth.authData.paintingLiked.length; i++)\n    //             axios.get(URL + `paintingEntity/${auth.authData.paintingLiked[i]}`).then((response) => {\n    //                 let data = response.data;\n    //                 let parsedData = {\n    //                     id: data.id,\n    //                     imageUri: URL + `images/content/mini/${data.artist_idtf_intern}/${data.generatedId}`,\n    //                     artistName: data.artist_name_tot,\n    //                     artworkName: data.aw_title_Eng,\n    //                     artistId: data.artist_idtf_intern\n    //                 }\n    //\n    //                 setPainting(painting => [...painting, parsedData]);\n    //             });\n    //     }\n    // }, [auth.authData.paintingLiked, auth.refreshKey]);\n\n    //IF THE USER HAS LIKED SOME ARTWORKS THEN SHOW IN CAROUSEL ELSE SHOW\n    return (\n        <View style={styles.container}>\n\n            {/*IF CLICK ON TITLE THEN NAVIGATE TO DETAILED PAGE FULL OF ARTWORKS*/}\n            <TouchableOpacity onPress={() => navigation.navigate(\"AllMyArtworksPage\")}>\n                <View style={styles.textAndChevron}>\n                    {/*TEXT*/}\n                    <Text style={styles.title}>Liked artworks</Text>\n                    {/*CHEVRON*/}\n                    <Entypo name={\"chevron-right\"} size={30} color={\"white\"}/>\n                </View>\n            </TouchableOpacity>\n\n            {/*CAROUSEL OF RANDOM COLOR PAINTING*/}\n            <ArtworkCarouselSingle data={painting}/>\n        </View>\n    )\n\n    //return !auth.authData.paintingLiked || auth.authData.paintingLiked.length === 0  ? <View><Text style={styles.noLikedArtworks}>No liked artworks </Text></View> : <ArtworkCarouselDouble title={\"Liked artworks\"} data={painting} navigate={() => navigation.navigate(\"AllMyArtworksPage\")}/>\n}\n\nexport default LikedArtworksCarousel;",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/ArtworkCarouselDouble/LikedArtworksCarousel/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 3,
    "kind": "function",
    "name": "LikedArtworksCarousel",
    "memberof": "src/components/ArtworkCarouselDouble/LikedArtworksCarousel/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/ArtworkCarouselDouble/LikedArtworksCarousel/index.tsx~LikedArtworksCarousel",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/ArtworkCarouselDouble/LikedArtworksCarousel/index.tsx",
    "importStyle": "LikedArtworksCarousel",
    "description": "Component displaying an {@link ArtworkCarouselSingle} of liked artworks\n\n<img src=\"https://drive.google.com/uc?export=view&id=17_yTpjYuS72FhFQ6SZGlj8Opw5MBNRSe\" alt=\"ArtworkPage\" height=\"500\">",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "LikedArtworksCarousel"
    },
    "params": []
  },
  {
    "__docId__": 4,
    "kind": "file",
    "name": "src/components/ArtworkCarouselDouble/MatchedPainting/index.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {URL} from \"../../../services/constantes\";\nimport ArtworkCarouselDouble from \"../index\";\nimport {Artwork} from \"../../../../types\";\n\n// PROPS\nexport type PaintingsMatchedFromSourceProps = {\n    paintingId: string,\n    matchingType: string,\n}\n\n/**\n * Component displaying an {@link ArtworkCarouselDouble} of matched artworks\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=1P-OOAmbxkpiDfb9I9mGkj2NMLePBXLaf\" alt=\"ArtworkPage\" height=\"500\">\n * @param {PaintingsMatchedFromSourceProps} props\n * @param {string} props.paintingId - ID of the artwork\n * @param {string} props.matchingType - Type of matching (Color, Genre, Origin, ...)\n * @return PaintingsMatchedFromSource\n * */\nexport default function PaintingsMatchedFromSource(props: PaintingsMatchedFromSourceProps) {\n\n    const [matchList, setMatchList] = useState<any>([]);\n\n    //API CALL TO GET AW_IDTF_INTERN\n    useEffect(() => {\n        axios.get(URL + `paintingEntity/${props.paintingId}`).then((response) => {\n\n            //API CALL TO GET MATCHED PAINTINGS FROM AW_IDTF_INTERN\n            axios.get(URL + `matchingSearch/findMatchForSource/${props.matchingType}/${response.data.aw_idtf_intern}/true`).then((response2) => {\n\n                //PARSING DATA\n                const values : Artwork[] = Object.values(response2.data).map((el : any) => {\n                    return {\n                        id: el.id,\n                        imageUri: URL + `images/content/mini/${el.artistId}/${el.urlImage}`,\n                        artistName: el.artisteName,\n                        artworkName: el.name,\n                        artistId: el.artistId,\n                    }\n                })\n\n                setMatchList(values)\n            });\n        });\n    }, [props.paintingId]);\n\n    return (<ArtworkCarouselDouble title={matchList.length > 0 ? \"Matched\" : \"No matched paintings for this artwork\"} data={matchList}/>)\n}\n\n\n\n\n\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/ArtworkCarouselDouble/MatchedPainting/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 5,
    "kind": "function",
    "name": "PaintingsMatchedFromSource",
    "memberof": "src/components/ArtworkCarouselDouble/MatchedPainting/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/ArtworkCarouselDouble/MatchedPainting/index.tsx~PaintingsMatchedFromSource",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/ArtworkCarouselDouble/MatchedPainting/index.tsx",
    "importStyle": "PaintingsMatchedFromSource",
    "description": "Component displaying an {@link ArtworkCarouselDouble} of matched artworks\n\n<img src=\"https://drive.google.com/uc?export=view&id=1P-OOAmbxkpiDfb9I9mGkj2NMLePBXLaf\" alt=\"ArtworkPage\" height=\"500\">",
    "lineNumber": 22,
    "params": [
      {
        "nullable": null,
        "types": [
          "PaintingsMatchedFromSourceProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.paintingId",
        "description": "ID of the artwork"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.matchingType",
        "description": "Type of matching (Color, Genre, Origin, ...)"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "PaintingsMatchedFromSource"
    }
  },
  {
    "__docId__": 6,
    "kind": "file",
    "name": "src/components/ArtworkCarouselDouble/MostMatched/index.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport ArtworkCarouselDouble from \"../index\";\nimport {URL} from \"../../../services/constantes\";\nimport {Artwork} from \"../../../../types\";\nimport {useNavigation} from \"@react-navigation/native\";\n\n/**\n * Component displaying an {@link ArtworkCarouselDouble} of the most matched artworks for the last 30 days\n *\n * //TODO IMAGE\n * @constructor\n * @return MostMatchedComponent\n */\nexport default function MostMatchedComponent() {\n\n    const [matchedPainting, setMatchedPainting] = useState<[Artwork] | []>([]);\n\n    const navigation = useNavigation()\n\n    //API CALL TO GET LATEST MOST MATCHED ARTWORKS\n    useEffect(() => {\n        axios\n            .get(URL + \"matchingSearch/moreMatchedPaintingForLast30Days?numberOfMonthsBefore=1\", {\n                headers: {\n                    \"Access-Control-Allow-Origin\": \"*\",\n                    \"Content-Type\": \"application/json\"\n                }\n            })\n            .then((response) => {\n\n                //PARSING DATA\n                const parsedData = response.data.map((el: any) => {\n                    return {\n                        id: el.painting.id,\n                        imageUri: URL + `images/content/mini/${el.painting.artistId}/${el.painting.urlImage}`,\n                        artistName: el.painting.artisteName,\n                        artworkName: el.painting.name,\n                        artistId: el.painting.artistId\n                    }\n                })\n\n                setMatchedPainting(parsedData)\n            });\n    }, []);\n\n    return (\n        <ArtworkCarouselDouble title={\"Most matched\"} data={matchedPainting} navigate={() => navigation.navigate(\"ListContentPage\", {id: undefined, name: \"Most matched\", data: matchedPainting})}/>\n    )\n}\n\n\n\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/ArtworkCarouselDouble/MostMatched/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 7,
    "kind": "function",
    "name": "MostMatchedComponent",
    "memberof": "src/components/ArtworkCarouselDouble/MostMatched/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/ArtworkCarouselDouble/MostMatched/index.tsx~MostMatchedComponent",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/ArtworkCarouselDouble/MostMatched/index.tsx",
    "importStyle": "MostMatchedComponent",
    "description": "Component displaying an {@link ArtworkCarouselDouble} of the most matched artworks for the last 30 days\n\n//TODO IMAGE",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "MostMatchedComponent"
    },
    "params": []
  },
  {
    "__docId__": 8,
    "kind": "file",
    "name": "src/components/ArtworkCarouselDouble/PaintingsFromSameArtist/index.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {LOREM, URL} from \"../../../services/constantes\";\nimport ArtworkCarouselDouble from \"../index\";\nimport {Artwork} from \"../../../../types\";\nimport {useNavigation} from \"@react-navigation/native\";\n\n//PROPS\nexport type PaintingsFromSameArtistProps = {\n    artistId: string\n}\n\n/**\n * Component displaying an {@link ArtworkCarouselDouble} of artworks from the same artist as artistId\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=1OmJnk8nQRJG-nkCNVO9paEYwhM0Wd64d\" alt=\"ArtworkPage\" height=\"500\">\n * @param {PaintingsFromSameArtistProps} props\n * @param {string} props.artistId - ID of the artist\n * @constructor\n * @return PaintingsFromSameArtist\n */\nexport function PaintingsFromSameArtistComponent(props: PaintingsFromSameArtistProps) {\n\n    const navigation = useNavigation()\n\n    const [fromArtist, setFromArtist] = useState<[Artwork] | []>([]);\n\n    // API CALL TO GET ARTWORKS FROM SAME ARTIST\n    useEffect(() => {\n        axios.get(URL + `paintingEntity/byArtist/${props.artistId}/0`).then((response) => {\n            const data = response.data.map((el: any) => {\n                return {\n                    id: el.id,\n                    imageUri: URL + `images/content/mini/${el.artistId}/${el.urlImage}`,\n                    artistName: el.artisteName,\n                    artworkName: el.name,\n                    artistId: el.artistId\n                }\n            // only need 10\n            }).slice(0,10)\n\n            setFromArtist(data)\n        });\n    }, [props.artistId]);\n\n    // ON CLICKED, NAVIGATES TO ARTIST PAGE\n    const onPressArtist = () => {\n        if (fromArtist[0] != undefined) {\n            navigation.navigate('ArtistNonUserPage', {\n                imageUri: fromArtist[0].imageUri,\n                information: LOREM,\n                artistName: fromArtist[0].artistName,\n                artistId: props.artistId,\n            })\n        }\n    }\n\n    return (\n            <ArtworkCarouselDouble\n                title={fromArtist[0] != undefined ? `Also from ${fromArtist[0].artistName}` : \"No other works from this artist\"}\n                data={fromArtist} navigate={() => onPressArtist()}/>\n    )\n}\n\n\n/**\n * USED FOR CLEAN DOC AND FUNCTIONAL CODE\n * @ignore\n */\nconst PaintingsFromSameArtist = React.memo(PaintingsFromSameArtistComponent)\nexport { PaintingsFromSameArtist }",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/ArtworkCarouselDouble/PaintingsFromSameArtist/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 9,
    "kind": "function",
    "name": "PaintingsFromSameArtistComponent",
    "memberof": "src/components/ArtworkCarouselDouble/PaintingsFromSameArtist/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/ArtworkCarouselDouble/PaintingsFromSameArtist/index.tsx~PaintingsFromSameArtistComponent",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/ArtworkCarouselDouble/PaintingsFromSameArtist/index.tsx",
    "importStyle": "{PaintingsFromSameArtistComponent}",
    "description": "Component displaying an {@link ArtworkCarouselDouble} of artworks from the same artist as artistId\n\n<img src=\"https://drive.google.com/uc?export=view&id=1OmJnk8nQRJG-nkCNVO9paEYwhM0Wd64d\" alt=\"ArtworkPage\" height=\"500\">",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "PaintingsFromSameArtistProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.artistId",
        "description": "ID of the artist"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "PaintingsFromSameArtist"
    }
  },
  {
    "__docId__": 10,
    "kind": "variable",
    "name": "PaintingsFromSameArtist",
    "memberof": "src/components/ArtworkCarouselDouble/PaintingsFromSameArtist/index.tsx",
    "static": true,
    "longname": "src/components/ArtworkCarouselDouble/PaintingsFromSameArtist/index.tsx~PaintingsFromSameArtist",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/ArtworkCarouselDouble/PaintingsFromSameArtist/index.tsx",
    "importStyle": "{PaintingsFromSameArtist}",
    "description": "USED FOR CLEAN DOC AND FUNCTIONAL CODE",
    "lineNumber": 70,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 11,
    "kind": "file",
    "name": "src/components/ArtworkCarouselDouble/index.tsx",
    "content": "import React from 'react';\nimport {FlatList, SafeAreaView, ScrollView, Text, TouchableOpacity, View} from 'react-native';\nimport {Artwork, artworkCarouselDoubleProps} from \"../../../types\";\nimport styles from \"./styles\";\nimport {Entypo} from \"@expo/vector-icons\";\nimport {ArtworkComponent} from \"../Artwork\";\n\n/**\n * Component rendering a horizontally scrollable double carousel of artworks\n * @param {artworkCarouselDoubleProps} props\n * @param {string} props.title - Name of the Carousel\n * @param {Artwork[] | undefined} props.data - Array of artworks\n * @param {void} props.navigated - Navigation destination\n * @constructor\n * @return ArtworkCarouselDouble\n */\nexport default function ArtworkCarouselDouble(props: artworkCarouselDoubleProps) {\n\n    //RENDER ITEM\n    const renderItem = ({item, route}: any): JSX.Element => {\n        return (<ArtworkComponent id={item.id} imageUri={item.imageUri}\n                                  artistName={item.artistName}\n                                  artworkName={item.artworkName} artistId={item.artistId}/>)\n    }\n\n\n    if (props.data == undefined) return (<View></View>)\n\n\n    return (<SafeAreaView>\n        {/*TITLE OF ARTWORK DOUBLE CAROUSEL*/}\n        {/*IF CAROUSEL HAS LINK*/}\n        {props.navigate != undefined ?\n            //@ts-ignore\n            <TouchableOpacity onPress={() => props.navigate()}>\n                <View style={styles.textAndChevron}>\n                    {/*TEXT*/}\n                    <Text style={styles.title}>{props.title}</Text>\n                    {/*CHEVRON*/}\n                    <Entypo name={\"chevron-right\"} size={30} color={\"white\"}/>\n                </View>\n\n            </TouchableOpacity> :\n\n            //IF CAROUSEL HAS NO LINK THEN SIMPLE TITLE\n            <Text style={styles.title}>{props.title}</Text>}\n\n        <ScrollView horizontal showsVerticalScrollIndicator={false} showsHorizontalScrollIndicator={false}\n                    contentContainerStyle={{paddingVertical: 7}}>\n\n            <FlatList\n                scrollEnabled={false}\n                initialNumToRender={3}\n                numColumns={props.data.length}\n                showsVerticalScrollIndicator={false}\n                showsHorizontalScrollIndicator={false}\n                keyExtractor={(item) => item.id}\n                key={props.data.length}\n                data={props.data}\n                extraData={props.data}\n                renderItem={renderItem}/>\n        </ScrollView>\n    </SafeAreaView>)\n}",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/ArtworkCarouselDouble/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 12,
    "kind": "function",
    "name": "ArtworkCarouselDouble",
    "memberof": "src/components/ArtworkCarouselDouble/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/ArtworkCarouselDouble/index.tsx~ArtworkCarouselDouble",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/ArtworkCarouselDouble/index.tsx",
    "importStyle": "ArtworkCarouselDouble",
    "description": "Component rendering a horizontally scrollable double carousel of artworks",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "artworkCarouselDoubleProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.title",
        "description": "Name of the Carousel"
      },
      {
        "nullable": null,
        "types": [
          "Artwork[] ",
          " undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "props.data",
        "description": "Array of artworks"
      },
      {
        "nullable": null,
        "types": [
          "void"
        ],
        "spread": false,
        "optional": false,
        "name": "props.navigated",
        "description": "Navigation destination"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "ArtworkCarouselDouble"
    }
  },
  {
    "__docId__": 13,
    "kind": "file",
    "name": "src/components/ArtworkCarouselSingle/index.tsx",
    "content": "import React from 'react';\nimport {FlatList} from 'react-native';\nimport {Artwork} from \"../../../types\";\nimport {ArtworkComponent} from \"../Artwork\";\n\n// PROPS\nexport type artworkCarouselSingleProps = {\n    data: Artwork[],\n}\n\n/**\n * Component rendering a horizontally scrollable double carousel of artworks\n * @param {artworkCarouselSingleProps} props\n * @param {Artwork[] | undefined} props.data - Array of artworks\n * @constructor\n * @return ArtworkCarouselSingle\n */\nexport default function ArtworkCarouselSingle(props: artworkCarouselSingleProps) {\n\n    // DECLARE COMPONENT MODEL TO INSERT IN FLATLIST\n    const renderItem = ({item, index}: any) => {\n        return (<ArtworkComponent id={item.id} imageUri={item.imageUri}\n                                  artistName={item.artistName}\n                                  artworkName={item.artworkName}\n                                  artistId={item.artistId}/>)\n    }\n\n    return <FlatList data={props.data} renderItem={renderItem}\n                  keyExtractor={(item) => item.id} horizontal showsHorizontalScrollIndicator={false}/>\n\n}",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/ArtworkCarouselSingle/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 14,
    "kind": "function",
    "name": "ArtworkCarouselSingle",
    "memberof": "src/components/ArtworkCarouselSingle/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/ArtworkCarouselSingle/index.tsx~ArtworkCarouselSingle",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/ArtworkCarouselSingle/index.tsx",
    "importStyle": "ArtworkCarouselSingle",
    "description": "Component rendering a horizontally scrollable double carousel of artworks",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "artworkCarouselSingleProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Artwork[] ",
          " undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "props.data",
        "description": "Array of artworks"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "ArtworkCarouselSingle"
    }
  },
  {
    "__docId__": 15,
    "kind": "file",
    "name": "src/components/ArtworkGrid/MatchingByColorGrid/index.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport {SafeAreaView, Text, TouchableOpacity, View} from 'react-native';\nimport ArtworkGrid from \"../index\";\nimport {Artwork} from \"../../../../types\";\nimport axios from \"axios\";\nimport {URL} from \"../../../services/constantes\";\nimport styles from \"./styles\";\nimport {Entypo} from \"@expo/vector-icons\";\nimport {useNavigation} from \"@react-navigation/native\";\n\n// PROPS\nexport type MatchingByColorGridProps = {\n    color: string\n}\n\n/**\n * Component displaying an {@link ArtworkGrid} of artworks matched by color with {@link props.color}\n * @param {MatchingByColorGridProps} props\n * @param {string} props.color - Color picked by the user\n * @constructor\n * @return MatchingByColorGrid\n */\nconst MatchingByColorGrid = (props: MatchingByColorGridProps) => {\n\n    const navigation = useNavigation()\n\n    const [paintingsColorMatch, setPaintingsColorMatch] = useState<[Artwork] | []>([]);\n\n    //API CALL TO GET PAINTINGS OF THE SAME COLOR AS COLOR\n    useEffect(() => {\n        axios\n            .post(URL + `paintingSearch/findByColor`, {\n                colorCode: props.color, sortOrder: \"ASC\"\n            }, {headers: {\"Access-Control-Allow-Origin\": \"*\", \"Content-Type\": \"application/json\"}})\n            .then((response) => {\n\n                // PARSING DATA\n                const parsedData = response.data.map((el: any) => {\n                    return {\n                        id: el.id,\n                        imageUri: URL + `images/content/mini/${el.artistId}/${el.urlImage}`,\n                        artistName: el.artisteName,\n                        artworkName: el.name,\n                        artistId: el.artistId\n                    }\n                })\n\n                setPaintingsColorMatch(parsedData)\n            });\n    }, [props.color]);\n\n    return (\n        <SafeAreaView>\n            <View style={styles.headerMatchingColor}>\n                {/*BACK BUTTON*/}\n                <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>\n                    <Entypo name={\"chevron-left\"} size={35} color={\"white\"}/>\n                </TouchableOpacity>\n\n                {/*LABEL OF COLOR */}\n                <View style={[styles.colorHeader, {backgroundColor: `#${props.color}`}]}><Text\n                    style={styles.title}>{props.color}</Text>\n                </View>\n            </View>\n\n            {/*GRID OF ARTWORKS*/}\n            <ArtworkGrid data={paintingsColorMatch}/>\n        </SafeAreaView>\n    )\n}\n\n\nexport default MatchingByColorGrid;",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/ArtworkGrid/MatchingByColorGrid/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 16,
    "kind": "function",
    "name": "MatchingByColorGrid",
    "memberof": "src/components/ArtworkGrid/MatchingByColorGrid/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/ArtworkGrid/MatchingByColorGrid/index.tsx~MatchingByColorGrid",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/ArtworkGrid/MatchingByColorGrid/index.tsx",
    "importStyle": "MatchingByColorGrid",
    "description": "Component displaying an {@link ArtworkGrid} of artworks matched by color with {@link props.color}",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MatchingByColorGridProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.color",
        "description": "Color picked by the user"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "MatchingByColorGrid"
    }
  },
  {
    "__docId__": 17,
    "kind": "file",
    "name": "src/components/ArtworkGrid/index.tsx",
    "content": "import React from 'react';\nimport {FlatList, Text, View} from 'react-native';\nimport styles from \"./styles\"\nimport {Artwork, ArtworkGridProps} from \"../../../types\";\nimport {ArtworkComponent} from \"../Artwork\";\nimport Checkbox from 'expo-checkbox';\nimport {useInteractions} from \"../../contexts/UserInteractions\";\n\n/**\n * Component displaying a vertical scrollable grid of artworks\n * @param {ArtworkGridProps} props\n * @param {string} [props.title] - Name of the grid\n * @param {Artwork[] | []} props.data - Array of artworks\n * @constructor\n * @return ArtworkGrid\n */\nexport default function ArtworkGrid(props: ArtworkGridProps) {\n\n    const userInt = useInteractions()\n\n    // FUNCTION TO RENDER ITEM ACCORDING TO AUTH.EDIT?\n    const renderItem = ({item, index}: any) => {\n        return (\n            <View key={index}\n                  style={{justifyContent: \"center\", alignContent: \"center\", alignSelf: \"center\", alignItems: \"center\"}}>\n                <ArtworkComponent id={item.id} imageUri={item.imageUri} artistName={item.artistName}\n                                  artworkName={item.artworkName} artistId={item.artistId}/>\n                {userInt.edit && <Checkbox style={styles.checkbox} disabled={false} value={userInt.selected.includes(item.id)} color=\"white\"/>}\n            </View>\n        )\n    }\n\n    return (\n        <View style={styles.container}>\n\n            {props.title\n                ? <Text style={styles.title}>{props.title}</Text>\n                : <View style={styles.noTitle}/>}\n\n            {/*ARTWORK GRID*/}\n            <View style={styles.grid}>\n                <FlatList\n                    data={props.data}\n                    renderItem={renderItem}\n                    keyExtractor={item => item.id}\n                    numColumns={2}\n                    scrollEnabled={false}\n                    extraData={props.data}\n                    style={{alignSelf: \"center\", alignContent: \"center\"}}\n                    columnWrapperStyle={{justifyContent: \"center\"}}\n                />\n            </View>\n        </View>\n    )\n}",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/ArtworkGrid/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 18,
    "kind": "function",
    "name": "ArtworkGrid",
    "memberof": "src/components/ArtworkGrid/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/ArtworkGrid/index.tsx~ArtworkGrid",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/ArtworkGrid/index.tsx",
    "importStyle": "ArtworkGrid",
    "description": "Component displaying a vertical scrollable grid of artworks",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ArtworkGridProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "props.title",
        "description": "Name of the grid"
      },
      {
        "nullable": null,
        "types": [
          "Artwork[] ",
          " []"
        ],
        "spread": false,
        "optional": false,
        "name": "props.data",
        "description": "Array of artworks"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "ArtworkGrid"
    }
  },
  {
    "__docId__": 19,
    "kind": "file",
    "name": "src/components/ArtworkGridTabView/index.tsx",
    "content": "import * as React from 'react';\nimport {Animated, FlatList, StyleSheet, View} from 'react-native';\nimport {Artwork} from \"../../../types\";\nimport {Tabs} from 'react-native-collapsible-tab-view'\nimport {ArtworkComponent} from \"../Artwork\";\n\n// PROPS\nexport type ArtworkGridTabViewProps = {\n    data: Artwork[]\n}\n\n/**\n * Component used in {@link ArtworkPage} for displaying a tab composed of a vertical artwork grid\n * @param {ArtworkGridTabViewProps} props\n * @param {Artwork[]} props.data - Array of artworks\n * @constructor\n * @return ArtworkGridTabView\n */\nexport default function ArtworkGridTabView(props: ArtworkGridTabViewProps) {\n\n    // DECLARE COMPONENT MODEL TO INSERT IN FLATLIST\n    const _renderItem = ({item, index}: any) => (\n        <View key={index}\n              style={{justifyContent: \"center\", alignContent: \"center\", alignSelf: \"center\", alignItems: \"center\"}}>\n            <ArtworkComponent id={item.id} imageUri={item.imageUri} artistName={item.artistName}\n                              artworkName={item.artworkName} artistId={item.artistId}/>\n        </View>\n    );\n\n    return (\n        // ARTWORK GRID\n        <Tabs.FlatList\n            {...props}\n            data={props.data}\n            numColumns={2}\n            keyExtractor={(item, i) => String(i)}\n            renderItem={_renderItem}\n            style={styles.flatlist}\n        />\n    );\n}\n\nconst styles = StyleSheet.create({\n    item: {\n        backgroundColor: 'white',\n        flexDirection: 'row',\n        alignItems: 'center',\n        padding: 8,\n    },\n    avatar: {\n        height: 36,\n        width: 36,\n        borderRadius: 18,\n        backgroundColor: '#e91e63',\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    letter: {\n        color: 'white',\n        fontWeight: 'bold',\n    },\n    details: {\n        margin: 8,\n    },\n    name: {\n        fontWeight: 'bold',\n        fontSize: 14,\n        color: 'black',\n    },\n    number: {\n        fontSize: 12,\n        color: '#999',\n    },\n    separator: {\n        height: StyleSheet.hairlineWidth,\n        backgroundColor: 'rgba(0, 0, 0, .08)',\n    },\n    checkbox: {\n        margin: 8,\n        zIndex: 10,\n        position: \"absolute\",\n        right: -7,\n        top: -10,\n        borderRadius: 10,\n    },\n    flatlist: {\n        // justifyContent: \"center\",\n        alignSelf: \"center\",\n        // alignContent: \"center\"\n\n    }\n});",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/ArtworkGridTabView/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 20,
    "kind": "function",
    "name": "ArtworkGridTabView",
    "memberof": "src/components/ArtworkGridTabView/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/ArtworkGridTabView/index.tsx~ArtworkGridTabView",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/ArtworkGridTabView/index.tsx",
    "importStyle": "ArtworkGridTabView",
    "description": "Component used in {@link ArtworkPage} for displaying a tab composed of a vertical artwork grid",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ArtworkGridTabViewProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Artwork[]"
        ],
        "spread": false,
        "optional": false,
        "name": "props.data",
        "description": "Array of artworks"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "ArtworkGridTabView"
    }
  },
  {
    "__docId__": 21,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/components/ArtworkGridTabView/index.tsx",
    "static": true,
    "longname": "src/components/ArtworkGridTabView/index.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/components/ArtworkGridTabView/index.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 22,
    "kind": "file",
    "name": "src/components/DetailedComponents/HeaderDetailedPage/index.tsx",
    "content": "import {Text, TouchableOpacity, View} from \"react-native\";\nimport React from \"react\";\nimport {AntDesign, Entypo} from \"@expo/vector-icons\";\nimport {styles} from \"./styles\"\nimport {useNavigation} from \"@react-navigation/native\";\nimport {HeaderDetailPageProps} from \"../../../../types\";\n\n/**\n * Component displaying a header for detailed pages\n * @param {HeaderDetailPageProps} props\n * @param {string} props.title - Title of the header\n * @param {void} [props.setModalNewList(modalNewList: boolean)] - Toggles NewListModal visibility\n * @param {void} [props.setModalAddToList(modalAddToList: boolean)] - Toggles AddToListModal visibility\n * @constructor\n */\nexport const HeaderDetailedPage  = (props: HeaderDetailPageProps) => {\n\n    const navigation = useNavigation()\n\n    return (\n        <View style={styles.headerContainer}>\n\n            <View style={styles.leftContainer}>\n                {/*BACK BUTTON*/}\n                <TouchableOpacity style={styles.backButtonContainer} onPress={() => {\n                    navigation.goBack()\n                }}>\n                    <Entypo name={\"chevron-left\"} color=\"white\" size={40}/>\n                </TouchableOpacity>\n\n                {/*TITLE OF THE PAGE*/}\n                <Text style={styles.title}>{props.title}</Text>\n            </View>\n\n            {/*PLUS BUTTON FOR NEW LIST (IN CASE HEADER OF ALLMYLISTS PAGE)*/}\n            {props.setModalNewList\n                ? (<TouchableOpacity style={styles.plusButtonContainer} onPress={() => {\n                    props.setModalNewList && props.setModalNewList(true)\n                }}>\n                    <AntDesign name={\"plus\"} size={35} color={\"white\"}/>\n                </TouchableOpacity>)\n                : (<View></View>)}\n        </View>\n    )\n}",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/DetailedComponents/HeaderDetailedPage/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 23,
    "kind": "function",
    "name": "HeaderDetailedPage",
    "memberof": "src/components/DetailedComponents/HeaderDetailedPage/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/DetailedComponents/HeaderDetailedPage/index.tsx~HeaderDetailedPage",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/DetailedComponents/HeaderDetailedPage/index.tsx",
    "importStyle": "{HeaderDetailedPage}",
    "description": "Component displaying a header for detailed pages",
    "lineNumber": 16,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "HeaderDetailPageProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.title",
        "description": "Title of the header"
      },
      {
        "nullable": null,
        "types": [
          "void"
        ],
        "spread": false,
        "optional": true,
        "name": "props.setModalNewList(modalNewList: boolean)",
        "description": "Toggles NewListModal visibility"
      },
      {
        "nullable": null,
        "types": [
          "void"
        ],
        "spread": false,
        "optional": true,
        "name": "props.setModalAddToList(modalAddToList: boolean)",
        "description": "Toggles AddToListModal visibility"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 24,
    "kind": "file",
    "name": "src/components/DiscoverByColor/index.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport {Text, TouchableOpacity, View} from 'react-native';\nimport {Artwork} from \"../../../types\";\nimport ArtworkCarouselSingle from \"../ArtworkCarouselSingle\";\nimport styles from \"./styles\";\nimport {useNavigation} from \"@react-navigation/native\";\nimport axios from \"axios\";\nimport {URL} from \"../../services/constantes\";\nimport {Entypo} from \"@expo/vector-icons\";\nimport ColorPickerModal from \"../Modals/ColorPickerModal\";\n\n/**\n * Function used to generate a random color when mounting the component for the first time\n * @return : string of random HEX color with \"#\" in front*/\nconst generateColor = () => {\n    const randomColor = Math.floor(Math.random() * 16777215)\n        .toString(16)\n        .padStart(6, '0');\n    return `#${randomColor}`;\n};\n\n/**\n * Color generated randomly on first mount\n * @type string\n */\nexport const randomColor = generateColor()\n\n/**\n * Component displaying a {@link ArtworkCarouselSingle} of similar color artworks and a button letting the user choose the color he wants\n * @constructor\n * @return DiscoverByColor\n */\nexport default function DiscoverByColor() {\n\n    const [paintingByColor, setPaintingByColor] = useState<[Artwork] | []>([]);\n    const [isModalVisible, setModalVisible] = useState(false);\n    const [color, setColor] = useState(randomColor)\n    const navigation = useNavigation()\n\n    // API CALL TO GET PAINTINGS OF THE SAME COLOR\n    useEffect(() => {\n        axios\n            .post(URL + `paintingSearch/findByColor`, {\n                colorCode: color.slice(1), sortOrder: \"ASC\"\n            }, {headers: {\"Access-Control-Allow-Origin\": \"*\", \"Content-Type\": \"application/json\"}})\n            .then((response) => {\n\n                // PARSING DATA\n                const parsedData = response.data.map((el: any) => {\n                    return {\n                        id: el.id,\n                        imageUri: URL + `images/content/mini/${el.artistId}/${el.urlImage}`,\n                        artistName: el.artisteName,\n                        artworkName: el.name,\n                        artistId: el.artistId\n                    }\n                })\n\n                setPaintingByColor(parsedData)\n            });\n    }, [color, isModalVisible]);\n\n    const toggleModal = () => {\n        setModalVisible(!isModalVisible);\n    };\n\n    return (\n        <View>\n            {/*MODAL FOR COLOR PICKER*/}\n            <ColorPickerModal isModalVisible={isModalVisible} setModalVisible={setModalVisible} color={color}\n                              setColor={setColor}/>\n\n            <View style={styles.container}>\n\n                {/*IF CLICK ON TITLE THEN NAVIGATE TO PAGE FULL OF ARTWORKS*/}\n                <TouchableOpacity onPress={() => navigation.navigate(\"ListContentPage\", {\n                    id: undefined,\n                    name: color,\n                    data: paintingByColor\n                })}>\n                    <View style={styles.textAndChevron}>\n                        {/*TEXT*/}\n                        <Text style={styles.title}>Discover by color</Text>\n                        {/*CHEVRON*/}\n                        <Entypo name={\"chevron-right\"} size={30} color={\"white\"}/>\n                    </View>\n                </TouchableOpacity>\n\n                {/*CHOOSE COLOR BUTTON*/}\n                <TouchableOpacity style={[styles.button, {backgroundColor: color}]} onPress={() => toggleModal()}>\n                    <Text style={styles.buttonText}>Choose colour</Text>\n                </TouchableOpacity>\n\n                {/*CAROUSEL OF RANDOM COLOR ARTWORKS*/}\n                <ArtworkCarouselSingle data={paintingByColor}/>\n            </View>\n        </View>)\n}",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/DiscoverByColor/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 25,
    "kind": "function",
    "name": "generateColor",
    "memberof": "src/components/DiscoverByColor/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/DiscoverByColor/index.tsx~generateColor",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/components/DiscoverByColor/index.tsx",
    "importStyle": null,
    "description": "Function used to generate a random color when mounting the component for the first time",
    "lineNumber": 15,
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": ": string of random HEX color with \"#\" in front"
    },
    "params": [],
    "ignore": true
  },
  {
    "__docId__": 26,
    "kind": "variable",
    "name": "randomColor",
    "memberof": "src/components/DiscoverByColor/index.tsx",
    "static": true,
    "longname": "src/components/DiscoverByColor/index.tsx~randomColor",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/DiscoverByColor/index.tsx",
    "importStyle": "{randomColor}",
    "description": "Color generated randomly on first mount",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 27,
    "kind": "function",
    "name": "DiscoverByColor",
    "memberof": "src/components/DiscoverByColor/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/DiscoverByColor/index.tsx~DiscoverByColor",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/DiscoverByColor/index.tsx",
    "importStyle": "DiscoverByColor",
    "description": "Component displaying a {@link ArtworkCarouselSingle} of similar color artworks and a button letting the user choose the color he wants",
    "lineNumber": 33,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "DiscoverByColor"
    },
    "params": []
  },
  {
    "__docId__": 28,
    "kind": "file",
    "name": "src/components/ExploreComponent/index.tsx",
    "content": "import React from 'react';\nimport {View} from 'react-native';\nimport MostMatchedComponent from \"../ArtworkCarouselDouble/MostMatched\";\nimport RandomArtists from \"../SquareComponentGrid/RandomArtists\";\nimport DiscoverByColor from \"../DiscoverByColor\";\n\n/**\n * Component used in {@link ExplorePage} composed of {@link MostMatchedComponent}, {@link RandomArtists} and {@link DiscoverByColor}\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=1Jsy_xfP03llSgeLAAk-x0ybLsiWr-Nuf\" alt=\"ArtworkPage\" height=\"500\">\n * @constructor\n * @return ExploreComponent\n */\nexport default function ExploreComponent() {\n\n    return (\n        <View>\n            {/*MOST MATCHED IN LAST 30 DAYS*/}\n            <MostMatchedComponent/>\n            {/*FOUR RANDOM ARTISTS*/}\n            <RandomArtists/>\n            {/*DISCOVER BY COLOR*/}\n            <DiscoverByColor/>\n        </View>\n    )\n}\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/ExploreComponent/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 29,
    "kind": "function",
    "name": "ExploreComponent",
    "memberof": "src/components/ExploreComponent/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/ExploreComponent/index.tsx~ExploreComponent",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/ExploreComponent/index.tsx",
    "importStyle": "ExploreComponent",
    "description": "Component used in {@link ExplorePage} composed of {@link MostMatchedComponent}, {@link RandomArtists} and {@link DiscoverByColor}\n\n<img src=\"https://drive.google.com/uc?export=view&id=1Jsy_xfP03llSgeLAAk-x0ybLsiWr-Nuf\" alt=\"ArtworkPage\" height=\"500\">",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "ExploreComponent"
    },
    "params": []
  },
  {
    "__docId__": 30,
    "kind": "file",
    "name": "src/components/FilterModal/index.tsx",
    "content": "import React, {useCallback, useEffect, useState} from 'react';\nimport {Dimensions, Text, TouchableOpacity, View} from 'react-native';\nimport styles from \"./styles\";\nimport Modal from \"react-native-modal\";\nimport DropDownPicker from \"react-native-dropdown-picker\"\nimport {Entypo, Feather, MaterialIcons} from \"@expo/vector-icons\";\nimport {URL} from \"../../services/constantes\"\nimport axios from \"axios\";\n\n// REWORKED ARROW UP ICON FOR DROPDOWNS\nconst ArrowUpIcon = () => {\n    return <MaterialIcons name={\"keyboard-arrow-up\"} size={30} color={\"white\"}/>\n}\n\n// REWORKED ARROW DOWN ICON FOR DROPDOWNS\nconst ArrowDownIcon = () => {\n    return <MaterialIcons name={\"keyboard-arrow-down\"} size={30} color={\"white\"}/>\n}\n\n// REWORKED TICK ICON FOR DROPDOWNS\nconst TickIcon = () => {\n    return <Feather name={\"check\"} size={20} color={\"white\"}/>\n}\n\n// PROPS\nexport type FilterModalProps = {\n    filter: Object,\n    setFilter(filter: any): void,\n    isModalVisible: boolean,\n    setModalVisible(isModalVisible: boolean): void\n}\n\n/**\n * Component used to filter search in the {@link ExplorePage}\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=1iU5fIyy5IP-DnEbLu2Vi0PfGTOxgjVa7\" alt=\"ArtworkPage\" height=\"500\">\n * @param {FilterModalProps} props\n * @param {Object} props.filter - Filters chosen by the user\n * @param {void} props.setFilter(filter: any) - Function for setting new filters on change\n * @param {boolean} props.isModalVisible - Modal visibility\n * @param {void} props.setModalVisible(isModalVisible: boolean) - Function for toggling modal visibility\n * @constructor\n * @return FilterModal\n */\nexport default function FilterModal(props: FilterModalProps) {\n\n    // FOR OPENING/CLOSING A DROPDOWN\n    // const [artMovementOpen, setArtMovementOpen] = useState(false);\n    // const [colorOpen, setColorOpen] = useState(false);\n    const [styleOpen, setStyleOpen] = useState(false);\n    const [genreOpen, setGenreOpen] = useState(false);\n    const [nationalityOpen, setNationalityOpen] = useState(false);\n\n    // FOR CLOSING THE OTHER DROPDOWNS\n    // const onArtMovementOpen = useCallback(() => {\n    //     setColorOpen(false)\n    //     setStyleOpen(false)\n    //     setGenreOpen(false)\n    //     setNationalityOpen(false)\n    // }, [])\n    // const onColorOpen = useCallback(() => {\n    //     setArtMovementOpen(false)\n    //     setStyleOpen(false)\n    //     setGenreOpen(false)\n    //     setNationalityOpen(false)\n    // }, [])\n    const onStyleOpen = useCallback(() => {\n        // setArtMovementOpen(false)\n        // setColorOpen(false)\n        setGenreOpen(false)\n        setNationalityOpen(false)\n    }, [])\n    const onGenreOpen = useCallback(() => {\n        // setArtMovementOpen(false)\n        // setColorOpen(false)\n        setStyleOpen(false)\n        setNationalityOpen(false)\n    }, [])\n    const onNationalityOpen = useCallback(() => {\n        // setArtMovementOpen(false)\n        // setColorOpen(false)\n        setStyleOpen(false)\n        setGenreOpen(false)\n    }, [])\n\n    // WHICH FILTERS THE USER CHOSE FOR EACH DROPDOWN\n    // const [colorValues, setColorValues] = useState([]);\n    const [styleValue, setStyleValue] = useState(\"\");\n    const [genreValue, setGenreValue] = useState(\"\");\n    const [nationalityValue, setNationalityValue] = useState(\"\");\n\n    useEffect(() => {\n        // API CALL TO GET ALL FILTERS POSSIBLE FOR STYLES\n        axios.get(URL + `paintingFront/listStyles`).then((response) => {\n            // PARSING DATA\n            let data = response.data.map((item: { weight: number, code: string, name: string }) => {\n                return {\n                    label: item.name,\n                    value: item.code\n                }\n            })\n            data.shift() // removes first empty element\n            setStyleItems(data)\n        });\n\n        // API CALL TO GET ALL FILTERS POSSIBLE FOR GENRES\n        axios.get(URL + `paintingFront/listGenres`).then((response) => {\n            // PARSING DATA\n            let data = response.data.map((item: { weight: number, code: string, name: string }) => {\n                return {\n                    label: item.name,\n                    value: item.code\n                }\n            })\n            data.shift() // removes first empty element\n            setGenreItems(data)\n        });\n\n        // API CALL TO GET ALL FILTERS POSSIBLE FOR ORIGINS\n        axios.get(URL + `paintingFront/listOrigins`).then((response) => {\n            // PARSING DATA\n            let data = response.data.map((item: { weight: number, code: string, name: string }) => {\n                return {\n                    label: item.name,\n                    value: item.code\n                }\n            })\n            data.shift() // removes first empty element\n            setNationalityItems(data)\n        });\n    }, [])\n\n    // LIST OF FILTERS POSSIBLE TO CHOOSE\n    // const [artMovementItems, setArtMovementItems] = useState([\n    //     {label: 'Symbolism', value: 'symbolism'},\n    //     {label: 'Renaissance', value: 'renaissance'},\n    //     {label: 'Impressionism', value: 'impressionism'},\n    //     {label: 'Pointillism', value: 'pointillism'},\n    // ]);\n    // const [colorItems, setColorItems] = useState([\n    //     {label: 'Red', value: 'red'},\n    //     {label: 'Green', value: 'green'},\n    // ]);\n    const [styleItems, setStyleItems] = useState([\n        {label: '', value: ''}\n    ]);\n    const [genreItems, setGenreItems] = useState([\n        {label: '', value: ''}\n    ]);\n    const [nationalityItems, setNationalityItems] = useState([\n        {label: '', value: ''}\n    ]);\n\n    const toggleModal = () => {\n        props.setModalVisible(!props.isModalVisible);\n    };\n\n    // ON CLICK BUTTON FILTER => SEND FILTER DATA\n    const toggleFilter = () => {\n        props.setModalVisible(false)\n        props.setFilter({\n            // artMovementFilter: Object.values(props.artMovementValues),\n            // colorFilter: Object.values(colorValues),\n            styleFilter: styleValue,\n            genreFilter: genreValue,\n            nationalityFilter: nationalityValue\n        })\n    }\n\n    // CLEAR ALL THE FILTERS VALUES\n    const clearFilter = () => {\n        props.setModalVisible(false)\n        props.setFilter({\n            styleFilter: \"\",\n            genreFilter: \"\",\n            nationalityFilter: \"\"\n        })\n    }\n\n    const deviceWidth = Dimensions.get(\"window\").width;\n    const deviceHeight = Dimensions.get(\"window\").height\n\n    return (\n        <Modal isVisible={props.isModalVisible}\n               animationIn={\"fadeIn\"}\n               animationOut={\"fadeOut\"}\n               deviceHeight={deviceHeight}\n               deviceWidth={deviceWidth}\n               statusBarTranslucent={true}\n               backdropOpacity={0.8}\n               style={styles.containerModal}\n        >\n            {/*BACK BUTTON*/}\n            <TouchableOpacity style={styles.backButton} onPress={() => toggleModal()}>\n                <Entypo name={\"chevron-left\"} size={30} color={\"white\"}/>\n            </TouchableOpacity>\n\n            {/*TITLE*/}\n            <Text style={styles.title}>Filters</Text>\n\n            {/*DROPDOWNS AND BUTTON CONTAINER*/}\n            <View style={[styles.container, {flex: 1, marginTop: 100, marginBottom: 100}]}>\n\n                {/*DROPDOWNS CONTAINER*/}\n                <View style={styles.pickersContainer}>\n                    {/*<DropDownPicker\n                            placeholder={\"Art Movement\"}\n                            min={0}\n                            max={5}\n                            multiple={true}\n                            open={artMovementOpen}\n                            value={props.artMovementValues}\n                            items={artMovementItems}\n                            setOpen={setArtMovementOpen}\n                            onOpen={onArtMovementOpen}\n                            setValue={() => props.setArtMovementValues}\n                            setItems={setArtMovementItems}\n                            zIndex={5000}\n                            zIndexInverse={1000}\n                            containerStyle={styles.picker}\n                            style={styles.dropdownInside}\n                            labelStyle={styles.labelStyle}\n                            placeholderStyle={styles.dropdownPlaceholder}\n                            dropDownContainerStyle={styles.dropDownContainerStyle}\n                            listItemLabelStyle={styles.listItemLabelStyle}\n                            ArrowDownIconComponent={() => <ArrowDownIcon/>}\n                            ArrowUpIconComponent={() => <ArrowUpIcon/>}\n                            TickIconComponent={() => <TickIcon/>}\n                        />*/}\n                    {/*<DropDownPicker\n                            placeholder={\"Color\"}\n                            min={0}\n                            max={5}\n                            multiple={true}\n                            open={colorOpen}\n                            value={colorValues}\n                            items={colorItems}\n                            setOpen={setColorOpen}\n                            onOpen={onColorOpen}\n                            setValue={setColorValues}\n                            setItems={setColorItems}\n                            zIndex={4000}\n                            zIndexInverse={2000}\n                            containerStyle={styles.picker}\n                            style={styles.dropdownInside}\n                            labelStyle={styles.labelStyle}\n                            placeholderStyle={styles.dropdownPlaceholder}\n                            dropDownContainerStyle={styles.dropDownContainerStyle}\n                            listItemLabelStyle={styles.listItemLabelStyle}\n                            ArrowDownIconComponent={() => <ArrowDownIcon/>}\n                            ArrowUpIconComponent={() => <ArrowUpIcon/>}\n                            TickIconComponent={() => <TickIcon/>}\n                        />*/}\n                    {/*STYLE FILTER DROPDOWN*/}\n                    <DropDownPicker\n                        placeholder={\"Style\"}\n                        min={0}\n                        max={5}\n                        open={styleOpen}\n                        value={styleValue}\n                        items={styleItems}\n                        setOpen={setStyleOpen}\n                        onOpen={onStyleOpen}\n                        setValue={setStyleValue}\n                        setItems={setStyleItems}\n                        zIndex={3000}\n                        zIndexInverse={1000}\n                        containerStyle={styles.picker}\n                        style={styles.dropdownInside}\n                        labelStyle={styles.labelStyle}\n                        placeholderStyle={styles.dropdownPlaceholder}\n                        dropDownContainerStyle={styles.dropDownContainerStyle}\n                        listItemLabelStyle={styles.listItemLabelStyle}\n                        ArrowDownIconComponent={() => <ArrowDownIcon/>}\n                        ArrowUpIconComponent={() => <ArrowUpIcon/>}\n                        TickIconComponent={() => <TickIcon/>}\n                    />\n\n                    {/*GENRE FILTER DROPDOWN*/}\n                    <DropDownPicker\n                        placeholder={\"Genre\"}\n\n                        open={genreOpen}\n                        value={genreValue}\n                        items={genreItems}\n                        setOpen={setGenreOpen}\n                        onOpen={onGenreOpen}\n                        setValue={setGenreValue}\n                        setItems={setGenreItems}\n                        zIndex={3000}\n                        zIndexInverse={1000}\n                        containerStyle={styleOpen ? {marginTop: 200} : styles.picker}\n                        style={styles.dropdownInside}\n                        labelStyle={styles.labelStyle}\n                        placeholderStyle={styles.dropdownPlaceholder}\n                        dropDownContainerStyle={styles.dropDownContainerStyle}\n                        listItemLabelStyle={styles.listItemLabelStyle}\n                        ArrowDownIconComponent={() => <ArrowDownIcon/>}\n                        ArrowUpIconComponent={() => <ArrowUpIcon/>}\n                        TickIconComponent={() => <TickIcon/>}\n                    />\n\n                    {/*ORIGIN FILTER DROPDOWN*/}\n                    <DropDownPicker\n                        placeholder={\"Origin\"}\n                        open={nationalityOpen}\n                        value={nationalityValue}\n                        items={nationalityItems}\n                        setOpen={setNationalityOpen}\n                        onOpen={onNationalityOpen}\n                        setValue={setNationalityValue}\n                        setItems={setNationalityItems}\n                        zIndex={3000}\n                        zIndexInverse={1000}\n                        containerStyle={genreOpen ? {marginTop: 200} : styles.picker}\n                        style={styles.dropdownInside}\n                        labelStyle={styles.labelStyle}\n                        placeholderStyle={styles.dropdownPlaceholder}\n                        dropDownContainerStyle={styles.dropDownContainerStyle}\n                        listItemLabelStyle={styles.listItemLabelStyle}\n                        ArrowDownIconComponent={() => <ArrowDownIcon/>}\n                        ArrowUpIconComponent={() => <ArrowUpIcon/>}\n                        TickIconComponent={() => <TickIcon/>}\n                    />\n                </View>\n\n                {/*CLEAR FILTERS BUTTON*/}\n                <TouchableOpacity style={[styles.clearButton]} onPress={() => {\n                    setStyleValue(\"\")\n                    setGenreValue(\"\")\n                    setNationalityValue(\"\")\n                    toggleModal();\n                    clearFilter()\n                }}>\n                    <Text style={styles.buttonText}>Clear filters</Text>\n                </TouchableOpacity>\n\n                {/*APPLY FILTERS BUTTON*/}\n                <TouchableOpacity style={[styles.button]} onPress={() => {\n                    toggleModal();\n                    toggleFilter()\n                }}>\n                    <Text style={styles.buttonText}>Apply filters</Text>\n                </TouchableOpacity>\n            </View>\n        </Modal>\n    )\n}",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/FilterModal/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 31,
    "kind": "function",
    "name": "ArrowUpIcon",
    "memberof": "src/components/FilterModal/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/FilterModal/index.tsx~ArrowUpIcon",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/components/FilterModal/index.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 32,
    "kind": "function",
    "name": "ArrowDownIcon",
    "memberof": "src/components/FilterModal/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/FilterModal/index.tsx~ArrowDownIcon",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/components/FilterModal/index.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 33,
    "kind": "function",
    "name": "TickIcon",
    "memberof": "src/components/FilterModal/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/FilterModal/index.tsx~TickIcon",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/components/FilterModal/index.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 34,
    "kind": "function",
    "name": "FilterModal",
    "memberof": "src/components/FilterModal/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/FilterModal/index.tsx~FilterModal",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/FilterModal/index.tsx",
    "importStyle": "FilterModal",
    "description": "Component used to filter search in the {@link ExplorePage}\n\n<img src=\"https://drive.google.com/uc?export=view&id=1iU5fIyy5IP-DnEbLu2Vi0PfGTOxgjVa7\" alt=\"ArtworkPage\" height=\"500\">",
    "lineNumber": 45,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "FilterModalProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props.filter",
        "description": "Filters chosen by the user"
      },
      {
        "nullable": null,
        "types": [
          "void"
        ],
        "spread": false,
        "optional": false,
        "name": "props.setFilter(filter:",
        "description": "any) - Function for setting new filters on change"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "props.isModalVisible",
        "description": "Modal visibility"
      },
      {
        "nullable": null,
        "types": [
          "void"
        ],
        "spread": false,
        "optional": false,
        "name": "props.setModalVisible(isModalVisible:",
        "description": "boolean) - Function for toggling modal visibility"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "FilterModal"
    }
  },
  {
    "__docId__": 35,
    "kind": "file",
    "name": "src/components/HeaderComponent/HeaderArtistNonUserComponent/index.tsx",
    "content": "import React from 'react';\nimport {Animated, View} from 'react-native';\nimport HeaderComponent from \"../index\";\nimport {HeaderType} from \"../../../../types\";\n\n// PROPS\nexport type HeaderArtistNonUserProps = {\n    imageUri: string,\n    artistName: string,\n    scrollY: Animated.Value,\n    onClickImage: boolean,\n    setOnClickImage(onClickImage: boolean): void,\n}\n\n/**\n * Component displaying a header for {@link ArtistPage}\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=1blw6wW1IkP-TcNxOzJK3UEaeHLoVvAgp\" alt=\"ArtworkPage\" height=\"500\">\n * @param {HeaderArtistNonUserProps} props\n * @param {string} props.imageUri - URI of the banner\n * @param {string} props.artistName - Name of the artist\n * @param {Animated.Value} props.scrollY - Value of the scroll position\n * @param {boolean} props.onClickImage - Visibility OnClickImageModal\n * @param {void} props.setOnClickImage - Toggles visibility OnClickImageModal\n * @constructor\n * @return HeaderComponent\n */\nexport default function HeaderArtistNonUser(props: HeaderArtistNonUserProps) {\n\n    return (\n        <View>\n            <HeaderComponent imageUri={props.imageUri} title={props.artistName} type={HeaderType.NonUser}\n                             scrollY={props.scrollY} onClickImage={props.onClickImage}\n                             setOnClickImage={props.setOnClickImage}/>\n        </View>\n    )\n}",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/HeaderComponent/HeaderArtistNonUserComponent/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 36,
    "kind": "function",
    "name": "HeaderArtistNonUser",
    "memberof": "src/components/HeaderComponent/HeaderArtistNonUserComponent/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/HeaderComponent/HeaderArtistNonUserComponent/index.tsx~HeaderArtistNonUser",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/HeaderComponent/HeaderArtistNonUserComponent/index.tsx",
    "importStyle": "HeaderArtistNonUser",
    "description": "Component displaying a header for {@link ArtistPage}\n\n<img src=\"https://drive.google.com/uc?export=view&id=1blw6wW1IkP-TcNxOzJK3UEaeHLoVvAgp\" alt=\"ArtworkPage\" height=\"500\">",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "HeaderArtistNonUserProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.imageUri",
        "description": "URI of the banner"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.artistName",
        "description": "Name of the artist"
      },
      {
        "nullable": null,
        "types": [
          "Animated.Value"
        ],
        "spread": false,
        "optional": false,
        "name": "props.scrollY",
        "description": "Value of the scroll position"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "props.onClickImage",
        "description": "Visibility OnClickImageModal"
      },
      {
        "nullable": null,
        "types": [
          "void"
        ],
        "spread": false,
        "optional": false,
        "name": "props.setOnClickImage",
        "description": "Toggles visibility OnClickImageModal"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "HeaderComponent"
    }
  },
  {
    "__docId__": 37,
    "kind": "file",
    "name": "src/components/HeaderComponent/HeaderArtworkComponent/index.tsx",
    "content": "import React from 'react';\nimport {HeaderType} from \"../../../../types\";\nimport {HeaderComponent} from \"../index\";\n\n// CONSTANTS\nexport const HEADER_MAX_HEIGHT = 250;\n\n// PROPS\nexport type HeaderArtworkProps = {\n    imageUri: string,\n    artworkName: string,\n    artistName: string,\n    onClickImage: boolean,\n    setOnClickImage(onClickImage: boolean): void,\n    IdArtwork: string,\n    addToList(visible: boolean): void,\n}\n\n/**\n * Component displaying a header for {@link ArtworkPage}\n * @param {HeaderArtworkProps} props\n * @param {string} props.imageUri - URI of the banner\n * @param {string} props.artworkName - Name of the artwork\n * @param {string} props.artistName - Name of the artist\n * @param {boolean} props.onClickImage - Visibility {@link OnClickImage}\n * @param {void} props.setOnClickImage - Toggles visibility OnClickImageModal\n * @param {string} props.IdArtwork - ID of the artwork\n * @param {void} props.addToList - Toggles visibility {@link AddToListModal}\n * @constructor\n * @return HeaderComponent\n */\nexport default function HeaderArtwork(props: HeaderArtworkProps) {\n\n    return (\n        <HeaderComponent imageUri={props.imageUri} artistName={props.artistName} title={props.artworkName}\n                    type={HeaderType.Artwork}\n                    IdArtwork={props.IdArtwork}\n                    addToList={props.addToList} onClickImage={props.onClickImage}\n                    setOnClickImage={props.setOnClickImage}/>\n    )\n}\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/HeaderComponent/HeaderArtworkComponent/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 38,
    "kind": "variable",
    "name": "HEADER_MAX_HEIGHT",
    "memberof": "src/components/HeaderComponent/HeaderArtworkComponent/index.tsx",
    "static": true,
    "longname": "src/components/HeaderComponent/HeaderArtworkComponent/index.tsx~HEADER_MAX_HEIGHT",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/HeaderComponent/HeaderArtworkComponent/index.tsx",
    "importStyle": "{HEADER_MAX_HEIGHT}",
    "description": null,
    "lineNumber": 6,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 39,
    "kind": "function",
    "name": "HeaderArtwork",
    "memberof": "src/components/HeaderComponent/HeaderArtworkComponent/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/HeaderComponent/HeaderArtworkComponent/index.tsx~HeaderArtwork",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/HeaderComponent/HeaderArtworkComponent/index.tsx",
    "importStyle": "HeaderArtwork",
    "description": "Component displaying a header for {@link ArtworkPage}",
    "lineNumber": 32,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "HeaderArtworkProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.imageUri",
        "description": "URI of the banner"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.artworkName",
        "description": "Name of the artwork"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.artistName",
        "description": "Name of the artist"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "props.onClickImage",
        "description": "Visibility {@link OnClickImage}"
      },
      {
        "nullable": null,
        "types": [
          "void"
        ],
        "spread": false,
        "optional": false,
        "name": "props.setOnClickImage",
        "description": "Toggles visibility OnClickImageModal"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.IdArtwork",
        "description": "ID of the artwork"
      },
      {
        "nullable": null,
        "types": [
          "void"
        ],
        "spread": false,
        "optional": false,
        "name": "props.addToList",
        "description": "Toggles visibility {@link AddToListModal}"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "HeaderComponent"
    }
  },
  {
    "__docId__": 40,
    "kind": "file",
    "name": "src/components/HeaderComponent/HeaderEditProfileComponent/index.tsx",
    "content": "import React, {useState} from 'react';\nimport {Animated, Image, TouchableOpacity, View} from 'react-native';\nimport styles from \"./styles\";\nimport {useAuth} from \"../../../contexts/Auth\";\nimport {Feather} from \"@expo/vector-icons\";\nimport ImagePickerComponent from \"../../ImagePickerComponent\";\nimport {URL} from \"../../../services/constantes\";\nimport Toast from \"react-native-toast-message\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport {HeaderEditProfileComponentProps} from \"../../../../types\";\n\n// CONSTANTS\nexport const HEADER_MAX_HEIGHT = 250;\nexport const HEADER_MIN_HEIGHT = 80;\nexport const HEADER_SCROLL_DISTANCE = HEADER_MAX_HEIGHT - HEADER_MIN_HEIGHT;\nexport const SUBSTRACT_START_TRANSITION = 30\nexport const ICON_TRANSITION = 20\n\n/**\n * Component displaying a header for {@link EditProfile}\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=1CWGP8Gbqny20kHi_eQsAz77nok35_hZD\" alt=\"ArtworkPage\" height=\"500\">\n * @constructor\n * @return HeaderEditProfileComponent\n */\nexport default function HeaderEditProfileComponent(props: HeaderEditProfileComponentProps) {\n\n    const auth = useAuth()\n\n    const [result, setResult] = useState({cancelled: false, height: 0, type: \"image\", uri: \"\", width: 0})\n\n    const [isImagePickerVisible, setIsImagePickerVisible] = useState(false)\n\n    // const editBackGroundImage = () => {\n    //     setIsImagePickerVisible(true)\n    //     const xhr = new XMLHttpRequest();\n    //\n    //     xhr.open('POST', URL + `images/uploadUserBackgroundIcon?userId=112`);\n    //\n    //\n    //\n    //\n    //     const formData = new FormData();\n    //\n    //     formData.append('image', {\n    //         // @ts-ignore\n    //         uri: image.uri,\n    //         type: 'image' + \"/\" + image.uri.split(\"/\")[11],\n    //         name: image.uri.split(\"/\")[11]\n    //     });\n    //\n    //     xhr.send(formData);\n    //\n    //     xhr.onreadystatechange = function () {\n    //         if (xhr.status === 200)\n    //         {\n    //             Toast.show({\n    //                 type: \"dayl\",\n    //                 props: {\n    //                     title: \"Success\",\n    //                     text: \"Changed banner\",\n    //                 }\n    //             })\n    //         }\n    //         else\n    //         {\n    //             Toast.show({\n    //                 type: \"dayl\",\n    //                 props: {\n    //                     title: \"Error\",\n    //                     text: \"Could not change banner\",\n    //                 }\n    //             })\n    //         }\n    //     }\n    //\n    // }\n    //\n    // const editProfileImage = () => {\n    //     setIsImagePickerVisible(true)\n    //     const xhr = new XMLHttpRequest();\n    //\n    //     xhr.open('POST', URL + `images/uploadUserIcon?userId=112`);\n    //\n    //\n    //\n    //\n    //     const formData = new FormData();\n    //\n    //     formData.append('image', {\n    //         // @ts-ignore\n    //         uri: image.uri,\n    //         type: 'image' + \"/\" + image.uri.split(\"/\")[11],\n    //         name: image.uri.split(\"/\")[11]\n    //     });\n    //\n    //     xhr.send(formData);\n    //\n    //     xhr.onreadystatechange = function () {\n    //         if (xhr.status === 200)\n    //         {\n    //             Toast.show({\n    //                 type: \"dayl\",\n    //                 props: {\n    //                     title: \"Success\",\n    //                     text: \"Changed icon\",\n    //                 }\n    //             })\n    //         }\n    //         else\n    //         {\n    //             Toast.show({\n    //                 type: \"dayl\",\n    //                 props: {\n    //                     title: \"Error\",\n    //                     text: \"Could not change icon\",\n    //                 }\n    //             })\n    //         }\n    //     }\n    //\n    // }\n\n    // API CALL TO POST NEW BANNER IMAGE\n    const sendDataBackground = (result: any) => {\n\n        const xhr = new XMLHttpRequest();\n\n        xhr.open('POST', URL + `images/uploadUserBackgroundIcon?userId=${auth.authData.id}`);\n\n        const formData = new FormData();\n\n        formData.append('image', {\n            // @ts-ignore\n            uri: result.uri,\n            type: result.type + \"/\" + result.uri.split(\"/\")[11],\n            name: result.uri.split(\"/\")[11]\n        });\n\n        xhr.send(formData);\n\n        xhr.onreadystatechange = function () {\n            if (xhr.status === 200) {\n                Toast.show({\n                    type: \"dayl\",\n                    props: {\n                        title: \"Success\",\n                        text: \"Changed banner\",\n                    }\n                })\n                xhr.abort()\n                return\n            } else {\n                Toast.show({\n                    type: \"dayl\",\n                    props: {\n                        title: \"Error\",\n                        text: \"Could not change banner\",\n                    }\n                })\n                xhr.abort()\n                return\n            }\n        }\n    }\n\n    // API CALL TO POST NEW ICON IMAGE\n    const sendDataProfile = (result: any) => {\n\n        const xhr = new XMLHttpRequest();\n\n        xhr.open('POST', URL + `images/uploadUserIcon?userId=${auth.authData.id}`);\n\n        const formData = new FormData();\n\n        formData.append('image', {\n            // @ts-ignore\n            uri: result.uri,\n            type: result.type + \"/\" + result.uri.split(\"/\")[11],\n            name: result.uri.split(\"/\")[11]\n        });\n\n        xhr.send(formData);\n\n        xhr.onreadystatechange = function () {\n            if (xhr.status === 200) {\n                Toast.show({\n                    type: \"dayl\",\n                    props: {\n                        title: \"Success\",\n                        text: \"Changed banner\",\n                    }\n                })\n                xhr.abort()\n                return\n            } else {\n                Toast.show({\n                    type: \"dayl\",\n                    props: {\n                        title: \"Error\",\n                        text: \"Could not change banner\",\n                    }\n                })\n                xhr.abort()\n                return\n            }\n        }\n    }\n\n    // LAUNCH FILE MANAGER\n    const pickImageBackground = async () => {\n        // CHOOSE PICTURE\n        const result = await ImagePicker.launchImageLibraryAsync({\n            mediaTypes: ImagePicker.MediaTypeOptions.Images,\n            allowsEditing: true,\n            quality: 0,\n        });\n\n        // CASE NO PICTURE WERE CHOSEN\n        if (result.cancelled) {\n            return\n        }\n\n        // CASE PICTURE IS VALID => SEND DATA TO API\n        if (result) {\n            sendDataBackground(result)\n        }\n    }\n\n    const pickImageProfile = async () => {\n        // CHOOSE PICTURE\n        const result = await ImagePicker.launchImageLibraryAsync({\n            mediaTypes: ImagePicker.MediaTypeOptions.Images,\n            allowsEditing: true,\n            quality: 0,\n        });\n\n        // CASE NO PICTURE WERE CHOSEN\n        if (result.cancelled) {\n            return\n        }\n\n        // CASE PICTURE IS VALID => SEND DATA TO API\n        if (result) {\n            sendDataProfile(result)\n        }\n    }\n\n    // /* const pickImageIcon = async () => {\n    //      // CHECK PERMISSIONS\n    //\n    //      // CHOOSE PICTURE\n    //      const result = await ImagePicker.launchImageLibraryAsync({\n    //          mediaTypes: ImagePicker.MediaTypeOptions.Images,\n    //          allowsEditing: true,\n    //          quality: 0,\n    //      });\n    //\n    //      // CASE NO PICTURE WERE CHOSEN\n    //      if (result.cancelled) {\n    //          return\n    //      }\n    //\n    //      // CASE PICTURE IS VALID => SEND DATA TO API\n    //      if (result) {\n    //          sendDataProfile()\n    //      }\n    //  }*/\n\n    return (\n\n        <Animated.View style={[styles.container]}>\n            {/*<ImagePickerComponent isImagePickerVisible={isImagePickerVisible} setImagePickerVisible={setIsImagePickerVisible} image={image} setImage={setImage}/>*/}\n            {/*IMAGE CONTAINER*/}\n            <Animated.View\n                style={styles.imageContainer}>\n                {/*LIST AND AT LEAST FOUR IMAGES */}\n                <TouchableOpacity onPress={() => {\n                    pickImageBackground();\n                    auth.setRefreshKey(auth.refreshKey + 1)\n                }}>\n                    <Animated.Image style={styles.coverImage}\n                                    source={{uri: URL + `images/contentUser/${auth.authData.id}/${auth.authData.backgroundImage}`}}\n                                    resizeMode={'cover'}/>\n                </TouchableOpacity>\n            </Animated.View>\n\n            {/*IMAGE PICKER FOR ICON IMAGE*/}\n            <ImagePickerComponent isImagePickerVisible={isImagePickerVisible}\n                                  setImagePickerVisible={setIsImagePickerVisible} result={result} setResult={setResult}\n                                  callback={() => sendDataProfile()}/>\n\n            <View style={styles.avatarContainer}>\n\n                {/*AVATAR ICON*/}\n                <TouchableOpacity onPress={() => {\n                    pickImageProfile()\n                    auth.setRefreshKey(auth.refreshKey + 1)\n                }}>\n                    <Image style={styles.avatarImage}\n                           source={{uri: URL + `images/contentUser/${auth.authData.id}/${auth.authData.iconImage}`}}\n                           resizeMode={\"cover\"}/>\n                </TouchableOpacity>\n\n                {/*EDIT ICON*/}\n                <View style={styles.editIconContainer}>\n                    <Feather name={\"edit-2\"} size={20} color={\"white\"}\n                             style={{justifyContent: \"center\", alignItems: \"center\", alignSelf: \"center\", zIndex: 21}}/>\n                </View>\n            </View>\n\n        </Animated.View>\n    )\n}",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/HeaderComponent/HeaderEditProfileComponent/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 41,
    "kind": "variable",
    "name": "HEADER_MAX_HEIGHT",
    "memberof": "src/components/HeaderComponent/HeaderEditProfileComponent/index.tsx",
    "static": true,
    "longname": "src/components/HeaderComponent/HeaderEditProfileComponent/index.tsx~HEADER_MAX_HEIGHT",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/HeaderComponent/HeaderEditProfileComponent/index.tsx",
    "importStyle": "{HEADER_MAX_HEIGHT}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 42,
    "kind": "variable",
    "name": "HEADER_MIN_HEIGHT",
    "memberof": "src/components/HeaderComponent/HeaderEditProfileComponent/index.tsx",
    "static": true,
    "longname": "src/components/HeaderComponent/HeaderEditProfileComponent/index.tsx~HEADER_MIN_HEIGHT",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/HeaderComponent/HeaderEditProfileComponent/index.tsx",
    "importStyle": "{HEADER_MIN_HEIGHT}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 43,
    "kind": "variable",
    "name": "HEADER_SCROLL_DISTANCE",
    "memberof": "src/components/HeaderComponent/HeaderEditProfileComponent/index.tsx",
    "static": true,
    "longname": "src/components/HeaderComponent/HeaderEditProfileComponent/index.tsx~HEADER_SCROLL_DISTANCE",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/HeaderComponent/HeaderEditProfileComponent/index.tsx",
    "importStyle": "{HEADER_SCROLL_DISTANCE}",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 44,
    "kind": "variable",
    "name": "SUBSTRACT_START_TRANSITION",
    "memberof": "src/components/HeaderComponent/HeaderEditProfileComponent/index.tsx",
    "static": true,
    "longname": "src/components/HeaderComponent/HeaderEditProfileComponent/index.tsx~SUBSTRACT_START_TRANSITION",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/HeaderComponent/HeaderEditProfileComponent/index.tsx",
    "importStyle": "{SUBSTRACT_START_TRANSITION}",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 45,
    "kind": "variable",
    "name": "ICON_TRANSITION",
    "memberof": "src/components/HeaderComponent/HeaderEditProfileComponent/index.tsx",
    "static": true,
    "longname": "src/components/HeaderComponent/HeaderEditProfileComponent/index.tsx~ICON_TRANSITION",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/HeaderComponent/HeaderEditProfileComponent/index.tsx",
    "importStyle": "{ICON_TRANSITION}",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    }
  },
  {
    "__docId__": 46,
    "kind": "function",
    "name": "HeaderEditProfileComponent",
    "memberof": "src/components/HeaderComponent/HeaderEditProfileComponent/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/HeaderComponent/HeaderEditProfileComponent/index.tsx~HeaderEditProfileComponent",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/HeaderComponent/HeaderEditProfileComponent/index.tsx",
    "importStyle": "HeaderEditProfileComponent",
    "description": "Component displaying a header for {@link EditProfile}\n\n<img src=\"https://drive.google.com/uc?export=view&id=1CWGP8Gbqny20kHi_eQsAz77nok35_hZD\" alt=\"ArtworkPage\" height=\"500\">",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "HeaderEditProfileComponent"
    },
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ]
  },
  {
    "__docId__": 47,
    "kind": "file",
    "name": "src/components/HeaderComponent/HeaderUserComponent/index.tsx",
    "content": "import React, {useEffect} from 'react';\nimport {Animated} from 'react-native';\nimport {URL} from \"../../../services/constantes\"\nimport {HeaderType} from \"../../../../types\";\nimport {useAuth} from \"../../../contexts/Auth\";\nimport {HeaderComponent} from \"../index\";\n\n// PROPS\n\n/**\n * Component displaying a header for {@link MyProfile}\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=1pJfX0qTnlTGwbiHLdjJDZdHpbHvsP8XS\" alt=\"ArtworkPage\" height=\"500\">\n\n * @return HeaderComponent\n */\nexport default function HeaderUserComponent() {\n\n    const auth = useAuth()\n\n    return (\n        <HeaderComponent\n            // IF NO BACKGROUND IMAGE OR AVATAR ICON SET DEFAULT IMAGE\n            imageUri={auth.authData.backgroundImage === \"\" ? \"https://upload.wikimedia.org/wikipedia/commons/thumb/4/49/A_black_image.jpg/640px-A_black_image.jpg\" : URL + `images/contentUser/${auth.authData.id}/${auth.authData.backgroundImage}`}\n            title={auth.authData.firstName + \" \" + auth.authData.lastName} type={HeaderType.User}\n\n            avatarIconUri={auth.authData.iconImage === \"\" ? \"https://vetref.fr/wp-content/uploads/2021/02/blank-profile-picture-973460_640.png\" : URL + `images/contentUser/${auth.authData.id}/${auth.authData.iconImage}`}/>\n    )\n}\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/HeaderComponent/HeaderUserComponent/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 48,
    "kind": "function",
    "name": "HeaderUserComponent",
    "memberof": "src/components/HeaderComponent/HeaderUserComponent/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/HeaderComponent/HeaderUserComponent/index.tsx~HeaderUserComponent",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/HeaderComponent/HeaderUserComponent/index.tsx",
    "importStyle": "HeaderUserComponent",
    "description": "Component displaying a header for {@link MyProfile}\n\n<img src=\"https://drive.google.com/uc?export=view&id=1pJfX0qTnlTGwbiHLdjJDZdHpbHvsP8XS\" alt=\"ArtworkPage\" height=\"500\">",
    "lineNumber": 17,
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "HeaderComponent"
    },
    "params": []
  },
  {
    "__docId__": 49,
    "kind": "file",
    "name": "src/components/ImagePickerComponent/index.tsx",
    "content": "import {Dimensions, StyleSheet, Text, TouchableOpacity, View} from 'react-native';\nimport * as ImagePicker from 'expo-image-picker';\nimport React from \"react\";\nimport Modal from \"react-native-modal\";\n\n// PROPS\nexport type ImagePickerProps = {\n    isImagePickerVisible: boolean,\n    setImagePickerVisible(isImagePickerVisible: boolean): void,\n    result: any,\n    setResult(result: any): void,\n    callback(): void,\n}\n\n/**\n * Component used to upload a picture of the user (from his files or his camera)\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=13AMfMb0I_wcBY2S0SN77OTnvsTkzsphu\" alt=\"ArtworkPage\" height=\"500\">\n * @param {ImagePickerProps} props\n * @param {boolean} props.isImagePickerVisible - Visibility of ImagePickerModal\n * @param {void} props.setImagePickerVisible - Toggles visibility of ImagePickerModal\n * @param {any} props.result - Parsed object corresponding to the image picked\n * @param {void} props.setResult - Function setting the result\n * @param {void} props.callback - Function called when the upload is over\n * @constructor\n * @return Modal\n */\nexport default function ImagePickerComponent(props: ImagePickerProps) {\n\n    // TOGGLE MODAL\n    const toggleModal = () => {\n        props.setImagePickerVisible(!props.isImagePickerVisible)\n    }\n\n    // LAUNCH CAMERA OR FILE MANAGER\n    const pickImage = async (type: string) => {\n        // CHECK PERMISSIONS\n        const permissionResult = type == \"camera\" ? await ImagePicker.requestCameraPermissionsAsync() : await ImagePicker.requestMediaLibraryPermissionsAsync();\n        if (!permissionResult.granted) {\n            // @ts-ignore\n            alert(\"You've refused to allow this app to access your photos!\");\n            return;\n        }\n\n        // CHOOSE PICTURE\n        let result = type == \"camera\" ? await ImagePicker.launchCameraAsync({\n            mediaTypes: ImagePicker.MediaTypeOptions.Images,\n            allowsEditing: true,\n            quality: 0,\n\n        }) : await ImagePicker.launchImageLibraryAsync({\n            mediaTypes: ImagePicker.MediaTypeOptions.Images,\n            allowsEditing: true,\n            quality: 0,\n        });\n\n        // CASE NO PICTURE WERE CHOSEN\n        if (result.cancelled) {\n            return\n        }\n\n        // CASE PICTURE IS VALID => SEND DATA TO API\n        if (result) {\n            console.log(result)\n            props.setResult(result)\n            props.setImagePickerVisible(false)\n            props.callback()\n        }\n    }\n\n    return (\n        <Modal animationIn={\"slideInUp\"}\n               deviceHeight={Dimensions.get(\"window\").height + 100}\n               deviceWidth={Dimensions.get(\"window\").width}\n               isVisible={props.isImagePickerVisible}\n               backdropTransitionOutTiming={0}\n               statusBarTranslucent={true}>\n            <View style={styles.container}>\n                {/*TITLE*/}\n                <Text style={styles.title}>Choose an image</Text>\n\n                {/*UPLOAD FROM CAMERA*/}\n                <TouchableOpacity\n                    onPress={() => pickImage(\"camera\")} style={styles.button}>\n                    <Text style={styles.buttonText}>Use Camera</Text>\n                </TouchableOpacity>\n\n                {/*UPLOAD FROM FILES*/}\n                <TouchableOpacity onPress={() => pickImage(\"file\")} style={styles.button}>\n                    <Text style={styles.buttonText}>Select from files</Text>\n                </TouchableOpacity>\n\n                {/*CANCEL*/}\n                <TouchableOpacity onPress={() => toggleModal()} style={styles.button}>\n                    <Text style={styles.buttonText}>Cancel</Text>\n                </TouchableOpacity>\n            </View>\n        </Modal>\n    );\n}\n\nconst screenWidth = Dimensions.get('screen').width\nconst screenHeight = Dimensions.get('screen').height\n\nconst styles = StyleSheet.create({\n    container: {\n        marginTop: screenHeight/40,\n        borderRadius: 20,\n        height: 300,\n        width: screenWidth-screenWidth/11,\n        alignSelf: \"center\",\n        alignItems: \"center\",\n        marginBottom: screenHeight/45,\n        paddingBottom: 15,\n        paddingTop: 15,\n        flexDirection: \"column\",\n        justifyContent: \"space-between\"\n    },\n    title: {\n        color: 'white',\n        fontSize: 20,\n        fontWeight: \"bold\",\n        marginBottom: 20\n    },\n    button: {\n        alignItems: \"center\",\n        alignSelf: \"center\",\n        width: \"70%\",\n        padding: 15,\n        marginBottom: 10,\n        borderRadius: 10,\n        borderWidth: 2,\n        borderColor: \"white\"\n    },\n    buttonText: {\n        textAlign: \"center\",\n        color: 'white',\n        fontSize: 17,\n        fontWeight: \"bold\"\n    },\n    image: {\n        width: '100%',\n        height: 300,\n        borderRadius: 10,\n    },\n})",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/ImagePickerComponent/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 50,
    "kind": "function",
    "name": "ImagePickerComponent",
    "memberof": "src/components/ImagePickerComponent/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/ImagePickerComponent/index.tsx~ImagePickerComponent",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/ImagePickerComponent/index.tsx",
    "importStyle": "ImagePickerComponent",
    "description": "Component used to upload a picture of the user (from his files or his camera)\n\n<img src=\"https://drive.google.com/uc?export=view&id=13AMfMb0I_wcBY2S0SN77OTnvsTkzsphu\" alt=\"ArtworkPage\" height=\"500\">",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ImagePickerProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "props.isImagePickerVisible",
        "description": "Visibility of ImagePickerModal"
      },
      {
        "nullable": null,
        "types": [
          "void"
        ],
        "spread": false,
        "optional": false,
        "name": "props.setImagePickerVisible",
        "description": "Toggles visibility of ImagePickerModal"
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "props.result",
        "description": "Parsed object corresponding to the image picked"
      },
      {
        "nullable": null,
        "types": [
          "void"
        ],
        "spread": false,
        "optional": false,
        "name": "props.setResult",
        "description": "Function setting the result"
      },
      {
        "nullable": null,
        "types": [
          "void"
        ],
        "spread": false,
        "optional": false,
        "name": "props.callback",
        "description": "Function called when the upload is over"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Modal"
    }
  },
  {
    "__docId__": 51,
    "kind": "variable",
    "name": "screenWidth",
    "memberof": "src/components/ImagePickerComponent/index.tsx",
    "static": true,
    "longname": "src/components/ImagePickerComponent/index.tsx~screenWidth",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/components/ImagePickerComponent/index.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 102,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 52,
    "kind": "variable",
    "name": "screenHeight",
    "memberof": "src/components/ImagePickerComponent/index.tsx",
    "static": true,
    "longname": "src/components/ImagePickerComponent/index.tsx~screenHeight",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/components/ImagePickerComponent/index.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 103,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 53,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/components/ImagePickerComponent/index.tsx",
    "static": true,
    "longname": "src/components/ImagePickerComponent/index.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/components/ImagePickerComponent/index.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 105,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 54,
    "kind": "file",
    "name": "src/components/Informations/index.tsx",
    "content": "import React from 'react';\nimport {Text, View} from 'react-native';\nimport styles from \"./styles\";\nimport ArtworkMoreInfo from \"../MoreInformation/ArtworkMoreInfo\";\n\n// PROPS\nexport type InformationProps = {\n    title: string,\n    text: string,\n    artworkId?: string\n}\n\n/**\n * Component displaying information for an {@link ArtistPage} (bio) or an {@link ArtworkPage} (summary)\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=1XvgPAkaGCqyw1HeGlrxqne2KEsim78dr\" alt=\"ArtworkPage\" height=\"500\">\n * @param {InformationProps} props\n * @param {string} props.title - Title of the section\n * @param {string} props.text - Text\n * @param {string} [props.artworkId] - If used in artworkPage, displays the {@link ArtworkMoreInfo} modal\n * @constructor\n * @return Information\n */\nexport default function Information(props: InformationProps) {\n    return (\n        <View style={styles.container}>\n            <Text style={styles.title}>{props.title}</Text>\n            <Text style={styles.text}>{props.text === \"\" ? \"No information to display\" : props.text}</Text>\n            <View style={{height: 15}}></View>\n            {props.artworkId && <ArtworkMoreInfo artworkId={props.artworkId}/>}\n        </View>\n    )\n}",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/Informations/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 55,
    "kind": "function",
    "name": "Information",
    "memberof": "src/components/Informations/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Informations/index.tsx~Information",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/Informations/index.tsx",
    "importStyle": "Information",
    "description": "Component displaying information for an {@link ArtistPage} (bio) or an {@link ArtworkPage} (summary)\n\n<img src=\"https://drive.google.com/uc?export=view&id=1XvgPAkaGCqyw1HeGlrxqne2KEsim78dr\" alt=\"ArtworkPage\" height=\"500\">",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "InformationProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.title",
        "description": "Title of the section"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.text",
        "description": "Text"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "props.artworkId",
        "description": "If used in artworkPage, displays the {@link ArtworkMoreInfo} modal"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Information"
    }
  },
  {
    "__docId__": 56,
    "kind": "file",
    "name": "src/components/LocationPickerComponent/index.tsx",
    "content": "import {Dimensions, StyleSheet, Text, TouchableOpacity} from 'react-native';\nimport React from \"react\";\nimport Modal from \"react-native-modal\";\nimport * as Location from 'expo-location';\nimport colors from \"../../../constants/Colors\";\n\n// COMPONENT FOR SEARCHING MATCHING PAINTINGS WITH AN UPLOADED PICTURE OF tHE USER (FROM FILES OR CAMERA)\n\nexport type locationPickerProps = {\n    isLocationPickerVisible: boolean,\n    setLocationPickerVisible(isLocationPickerVisible: boolean): void,\n    location: {},\n    setLocation(location: {}) : void,\n}\n\n/**\n * @ignore\n * @param props\n * @constructor\n */\nconst LocationPickerComponent = (props: locationPickerProps) => {\n\n\n    // LAUNCH CAMERA OR FILE MANAGER\n    const toggleLocation = async () => {\n        await Location.requestForegroundPermissionsAsync();\n        let location = await Location.getCurrentPositionAsync({});\n        // @ts-ignore\n        props.setLocation(location)\n        console.log(location)\n    }\n\n    return (\n        <Modal animationIn={\"slideInUp\"}\n               deviceHeight={Dimensions.get(\"window\").height + 100}\n               deviceWidth={Dimensions.get(\"window\").width}\n               isVisible={props.isLocationPickerVisible}\n               backdropTransitionOutTiming={0}\n               statusBarTranslucent={true}>\n            <TouchableOpacity style={styles.button} onPress={() => {\n                toggleLocation();\n                props.setLocationPickerVisible(!props.isLocationPickerVisible)\n            }}>\n                <Text style={styles.buttonText}>Use Current Location</Text>\n            </TouchableOpacity>\n        </Modal>\n    );\n}\n\nconst styles = StyleSheet.create({\n    button: {\n        width: \"70%\",\n        height: \"10%\",\n        backgroundColor: colors.daylRed.text,\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        alignSelf: \"center\",\n        borderRadius: 20\n    },\n    buttonText: {\n        color: \"white\",\n        fontSize: 20\n    }\n})\n\nexport default LocationPickerComponent;",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/LocationPickerComponent/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 57,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/components/LocationPickerComponent/index.tsx",
    "static": true,
    "longname": "src/components/LocationPickerComponent/index.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/components/LocationPickerComponent/index.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 58,
    "kind": "function",
    "name": "LocationPickerComponent",
    "memberof": "src/components/LocationPickerComponent/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/LocationPickerComponent/index.tsx~LocationPickerComponent",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/LocationPickerComponent/index.tsx",
    "importStyle": "LocationPickerComponent",
    "description": "",
    "lineNumber": 21,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "file",
    "name": "src/components/Modals/AddToListModal/index.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport {Modal, SafeAreaView, ScrollView, Text, TouchableOpacity, View} from 'react-native';\nimport {useAuth} from \"../../../contexts/Auth\";\nimport NewListModal from \"../NewListModal\";\nimport SmallerSearchBar from \"../../Utilities/SearchBar/SmallerSearchBar\";\nimport SquareComponentGrid from \"../../SquareComponentGrid\";\nimport {ListActions, SquareComponentType} from \"../../../../types\";\nimport axios from \"axios\";\nimport {URL} from \"../../../services/constantes\"\nimport {styles} from \"./styles\";\nimport {AntDesign, Entypo} from \"@expo/vector-icons\";\n\n// PROPS\nexport type AddToListModalProps = {\n    modalVisible: boolean,\n    setModalVisible(modalVisible: boolean): void,\n}\n\n/**\n * Component displaying a modal for the user to add an {@link Artwork} to a list\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=16poHiJGmBRyJ0TvVtaA-fpn8OUm-dEP8\" alt=\"ArtworkPage\" height=\"500\">\n * @param {AddToListModal} props\n * @param {boolean} props.modalVisible - Visibility of the modal\n * @param {void} props.setModalVisible - Toggles the visibility of the modal\n * @constructor\n * @return Modal\n */\nexport default function AddToListModal(props: AddToListModalProps) {\n\n    const [myLists, setMyLists] = useState<any>([])\n    const [clicked, setClicked] = useState(false)\n    const [searchPhrase, setSearchPhrase] = useState(\"\")\n    const [newData, setNewData] = useState(myLists)\n    const [newListModal, setNewListModal] = useState(false)\n    const auth = useAuth()\n\n    useEffect(() => {\n        props.setModalVisible(false)\n    }, [auth.refreshKey])\n\n    useEffect(() => {\n        setNewData(myLists)\n    }, [myLists])\n\n    useEffect(() => {\n        const temp = myLists.filter((item: { title: string | string[]; }) => item.title.includes(searchPhrase))\n        setNewData(temp)\n    }, [searchPhrase])\n\n    //API CALL TO GET MY LISTS\n    useEffect(() => {\n        axios.get(URL + `userLists/byUserId`, {params: {userId: auth.authData.id}}).then((response1) => {\n\n            // PARSING THE DATA\n            const parsedData = response1.data.map((el: any) => {\n                return {\n                    id: el.id,\n                    fourImages: el.imageUrl === \"\" ? \"\" : [URL + `images/content/mini/${el.imageUrl}`],\n                    title: el.listName,\n                    action: ListActions.detailed,\n                }\n            })\n\n            setMyLists(parsedData)\n        });\n    }, [auth.authData.listIds, auth.refreshKey]);\n\n    return (\n        <Modal animationType={\"fade\"} transparent={false} visible={props.modalVisible}\n               onRequestClose={() => {\n                   props.setModalVisible(false)\n               }} statusBarTranslucent={true}>\n\n            <SafeAreaView style={{backgroundColor: \"black\", height: '100%',}}>\n                <ScrollView>\n                    {/*HEADER WITH BACK BUTTON + TITLE + PLUS BUTTON*/}\n                    <View style={styles.headerContainer}>\n\n                        <View style={styles.leftContainer}>\n                            {/*BACK BUTTON*/}\n                            <TouchableOpacity style={styles.backButtonContainer} onPress={() => {\n                                props.setModalVisible(false)\n                            }}>\n                                <Entypo name={\"chevron-left\"} color=\"white\" size={40}/>\n                            </TouchableOpacity>\n\n                            {/*MY LISTS TITLE*/}\n                            <Text style={styles.title}>Add to list</Text>\n                        </View>\n\n                        {(<TouchableOpacity style={styles.plusButtonContainer} onPress={() => {\n                            setNewListModal(true)\n                        }}>\n                            <AntDesign name={\"plus\"} size={35} color={\"white\"}/>\n                        </TouchableOpacity>)}\n                    </View>\n\n                    {/*MODAL FOR NEW LIST*/}\n                    <NewListModal modalNewList={newListModal} setModalNewList={setNewListModal}/>\n\n                    {/*SEARCH BAR*/}\n                    <SmallerSearchBar clicked={clicked} searchPhrase={searchPhrase} setSearchPhrase={setSearchPhrase}\n                                      setClicked={setClicked}/>\n\n                    {/*GRID COMPONENT*/}\n                    <SquareComponentGrid title={\"\"} data={newData} type={SquareComponentType.list}\n                                         action={ListActions.add}/>\n                </ScrollView>\n            </SafeAreaView>\n        </Modal>\n    )\n}",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/Modals/AddToListModal/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 60,
    "kind": "function",
    "name": "AddToListModal",
    "memberof": "src/components/Modals/AddToListModal/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Modals/AddToListModal/index.tsx~AddToListModal",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/Modals/AddToListModal/index.tsx",
    "importStyle": "AddToListModal",
    "description": "Component displaying a modal for the user to add an {@link Artwork} to a list\n\n<img src=\"https://drive.google.com/uc?export=view&id=16poHiJGmBRyJ0TvVtaA-fpn8OUm-dEP8\" alt=\"ArtworkPage\" height=\"500\">",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "AddToListModal"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "props.modalVisible",
        "description": "Visibility of the modal"
      },
      {
        "nullable": null,
        "types": [
          "void"
        ],
        "spread": false,
        "optional": false,
        "name": "props.setModalVisible",
        "description": "Toggles the visibility of the modal"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Modal"
    }
  },
  {
    "__docId__": 61,
    "kind": "file",
    "name": "src/components/Modals/ColorPickerModal/index.tsx",
    "content": "import React from 'react';\nimport {Dimensions, Text, TouchableOpacity, View} from 'react-native';\nimport styles from \"./styles\"\nimport ColorPicker from 'react-native-wheel-color-picker'\nimport Modal from \"react-native-modal\";\nimport {useNavigation} from \"@react-navigation/native\";\nimport {Entypo} from \"@expo/vector-icons\";\n\n// PROPS\nexport type ColorPickerModalProps = {\n    isModalVisible: boolean,\n    setModalVisible(isModalVisible: boolean): void,\n    color: string,\n    setColor(color: string): void\n}\n\n/**\n * Component displaying a color picking wheel and returning the hex code of the color chosen\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=1r0yVFnKJgkRHv2UFwZ9q-lbpDYpojqDt\" alt=\"ArtworkPage\" height=\"500\">\n * @param {ColorPickerModalProps} props\n * @param {boolean} props.isModalVisible - Visibility of the modal\n * @param {void} props.setModalVisible - Toggles visibility of the modal\n * @param {string} props.color - Color picked by the user\n * @param {void} props.setColor - Function setting the color\n * @constructor\n * @return Modal\n */\nexport default function ColorPickerModal(props: ColorPickerModalProps) {\n\n    const navigation = useNavigation()\n\n    // WHEN COLOR IS PICKED\n    const chooseColor = (c: string) => {\n        navigation.navigate('MatchingByColorPage', {color: c.slice(1)})\n    }\n\n    const toggleModal = () => {\n        props.setModalVisible(!props.isModalVisible);\n    };\n\n    const deviceWidth = Dimensions.get(\"window\").width;\n    const deviceHeight = Dimensions.get(\"window\").height\n\n    return (\n        <Modal isVisible={props.isModalVisible}\n               deviceHeight={deviceHeight + 100}\n               deviceWidth={deviceWidth}\n               onModalHide={() => {\n                   props.setColor(props.color)\n               }}\n               onBackButtonPress={() => {\n                   props.setModalVisible(!props.isModalVisible)\n               }}\n               backdropTransitionOutTiming={0}\n               statusBarTranslucent={true}\n               style={styles.containerModal}\n        >\n            <View style={styles.container}>\n                <View style={styles.header}>\n                    {/*BACK BUTTON*/}\n                    <TouchableOpacity style={styles.backButton} onPress={() => toggleModal()}>\n                        <Entypo name={\"chevron-left\"} size={30} color={\"white\"}/>\n                    </TouchableOpacity>\n\n                    {/*CHOOSE COLOR BUTTON*/}\n                    <TouchableOpacity style={[styles.button, {backgroundColor: props.color}]} onPress={() => {\n                        toggleModal();\n                        chooseColor(props.color)\n                    }}>\n                        <Text style={styles.buttonText}>Choose colour</Text>\n                    </TouchableOpacity>\n                </View>\n\n                {/*COLOR PICKER WHEEL*/}\n                <ColorPicker\n                    color={props.color}\n                    sliderSize={40}\n                    autoResetSlider={true}\n                    onColorChangeComplete={(c) => {\n                        props.setColor(c)\n                    }}/>\n            </View>\n        </Modal>\n    )\n}",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/Modals/ColorPickerModal/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 62,
    "kind": "function",
    "name": "ColorPickerModal",
    "memberof": "src/components/Modals/ColorPickerModal/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Modals/ColorPickerModal/index.tsx~ColorPickerModal",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/Modals/ColorPickerModal/index.tsx",
    "importStyle": "ColorPickerModal",
    "description": "Component displaying a color picking wheel and returning the hex code of the color chosen\n\n<img src=\"https://drive.google.com/uc?export=view&id=1r0yVFnKJgkRHv2UFwZ9q-lbpDYpojqDt\" alt=\"ArtworkPage\" height=\"500\">",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ColorPickerModalProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "props.isModalVisible",
        "description": "Visibility of the modal"
      },
      {
        "nullable": null,
        "types": [
          "void"
        ],
        "spread": false,
        "optional": false,
        "name": "props.setModalVisible",
        "description": "Toggles visibility of the modal"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.color",
        "description": "Color picked by the user"
      },
      {
        "nullable": null,
        "types": [
          "void"
        ],
        "spread": false,
        "optional": false,
        "name": "props.setColor",
        "description": "Function setting the color"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Modal"
    }
  },
  {
    "__docId__": 63,
    "kind": "file",
    "name": "src/components/Modals/EditListModal/index.tsx",
    "content": "import React, {useState} from 'react';\nimport {Alert, Modal, Text, TextInput, TouchableOpacity, View} from 'react-native';\nimport {Entypo, Octicons} from \"@expo/vector-icons\";\nimport {useAuth} from \"../../../contexts/Auth\";\nimport {styles} from \"./styles\";\nimport GestureRecognizer from 'react-native-swipe-gestures';\nimport {useNavigation} from \"@react-navigation/native\";\nimport {useInteractions} from \"../../../contexts/UserInteractions\";\n\n// PROPS\nexport type EditListModalProps = {\n    listId: string,\n    modalVisible: boolean,\n    setModalVisible(modalVisible: boolean): void,\n}\n\n/**\n * Component displaying a modal letting the user edit a list\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=14SY-HakPSZQbc8D2DOVFbwPzQhrUMZBr\" alt=\"ArtworkPage\" height=\"500\">\n * @param {EditListModalProps} props\n * @param {string} props.listId - ID of the list\n * @param {boolean} props.modalVisible - Visibility of the modal\n * @param {void} props.setModalVisible - Toggles the visibility of the modal\n * @constructor\n * @return Modal\n */\nexport default function EditListModal(props: EditListModalProps) {\n\n    const userInt = useInteractions()\n\n    const navigation = useNavigation()\n    const [newNameList, setNewNameList] = useState(\"\")\n    const [confirmDelete, setConfirmDelete] = useState(false)\n\n    const auth = useAuth()\n\n    const showConfirmDialog = () => {\n        return Alert.alert(\n            \"Are your sure?\",\n            \"Are you sure you want to delete this list?\",\n            [\n                // The \"Yes\" button\n                {\n                    text: \"Yes\",\n                    onPress: () => {\n                        userInt.deleteList(props.listId)\n                        navigation.goBack()\n                        auth.reloadData()\n                        setConfirmDelete(false);\n\n                    },\n                },\n                // The \"No\" button\n                // Does nothing but dismiss the dialog when tapped\n                {\n                    text: \"No\",\n                    onPress: () => {\n                        setConfirmDelete(false)\n                    }\n                },\n            ]\n        );\n    };\n\n    //SWIPE DOWN TO DISMISS MODAL\n    return (\n        <GestureRecognizer onSwipeDown={() => props.setModalVisible(false)}>\n            {/*MODAL */}\n            <Modal animationType={\"slide\"} transparent={true} visible={props.modalVisible} onRequestClose={() => {\n                props.setModalVisible(!props.modalVisible);\n            }}>\n                {/*MODAL VIEW*/}\n                <View style={styles.containerModal}>\n                    {/*CLOSE MODAL*/}\n                    <TouchableOpacity style={styles.cross} onPress={() => props.setModalVisible(false)}>\n                        <Entypo name={\"cross\"} size={25} color={\"white\"}/>\n                    </TouchableOpacity>\n                    {/*DELETE LIST BUTTON*/}\n                    <TouchableOpacity style={styles.deleteList} onPress={() => setConfirmDelete(true)}>\n                        <Octicons name={\"trash\"} size={25} color={\"white\"}/>\n                    </TouchableOpacity>\n                    {/*EDIT TITLE*/}\n                    <Text style={styles.renameText}>Edit</Text>\n                    {/*TEXT INPUT FOR RENAMING LIST*/}\n                    <TextInput style={styles.textInput} placeholder={\"Rename\"} placeholderTextColor={\"white\"}\n                               value={newNameList} onChangeText={setNewNameList}></TextInput>\n                    {/*SUBMIT BUTTON*/}\n                    <TouchableOpacity style={styles.submitButton}\n                                      onPress={() => userInt.updateList(props.listId, newNameList)}>\n                        <Text style={styles.submitText}>SUBMIT</Text>\n                    </TouchableOpacity>\n                    {/*CONFIRM MESSAGE IF DELETE*/}\n                    {confirmDelete && showConfirmDialog()}\n                </View>\n            </Modal>\n        </GestureRecognizer>\n    )\n}",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/Modals/EditListModal/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 64,
    "kind": "function",
    "name": "EditListModal",
    "memberof": "src/components/Modals/EditListModal/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Modals/EditListModal/index.tsx~EditListModal",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/Modals/EditListModal/index.tsx",
    "importStyle": "EditListModal",
    "description": "Component displaying a modal letting the user edit a list\n\n<img src=\"https://drive.google.com/uc?export=view&id=14SY-HakPSZQbc8D2DOVFbwPzQhrUMZBr\" alt=\"ArtworkPage\" height=\"500\">",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "EditListModalProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.listId",
        "description": "ID of the list"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "props.modalVisible",
        "description": "Visibility of the modal"
      },
      {
        "nullable": null,
        "types": [
          "void"
        ],
        "spread": false,
        "optional": false,
        "name": "props.setModalVisible",
        "description": "Toggles the visibility of the modal"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Modal"
    }
  },
  {
    "__docId__": 65,
    "kind": "file",
    "name": "src/components/Modals/MatchingImage/index.tsx",
    "content": "import React, {useState} from 'react';\nimport {useAuth} from \"../../../contexts/Auth\";\nimport {URL} from \"../../../services/constantes\";\nimport Toast from \"react-native-toast-message\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport {HeaderEditProfileComponentProps} from \"../../../../types\";\nimport {Modal} from \"react-native\";\nimport {ModalMatchingImageProps} from \"../../../../types\";\nimport {styles} from \"../../Utilities/NewSearchBar/styles\";\nimport {Entypo} from \"@expo/vector-icons\";\n\n\n/**\n * Component displaying a header for {@link EditProfile}\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=1CWGP8Gbqny20kHi_eQsAz77nok35_hZD\" alt=\"ArtworkPage\" height=\"500\">\n\n * @param props : ModalMatchingImageProps\n */\nexport default function ModalMatchingImage(props: ModalMatchingImageProps) {\n\n    const auth = useAuth()\n\n    const [loading, setLoading] = useState(false)\n\n\n    const data = {itemName: \" \", artistName: \" \"}\n\n    // API CALL TO POST NEW ICON IMAGE\n    const sendDataProfile = (result: any) => {\n\n        const xhr = new XMLHttpRequest();\n\n        xhr.open('POST', URL + `images/submitImageForMatching?fileName=${data.itemName}&artist=${data.artistName}`);\n\n        const formData = new FormData();\n\n        formData.append('image', {\n            // @ts-ignore\n            uri: result.uri,\n            type: result.type + \"/\" + result.uri.split(\"/\")[11],\n            name: result.uri.split(\"/\")[11]\n        });\n\n        xhr.send(formData);\n        console.log(\"STARTED\")\n        xhr.onreadystatechange = function () {\n            if (xhr.status === 200) {\n                Toast.show({\n                    type: \"dayl\",\n                    props: {\n                        title: \"Success\",\n                        text: \"Matching received\",\n                    }\n                })\n                console.log(xhr)\n                xhr.abort()\n                return\n            } else {\n                Toast.show({\n                    type: \"dayl\",\n                    props: {\n                        title: \"Error\",\n                        text: \"Matching not received\",\n                    }\n                })\n                console.log(\"DONE\")\n                console.log(xhr)\n\n                xhr.abort()\n                return\n            }\n        }\n\n    }\n\n\n    const pickImage = async () => {\n        // CHOOSE PICTURE\n        const result = await ImagePicker.launchImageLibraryAsync({\n            mediaTypes: ImagePicker.MediaTypeOptions.Images,\n            allowsEditing: true,\n            quality: 0,\n        });\n\n        // CASE NO PICTURE WERE CHOSEN\n        if (result.cancelled) {\n            return\n        }\n\n        // CASE PICTURE IS VALID => SEND DATA TO API\n        if (result) {\n            sendDataProfile(result)\n        }\n    }\n\n    return (\n\n        <Entypo name={\"camera\"} size={25} style={styles.icon} onPress={() => pickImage()}/>\n\n    )\n}",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/Modals/MatchingImage/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 66,
    "kind": "function",
    "name": "ModalMatchingImage",
    "memberof": "src/components/Modals/MatchingImage/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Modals/MatchingImage/index.tsx~ModalMatchingImage",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/Modals/MatchingImage/index.tsx",
    "importStyle": "ModalMatchingImage",
    "description": "Component displaying a header for {@link EditProfile}\n\n<img src=\"https://drive.google.com/uc?export=view&id=1CWGP8Gbqny20kHi_eQsAz77nok35_hZD\" alt=\"ArtworkPage\" height=\"500\">",
    "lineNumber": 20,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ": ModalMatchingImageProps"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 67,
    "kind": "file",
    "name": "src/components/Modals/NewListModal/index.tsx",
    "content": "import React, {useState} from 'react';\nimport Modal from \"react-native-modal\";\nimport {Text, TextInput, TouchableOpacity, View} from \"react-native\";\nimport {styles} from \"./styles\"\nimport {Entypo} from \"@expo/vector-icons\";\nimport Toast from \"react-native-toast-message\";\nimport {toastConfig} from \"../../Utilities/ToastComponent\";\nimport {useAuth} from \"../../../contexts/Auth\";\nimport {useInteractions} from \"../../../contexts/UserInteractions\";\n\n// PROPS\nexport type NewListModalProps = {\n    modalNewList: boolean,\n    setModalNewList(modalNewList: boolean): void,\n}\n\n/**\n * Component displaying a modal letting the user create a new list\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=1Wfk4UNBoJrPdj5u-Oe32GG-95qi_1wAz\" alt=\"ArtworkPage\" height=\"500\">\n * @param {NewListModalProps} props\n * @param {boolean} props.modalNewList - Visibility of the modal\n * @param {void} props.setModalVisible - Toggles the visibility of the modal\n * @constructor\n * @return Modal\n */\nexport default function NewListModal(props: NewListModalProps) {\n\n    const auth = useAuth()\n\n    const userInt = useInteractions()\n\n    const [listName, setListName] = useState(\"\")\n\n    // WHEN CLICKING ON SUBMIT BUTTON\n    const onPressSubmitNewList = (listName: string) => {\n        if (listName) {\n            userInt.createNewList(listName);\n            props.setModalNewList(false);\n            auth.reloadData()\n\n        } else {\n            Toast.show({\n                    type: \"dayl\",\n                    props: {\n                        title: \"Failed\",\n                        text: \"No name was given to the list !\",\n                    }\n                }\n            )\n        }\n    }\n\n    return (\n        <Modal isVisible={props.modalNewList} backdropOpacity={0.80}\n               onBackdropPress={() => {\n                   props.setModalNewList(!props.modalNewList)\n               }}\n               onModalHide={() => setListName(\"\")}\n               animationIn={\"fadeIn\"}\n               animationOut={\"fadeOut\"}\n               backdropTransitionOutTiming={0} /*fix flickering*/\n               statusBarTranslucent={true}>\n            <View style={styles.modal}>\n\n                {/*HEADER*/}\n                <View style={styles.modalHeader}>\n                    {/*BACK BUTTON*/}\n                    <TouchableOpacity onPress={() => {\n                        props.setModalNewList(false)\n                    }}>\n                        <Entypo name={\"cross\"} size={25} color={\"white\"}/>\n                    </TouchableOpacity>\n\n                    {/*TITLE OF THE MODAL*/}\n                    <Text style={styles.modalTitle}>Add new list</Text>\n                </View>\n\n                {/*INPUT FOR NAME OF THE LIST*/}\n                <TextInput style={styles.input} placeholder=\"New list name\" placeholderTextColor={\"gray\"}\n                           value={listName} onChangeText={setListName}/>\n\n                {/*SUBMIT BUTTON*/}\n                <TouchableOpacity style={styles.submitButton} onPress={() => {\n                    onPressSubmitNewList(listName)\n                }}>\n                    <Text style={styles.submit}>Create</Text>\n                </TouchableOpacity>\n\n            </View>\n\n            {/*TOAST CONFIG*/}\n            <Toast config={toastConfig}/>\n        </Modal>\n    )\n}",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/Modals/NewListModal/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 68,
    "kind": "function",
    "name": "NewListModal",
    "memberof": "src/components/Modals/NewListModal/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Modals/NewListModal/index.tsx~NewListModal",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/Modals/NewListModal/index.tsx",
    "importStyle": "NewListModal",
    "description": "Component displaying a modal letting the user create a new list\n\n<img src=\"https://drive.google.com/uc?export=view&id=1Wfk4UNBoJrPdj5u-Oe32GG-95qi_1wAz\" alt=\"ArtworkPage\" height=\"500\">",
    "lineNumber": 27,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "NewListModalProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "props.modalNewList",
        "description": "Visibility of the modal"
      },
      {
        "nullable": null,
        "types": [
          "void"
        ],
        "spread": false,
        "optional": false,
        "name": "props.setModalVisible",
        "description": "Toggles the visibility of the modal"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Modal"
    }
  },
  {
    "__docId__": 69,
    "kind": "file",
    "name": "src/components/Modals/ThreeDotsProfileModal/index.tsx",
    "content": "import React from 'react';\nimport {styles} from \"./styles\";\nimport {Text, TouchableOpacity, View} from \"react-native\";\nimport {Entypo, Feather, Ionicons} from \"@expo/vector-icons\";\nimport {useNavigation} from \"@react-navigation/native\";\nimport {useAuth} from \"../../../contexts/Auth\";\nimport Modal from \"react-native-modal\";\n\n// PROPS\nexport type ThreeDotsProfileModalProps = {\n    modalVisible: boolean,\n    setModalVisible(modalVisible: boolean): void\n}\n\n/**\n * Component displaying a modal for the three dots button on the {@link MyProfile} page\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=1IQROT4EQsALaqbd6h3fz75G52H6f16cb\" alt=\"ArtworkPage\" height=\"500\">\n * @param {ThreeDotsProfileModalProps} props\n * @param {boolean} props.modalVisible - Visibility of the modal\n * @param {void} props.setModalVisible - Toggles the visibility of the modal\n * @constructor\n * @return Modal\n */\nexport default function ThreeDotsProfileModal(props: ThreeDotsProfileModalProps) {\n\n    const navigation = useNavigation()\n\n    const auth = useAuth()\n\n    //SWIPE DOWN TO DISMISS MODAL\n    return (\n        <Modal animationIn={\"slideInUp\"} backdropOpacity={0} swipeDirection={\"down\"}\n               onSwipeComplete={() => props.setModalVisible(!props.modalVisible)} isVisible={props.modalVisible}\n               onBackButtonPress={() => {\n                   props.setModalVisible(!props.modalVisible)\n               }} style={{margin: 0, height: \"100%\"}}>\n            <View style={styles.threeDotsModal}>\n                <View style={styles.dropdownMarker}></View>\n                <View style={styles.iconContainerContainer}>\n\n                    {/*ALL MY ARTWORKS BUTTON*/}\n                    <TouchableOpacity style={styles.iconContainer} onPress={() => {\n                        navigation.navigate(\"AllMyArtworksPage\");\n                        props.setModalVisible(false)\n                    }}>\n                        <Entypo name={\"heart\"} size={30} color={\"white\"}/>\n                        <Text style={styles.iconTitle}>Artworks</Text>\n                    </TouchableOpacity>\n\n                    {/*ALL MY LISTS BUTTON*/}\n                    <TouchableOpacity style={styles.iconContainer} onPress={() => {\n                        navigation.navigate('AllMyListsPage');\n                        props.setModalVisible(false)\n                    }}>\n                        <Feather name={\"bookmark\"} size={30} color={\"white\"}/>\n                        <Text style={styles.iconTitle}>Lists</Text>\n                    </TouchableOpacity>\n\n                    {/*ALL MY ARTISTS BUTTON*/}\n                    <TouchableOpacity style={styles.iconContainer} onPress={() => {\n                        navigation.navigate('AllMyArtistsPage');\n                        props.setModalVisible(false)\n                    }}>\n                        <Ionicons name={\"person\"} size={30} color={\"white\"}/>\n                        <Text style={styles.iconTitle}>Artists</Text>\n                    </TouchableOpacity>\n                </View>\n\n                {/*EDIT PROFILE BUTTON*/}\n                <TouchableOpacity onPress={() => {\n                    navigation.navigate(\"EditProfile\");\n                    props.setModalVisible(false)\n                }} style={styles.editProfileContainer}>\n                    <Text\n                        style={styles.bigIconTitle}>\n                        Edit profile\n                    </Text>\n                </TouchableOpacity>\n\n                {/*LOG OUT BUTTON*/}\n                <TouchableOpacity style={styles.logOutContainer} onPress={() => {\n                    auth.logOut()\n                }}>\n                    <Text\n                        style={styles.bigIconTitle}>\n                        Log out\n                    </Text>\n                </TouchableOpacity>\n            </View>\n        </Modal>\n    )\n}",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/Modals/ThreeDotsProfileModal/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 70,
    "kind": "function",
    "name": "ThreeDotsProfileModal",
    "memberof": "src/components/Modals/ThreeDotsProfileModal/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Modals/ThreeDotsProfileModal/index.tsx~ThreeDotsProfileModal",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/Modals/ThreeDotsProfileModal/index.tsx",
    "importStyle": "ThreeDotsProfileModal",
    "description": "Component displaying a modal for the three dots button on the {@link MyProfile} page\n\n<img src=\"https://drive.google.com/uc?export=view&id=1IQROT4EQsALaqbd6h3fz75G52H6f16cb\" alt=\"ArtworkPage\" height=\"500\">",
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ThreeDotsProfileModalProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "props.modalVisible",
        "description": "Visibility of the modal"
      },
      {
        "nullable": null,
        "types": [
          "void"
        ],
        "spread": false,
        "optional": false,
        "name": "props.setModalVisible",
        "description": "Toggles the visibility of the modal"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Modal"
    }
  },
  {
    "__docId__": 71,
    "kind": "file",
    "name": "src/components/MoreInformation/ArtistMoreInfo/index.tsx",
    "content": "import {useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport MoreInformation from \"../index\";\nimport {URL} from \"../../../services/constantes\"\nimport {ArtworkMoreInfoType} from \"../../../../types\";\n\n// PROPS\nexport type ArtworkMoreInfoProps = {\n    artistId: string\n}\n\n/**\n * Component displaying a {@link MoreInformation} component for artists\n * @param {ArtworkMoreInfoProps} props\n * @param {string} props.artworkId - ID of the artist\n * @constructor\n * @return MoreInformation\n */\nexport default function ArtworkMoreInfo(props: ArtworkMoreInfoProps) {\n\n    // USESTATE TO STORE DATA FROM API FETCH\n    const [data, setData] = useState<ArtworkMoreInfoType>({\n        artworkName: \"\",\n        artistName: \"\",\n        artistDOB: \"\",\n        artistDOD: \"\",\n        date: \"\",\n        dimensions: \"\",\n        genre: \"\",\n        keywords: [],\n        style: \"\",\n        summary: \"\"\n    });\n\n    // API CALL TO GET ALL DATA OF AN ARTIST\n    useEffect(() => {\n        axios\n            .get(URL + `paintingEntity/${props.artistId}`, {\n                headers: {\n                    \"Access-Control-Allow-Origin\": \"*\",\n                    \"Content-Type\": \"application/json\"\n                }\n            })\n            .then((response) => {\n\n                // PARSING DATA\n                const aw = response.data;\n                const keywords = aw.aw_keyw_import ? aw.aw_keyw_import.slice(1, -1).split(\",\") : null\n                let result = []\n                if (keywords) {\n                    for (let i = 0; i < keywords.length; i++) {\n                        result.push({\n                            name: keywords[i],\n                            id: i.toString()\n                        })\n                    }\n                }\n\n                setData({\n                    artworkName: aw.aw_title_Origin,\n                    artistName: aw.artist_name_tot,\n                    date: aw.aw_year,\n                    artistDOB: aw.artist_birthyear,\n                    artistDOD: aw.artist_deathyear,\n                    summary: aw.aw_desc_basic_1,\n                    style: aw.aw_style_import,\n                    // Check if dimensions are null, if so return null\n                    dimensions: aw.aw_dim_height != null && aw.aw_dim_width != null ? `${aw.aw_dim_height} x ${aw.aw_dim_width} cm` : null,\n                    genre: aw.aw_genre_import,\n                    // Parse keywords string into list\n                    keywords: result ? result : null,\n                });\n            })\n    }, [props.artistId])\n\n    // @ts-ignore\n    return (<MoreInformation data={data}/>)\n}\n\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/MoreInformation/ArtistMoreInfo/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 72,
    "kind": "function",
    "name": "ArtworkMoreInfo",
    "memberof": "src/components/MoreInformation/ArtistMoreInfo/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/MoreInformation/ArtistMoreInfo/index.tsx~ArtworkMoreInfo",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/MoreInformation/ArtistMoreInfo/index.tsx",
    "importStyle": "ArtworkMoreInfo",
    "description": "Component displaying a {@link MoreInformation} component for artists",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ArtworkMoreInfoProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.artworkId",
        "description": "ID of the artist"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "MoreInformation"
    }
  },
  {
    "__docId__": 73,
    "kind": "file",
    "name": "src/components/MoreInformation/ArtworkMoreInfo/index.tsx",
    "content": "import {useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport MoreInformation from \"../index\";\nimport {URL} from \"../../../services/constantes\"\nimport {ArtworkMoreInfoType} from \"../../../../types\";\n\n// PROPS\nexport type ArtworkMoreInfoProps = {\n    artworkId: string\n}\n\n/**\n * Component displaying a {@link MoreInformation} component for artworks\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=1yONEksxbzC_kw4XeS8KIZCh62cWSEGdU\" alt=\"ArtworkPage\" height=\"500\">\n * @param {ArtworkMoreInfoProps} props\n * @param {string} props.artworkId - ID of the artwork\n * @constructor\n * @return MoreInformation\n */\nexport default function ArtworkMoreInfo(props: ArtworkMoreInfoProps) {\n\n    // USESTATE TO STORE DATA FROM API FETCH\n    const [data, setData] = useState<ArtworkMoreInfoType>({\n        artworkName: \"\",\n        artistName: \"\",\n        artistDOB: \"\",\n        artistDOD: \"\",\n        date: \"\",\n        dimensions: \"\",\n        genre: \"\",\n        keywords: [],\n        style: \"\",\n        summary: \"\"\n    });\n\n    // API CALL TO GET ALL DATA OF AN ARTWORK\n    useEffect(() => {\n        axios\n            .get(URL + `paintingEntity/${props.artworkId}`, {\n                headers: {\n                    \"Access-Control-Allow-Origin\": \"*\",\n                    \"Content-Type\": \"application/json\"\n                }\n            })\n            .then((response) => {\n\n                // PARSING DATA\n                const aw = response.data;\n                const keywords = aw.aw_keyw_import ? aw.aw_keyw_import.slice(1, -1).split(\",\") : null\n                let test = []\n                if (keywords) {\n                    for (let i = 0; i < keywords.length; i++) {\n                        test.push({\n                            name: keywords[i],\n                            id: i.toString()\n                        })\n                    }\n                }\n\n                setData({\n                    artworkName: aw.aw_title_Origin,\n                    artistName: aw.artist_name_tot,\n                    date: aw.aw_year,\n                    artistDOB: aw.artist_birthyear,\n                    artistDOD: aw.artist_deathyear,\n                    summary: aw.aw_desc_basic_1,\n                    style: aw.aw_style_import,\n                    // Check if dimensions are null, if so return null\n                    dimensions: aw.aw_dim_height != null && aw.aw_dim_width != null ? `${aw.aw_dim_height} x ${aw.aw_dim_width} cm` : null,\n                    genre: aw.aw_genre_import,\n                    // Parse keywords string into list\n                    keywords: test ? test : null,\n                });\n            })\n    }, [props.artworkId])\n\n    // @ts-ignore\n    return (<MoreInformation data={data}/>)\n}\n\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/MoreInformation/ArtworkMoreInfo/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 74,
    "kind": "function",
    "name": "ArtworkMoreInfo",
    "memberof": "src/components/MoreInformation/ArtworkMoreInfo/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/MoreInformation/ArtworkMoreInfo/index.tsx~ArtworkMoreInfo",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/MoreInformation/ArtworkMoreInfo/index.tsx",
    "importStyle": "ArtworkMoreInfo",
    "description": "Component displaying a {@link MoreInformation} component for artworks\n\n<img src=\"https://drive.google.com/uc?export=view&id=1yONEksxbzC_kw4XeS8KIZCh62cWSEGdU\" alt=\"ArtworkPage\" height=\"500\">",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ArtworkMoreInfoProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.artworkId",
        "description": "ID of the artwork"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "MoreInformation"
    }
  },
  {
    "__docId__": 75,
    "kind": "file",
    "name": "src/components/MoreInformation/index.tsx",
    "content": "import React, {useState} from 'react';\nimport {ScrollView, Text, TouchableOpacity, View} from \"react-native\";\nimport styles from \"./styles\";\nimport Tag from \"../Utilities/Tag\";\nimport Modal from \"react-native-modal\";\n\n// PROPS\nexport type MoreInfoProps = {\n    data: {\n        artworkName: string,\n        artistName: string,\n        artistDOB: string,\n        artistDOD: string,\n        date: string,\n        summary: string,\n        style: string,\n        dimensions: string,\n        genre: string,\n        keywords: string[],\n    }\n}\n\n/**\n * Component displaying a button which opens a modal with more information about an artist or an artwork\n * @param {MoreInfoProps} props\n * @param {Object} props.data\n * @param {string} props.data.artworkName - Name of the artwork\n * @param {string} props.data.artistName - Name of the artist\n * @param {string} props.data.artistDOB - Date of birth of the artist\n * @param {string} props.data.artistDOD - Date of death of the artist\n * @param {string} props.data.date - Date of the artwork\n * @param {string} props.data.summary - Summary of the artwork\n * @param {string} props.data.style - Style of the artwork\n * @param {string} props.data.dimensions - Dimensions of the artwork\n * @param {string} props.data.genre - Genre of the artwork\n * @param {string[]} props.data.keywords - Keywords linked to the artwork\n * @constructor\n * @return MoreInformation\n */\nexport default function MoreInformation(props: MoreInfoProps) {\n\n    // FOR MODAL VISIBILITY\n    const [isModalVisible, setModalVisible] = useState(false)\n\n    const checkScroll = (event: any) => {\n        console.log(event.nativeEvent.contentOffset.y)\n    }\n\n    // ERROR MESSAGE IF NO DATA FETCHED\n    const errorMessage = \"No data available for this painting\"\n\n    return (\n        <View >\n            {/*SEE MORE BUTTON*/}\n            <TouchableOpacity style={styles.button} onPress={() => setModalVisible(!isModalVisible)}>\n                <Text style={styles.buttonText}>See More</Text>\n            </TouchableOpacity>\n\n            {/*MODAL*/}\n            <Modal\n                isVisible={isModalVisible}\n                animationIn={\"slideInUp\"}\n                backdropOpacity={0}\n                swipeDirection={[\"down\"]}\n                propagateSwipe={true}\n                onSwipeComplete={() => setModalVisible(false)}\n                // onSwipeComplete={() => setModalVisible(!isModalVisible)}\n                // statusBarTranslucent={true}\n                style={styles.modal}>\n                <View style={styles.scrollViewContainer}>\n\n                    {/*SCROLL VIEW*/}\n                    <ScrollView bounces={false} scrollEventThrottle={16} onScroll={checkScroll}\n                                contentOffset={{x: 0, y: 90}}>\n\n                        <View style={styles.dropdownMarker}></View>\n\n                        <View style={styles.headerContainer}>\n\n                            <Text style={styles.technicalText}>Technical specs</Text>\n                        </View>\n\n                        <TouchableOpacity style={styles.container} activeOpacity={1}>\n                            {/*BACK BUTTON*/}\n\n                            {/*TITLE*/}\n                            {/*<Text style={styles.bigTitle}>Technical Specs</Text>*/}\n\n                            {/*ARTWORK NAME*/}\n                            <Text style={styles.title}>Artwork name</Text>\n                            <Text\n                                style={styles.summary}>{props.data.artworkName ? props.data.artworkName : errorMessage}</Text>\n\n                            {/*ARTIST NAME*/}\n                            <Text style={styles.title}>Artist</Text>\n                            <Text\n                                style={styles.summary}>{props.data.artistName ? `${props.data.artistName} (${props.data.artistDOB}-${props.data.artistDOD})` : errorMessage}</Text>\n\n                            {/*DATE*/}\n                            <Text style={styles.title}>Date</Text>\n                            <Text style={styles.summary}>{props.data.date ? props.data.date : errorMessage}</Text>\n\n                            {/*SUMMARY*/}\n                            <Text style={styles.title}>Summary</Text>\n                            <Text style={styles.summary}>{props.data.summary ? props.data.summary : errorMessage}</Text>\n\n                            {/*STYLE*/}\n                            <Text style={styles.title}>Style</Text>\n                            <Text\n                                style={styles.styleAndGenre}>{props.data.style ? props.data.style : errorMessage}</Text>\n\n                            {/*DIMENSIONS*/}\n                            <Text style={styles.title}>Dimensions</Text>\n                            <Text\n                                style={styles.summary}>{props.data.dimensions ? props.data.dimensions : errorMessage}</Text>\n\n                            {/*GENRE*/}\n                            <Text style={styles.title}>Genre</Text>\n                            <Text\n                                style={styles.styleAndGenre}>{props.data.genre ? props.data.genre : errorMessage}</Text>\n\n                            {/*KEYWORDS*/}\n                            <Text style={styles.title}>Keywords</Text>\n                            <View style={styles.tags}>\n                                {props.data.keywords ? props.data.keywords.map((el: any) => {\n                                    return (\n                                        <View style={styles.tagContainer} key={el.id}>\n                                            <Tag title={el.name} key={el.id}/>\n                                        </View>\n                                    )\n                                }) : <Text style={styles.summary}>{errorMessage}</Text>}\n                            </View>\n                        </TouchableOpacity>\n                    </ScrollView>\n                </View>\n            </Modal>\n        </View>\n    )\n}",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/MoreInformation/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 76,
    "kind": "function",
    "name": "MoreInformation",
    "memberof": "src/components/MoreInformation/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/MoreInformation/index.tsx~MoreInformation",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/MoreInformation/index.tsx",
    "importStyle": "MoreInformation",
    "description": "Component displaying a button which opens a modal with more information about an artist or an artwork",
    "lineNumber": 40,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MoreInfoProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props.data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.data.artworkName",
        "description": "Name of the artwork"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.data.artistName",
        "description": "Name of the artist"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.data.artistDOB",
        "description": "Date of birth of the artist"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.data.artistDOD",
        "description": "Date of death of the artist"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.data.date",
        "description": "Date of the artwork"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.data.summary",
        "description": "Summary of the artwork"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.data.style",
        "description": "Style of the artwork"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.data.dimensions",
        "description": "Dimensions of the artwork"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.data.genre",
        "description": "Genre of the artwork"
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "props.data.keywords",
        "description": "Keywords linked to the artwork"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "MoreInformation"
    }
  },
  {
    "__docId__": 77,
    "kind": "file",
    "name": "src/components/SearchArtworkGridComponent/index.tsx",
    "content": "import React from \"react\";\nimport {Text, View} from \"react-native\";\nimport ArtworkGrid from \"../ArtworkGrid\";\nimport {Artwork} from \"../../../types\";\nimport {styles} from \"./styles\";\n\n// PROPS\nexport type SearchArtworkGridComponentProps = {\n    searchPhrase: string,\n    setClicked: any,\n    data: [Artwork] | []\n}\n\n/**\n * Component displaying the results of a search in the {@link ExplorePage}\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=1z_d54-i6xrvPihfc_yVchu7SgCbaWI-_\" alt=\"ArtworkPage\" height=\"500\">\n * @param {SearchArtworkGridComponentProps} props\n * @param {string} props.searchPhrase - Text in the searchBar\n * @param {any} props.setClicked - Is the searchBar clicked ?\n * @param {[Artwork] | []} props.data - Array of artworks fetched from the search\n * @constructor\n * @return SearchArtworkGridComponent\n */\nexport default function SearchArtworkGridComponent(props: SearchArtworkGridComponentProps) {\n\n    return (\n        <View style={styles.list__container} onStartShouldSetResponder={() => {\n            props.setClicked(false);\n            return true\n        }}>\n            {(props.data.length == 0 ? <Text style={styles.title}>NO RESULT</Text> :\n                <ArtworkGrid data={props.data}/>)}\n        </View>\n    )\n}\n\n\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/SearchArtworkGridComponent/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 78,
    "kind": "function",
    "name": "SearchArtworkGridComponent",
    "memberof": "src/components/SearchArtworkGridComponent/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/SearchArtworkGridComponent/index.tsx~SearchArtworkGridComponent",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/SearchArtworkGridComponent/index.tsx",
    "importStyle": "SearchArtworkGridComponent",
    "description": "Component displaying the results of a search in the {@link ExplorePage}\n\n<img src=\"https://drive.google.com/uc?export=view&id=1z_d54-i6xrvPihfc_yVchu7SgCbaWI-_\" alt=\"ArtworkPage\" height=\"500\">",
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "SearchArtworkGridComponentProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.searchPhrase",
        "description": "Text in the searchBar"
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "props.setClicked",
        "description": "Is the searchBar clicked ?"
      },
      {
        "nullable": null,
        "types": [
          "[Artwork] ",
          " []"
        ],
        "spread": false,
        "optional": false,
        "name": "props.data",
        "description": "Array of artworks fetched from the search"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "SearchArtworkGridComponent"
    }
  },
  {
    "__docId__": 79,
    "kind": "file",
    "name": "src/components/SocialNetwork/CommentBar/index.tsx",
    "content": "import React from \"react\";\nimport {StyleSheet, TextInput, View} from \"react-native\";\n\nconst CommentBar = () => {\n\n    const userName = \"valentinbest\"\n\n    return (\n        <View style={styles.container}>\n            <TextInput placeholder={`Add a comment as @${userName}`} placeholderTextColor={\"white\"} style={styles.text}/>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        width: \"100%\",\n        height: 200\n    },\n    text: {\n        fontSize: 20,\n        marginLeft: 10,\n        width: \"90%\",\n        color: \"black\",\n    }\n\n})\n\nexport default CommentBar",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/SocialNetwork/CommentBar/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 80,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/components/SocialNetwork/CommentBar/index.tsx",
    "static": true,
    "longname": "src/components/SocialNetwork/CommentBar/index.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/components/SocialNetwork/CommentBar/index.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 81,
    "kind": "function",
    "name": "CommentBar",
    "memberof": "src/components/SocialNetwork/CommentBar/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/SocialNetwork/CommentBar/index.tsx~CommentBar",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/SocialNetwork/CommentBar/index.tsx",
    "importStyle": "CommentBar",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 82,
    "kind": "file",
    "name": "src/components/SocialNetwork/HeaderMainPage/index.tsx",
    "content": "import React from \"react\";\nimport {Image, TouchableOpacity, View} from \"react-native\";\nimport {Ionicons} from \"@expo/vector-icons\";\nimport {styles} from \"./styles\";\nimport {useNavigation} from \"@react-navigation/native\";\n\n\nconst HeaderMainPage = () => {\n\n    const navigation = useNavigation();\n\n    const handleNotifClick = () => {\n        navigation.navigate(\"NotificationsPage\")\n    }\n\n    const handleChatClick = () => {\n        navigation.navigate(\"MessagesPage\")\n    }\n\n    return (\n        <View style={styles.container}>\n            {/*LOGO DAYL*/}\n            <TouchableOpacity onPress={() => console.log(\"Dayl\")}>\n                <Image style={styles.image} source={require(\"../../../../assets/images/dayl.png\")}/>\n            </TouchableOpacity>\n            {/*NOTIF AND CHAT ICONS CONTAINER*/}\n            <View style={styles.iconContainer}>\n                {/*NOTIF ICON*/}\n                <TouchableOpacity style={styles.icon} onPress={() => handleNotifClick()}>\n                    <Ionicons name={\"notifications-outline\"} size={30} color={\"white\"}/>\n                </TouchableOpacity>\n                {/*CHAT ICON*/}\n                <TouchableOpacity style={styles.icon} onPress={() => handleChatClick()}>\n                    <Ionicons name={\"paper-plane-outline\"} size={30} color={\"white\"}/>\n                </TouchableOpacity>\n            </View>\n        </View>\n    )\n}\n\nexport default HeaderMainPage",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/SocialNetwork/HeaderMainPage/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 83,
    "kind": "function",
    "name": "HeaderMainPage",
    "memberof": "src/components/SocialNetwork/HeaderMainPage/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/SocialNetwork/HeaderMainPage/index.tsx~HeaderMainPage",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/SocialNetwork/HeaderMainPage/index.tsx",
    "importStyle": "HeaderMainPage",
    "description": null,
    "lineNumber": 8,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 84,
    "kind": "file",
    "name": "src/components/SocialNetwork/HeaderPost/index.tsx",
    "content": "import React from \"react\";\nimport {Image, Text, TouchableOpacity, View} from \"react-native\";\nimport {Entypo, MaterialIcons} from \"@expo/vector-icons\";\nimport {styles} from \"./styles\";\nimport {useNavigation} from \"@react-navigation/native\";\nimport {ImagePicked} from \"../../../../types\";\n\nexport type headerPostProps = {\n    avatarUri: string;\n    userName: string;\n    verified: boolean;\n    postType: string;\n    userId?: string;\n    date?: string;\n    role?: string;\n    artworkName?: string;\n    text?: string;\n    image?: ImagePicked;\n}\n\nconst HeaderPost = (props: headerPostProps) => {\n\n    const navigation = useNavigation()\n\n    const handleUserClick = () => {\n        // @ts-ignore\n        navigation.navigate('ArtistNonUserPage', {\n            imageUri: props.avatarUri,\n            information: \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Vivamus vehicula placerat metus eu pretium. Mauris finibus fermentum mi, ut vehicula mi bibendum eu. Nullam et erat pulvinar, sollicitudin metus a, dictum diam.\",\n            artistName: props.userName,\n            following: false,\n            artistId: \"102338\",\n        })\n    }\n\n    const handleThreeDots = () => {\n        // @ts-ignore\n        navigation.navigate('ThreeDotsPage', {\n            image: props.image,\n            text: props.text,\n            avatarUri: props.avatarUri,\n            userName: props.userName,\n            userId: props.userId,\n            verified: props.verified,\n            date: props.date,\n            artworkName: props.artworkName,\n            postType: props.postType,\n        })\n    }\n\n    return (\n        <View style={styles.container}>\n            {/*AVATAR, USER NAME AND VERIFICATION ICON CONTAINER*/}\n            <View style={styles.nameAvatarAndVerif}>\n                {/*USER AVATAR*/}\n                <TouchableOpacity onPress={() => handleUserClick()}>\n                    <Image style={styles.image} source={{uri: props.avatarUri}}/>\n                </TouchableOpacity>\n                {/*USER NAME*/}\n                <TouchableOpacity onPress={() => handleUserClick()}>\n                    <Text style={styles.name}>{props.userName}</Text>\n                </TouchableOpacity>\n                {/*VERIFIED ICON*/}\n                {props.verified && <MaterialIcons name={\"verified-user\"} size={20} color={\"white\"} style={styles.icon}/>}\n            </View>\n            {/*DATE/ROLE AND DOTS CONTAINER*/}\n            <View style={styles.dateAndDots}>\n                {/*DATE OR ROLE ACCORDING TO TYPE OF POST (SOCIAL = POST AND REPOST, PAINTING, ANALYSIS)*/}\n                <Text style={styles.date}>{(props.postType == \"analysis\") ? props.role : props.date}</Text>\n                {/*THREE DOTS*/}\n                <TouchableOpacity style={styles.icon} onPress={() => handleThreeDots()}>\n                    <Entypo name={\"dots-three-horizontal\"} size={20} color={\"white\"}/>\n                </TouchableOpacity>\n            </View>\n        </View>\n    )\n}\n\nexport default HeaderPost",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/SocialNetwork/HeaderPost/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 85,
    "kind": "function",
    "name": "HeaderPost",
    "memberof": "src/components/SocialNetwork/HeaderPost/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/SocialNetwork/HeaderPost/index.tsx~HeaderPost",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/SocialNetwork/HeaderPost/index.tsx",
    "importStyle": "HeaderPost",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 86,
    "kind": "file",
    "name": "src/components/SocialNetwork/MessageGrid/index.tsx",
    "content": "import React from \"react\";\nimport {StyleSheet, View} from \"react-native\";\n\nimport {MessagePreview} from \"../../../../types\";\nimport MessagePreviewComponent from \"../MessagePreview\";\n\n\nexport type messageGridProps = {\n    messages: MessagePreview[] | [];\n}\n\nconst MessageGrid = (props: messageGridProps) => {\n\n    return (\n        <View style={styles.container}>\n            {props.messages.map((el) => {\n                return <MessagePreviewComponent userName={el.userName} userAvatar={el.userAvatar} date={el.date} lastMessage={el.lastMessage} key={el.id} id={el.id}/>\n            })}\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        width: \"100%\"\n    },\n    title: {\n        fontSize: 20,\n        color: \"white\",\n        marginVertical: 10,\n        marginLeft: 20\n    },\n\n})\n\nexport default MessageGrid",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/SocialNetwork/MessageGrid/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 87,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/components/SocialNetwork/MessageGrid/index.tsx",
    "static": true,
    "longname": "src/components/SocialNetwork/MessageGrid/index.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/components/SocialNetwork/MessageGrid/index.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 88,
    "kind": "function",
    "name": "MessageGrid",
    "memberof": "src/components/SocialNetwork/MessageGrid/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/SocialNetwork/MessageGrid/index.tsx~MessageGrid",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/SocialNetwork/MessageGrid/index.tsx",
    "importStyle": "MessageGrid",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 89,
    "kind": "file",
    "name": "src/components/SocialNetwork/MessagePreview/index.tsx",
    "content": "import React from \"react\";\nimport {Image, Text, TouchableOpacity, View} from \"react-native\";\nimport {styles} from \"./styles\";\n\n// MESSAGE PREVIEW COMPONENT\n\nexport type messagePreviewComponentProps = {\n    userName: string;\n    userAvatar: string;\n    date: string;\n    lastMessage: string;\n    id: string;\n}\n\nconst MessagePreviewComponent = (props: messagePreviewComponentProps) => {\n\n    const handleMessageClick = () => {\n        console.log(\"Message\")\n    }\n\n    return (\n        <TouchableOpacity style={styles.container} onPress={() => handleMessageClick()}>\n            <Image source={{uri: props.userAvatar}} style={styles.avatar}/>\n            <View style={styles.textContainer}>\n                <Text style={styles.text}>{props.userName}</Text>\n                <Text style={styles.date}>{props.lastMessage}</Text>\n            </View>\n            <View style={styles.dateContainer}>\n                <Text style={styles.date}>{props.date}</Text>\n            </View>\n\n        </TouchableOpacity>\n    )\n}\n\nexport default MessagePreviewComponent",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/SocialNetwork/MessagePreview/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 90,
    "kind": "function",
    "name": "MessagePreviewComponent",
    "memberof": "src/components/SocialNetwork/MessagePreview/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/SocialNetwork/MessagePreview/index.tsx~MessagePreviewComponent",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/SocialNetwork/MessagePreview/index.tsx",
    "importStyle": "MessagePreviewComponent",
    "description": null,
    "lineNumber": 15,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 91,
    "kind": "file",
    "name": "src/components/SocialNetwork/NewPost/NewPostButton/index.tsx",
    "content": "import React from \"react\";\nimport {StyleSheet, TouchableOpacity} from \"react-native\";\nimport {Entypo} from \"@expo/vector-icons\";\nimport colors from \"../../../../../constants/Colors\";\nimport {useNavigation} from \"@react-navigation/native\";\n\nconst NewPostButton = () => {\n\n    const navigation = useNavigation()\n\n    const handleButtonClick = () => {\n        // @ts-ignore\n        navigation.navigate(\"NewPostPage\")\n    }\n\n    return (\n        <TouchableOpacity style={styles.button} onPress={() => handleButtonClick()}>\n            <Entypo name={\"plus\"} size={50} color={\"white\"}/>\n        </TouchableOpacity>\n    )\n}\n\nconst styles = StyleSheet.create({\n    button: {\n        position: \"absolute\",\n        alignSelf: \"flex-end\",\n        // justifyContent: \"center\",\n        // alignItems: \"center\",\n        backgroundColor: colors.daylRed.text,\n        // borderRadius: 30,\n        // right: layout.window.width/10,\n        // bottom: layout.window.height/11,\n\n\n\n        bottom: 15,\n        right: 15,\n        // width: 60,\n        // height: 60,\n        borderRadius: 50,\n        alignItems: 'center',\n        justifyContent: 'center',\n    }\n})\n\nexport default NewPostButton",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/SocialNetwork/NewPost/NewPostButton/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 92,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/components/SocialNetwork/NewPost/NewPostButton/index.tsx",
    "static": true,
    "longname": "src/components/SocialNetwork/NewPost/NewPostButton/index.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/components/SocialNetwork/NewPost/NewPostButton/index.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 93,
    "kind": "function",
    "name": "NewPostButton",
    "memberof": "src/components/SocialNetwork/NewPost/NewPostButton/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/SocialNetwork/NewPost/NewPostButton/index.tsx~NewPostButton",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/SocialNetwork/NewPost/NewPostButton/index.tsx",
    "importStyle": "NewPostButton",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 94,
    "kind": "file",
    "name": "src/components/SocialNetwork/NewPost/NewPostHeader/index.tsx",
    "content": "import React from \"react\";\nimport {StyleSheet, Text, TouchableOpacity, View} from \"react-native\";\nimport {Entypo} from \"@expo/vector-icons\";\nimport colors from \"../../../../../constants/Colors\";\nimport {useNavigation} from \"@react-navigation/native\";\n\nexport type newPostHeaderProps = {\n    onPress() : void\n}\n\nexport default function NewPostHeader(props: newPostHeaderProps) {\n\n    const navigation = useNavigation()\n\n    const handlePost = () => {\n        props.onPress()\n    }\n\n    return (\n        <View style={styles.header}>\n            <View style={styles.container}>\n                <TouchableOpacity onPress={navigation.goBack}>\n                    <Entypo name={\"cross\"} size={30} color={\"white\"}/>\n                </TouchableOpacity>\n                <TouchableOpacity style={styles.postButton} onPress={() => handlePost()}>\n                    <Text style={styles.buttonText}>Post</Text>\n                </TouchableOpacity>\n            </View>\n            <Text style={styles.title}>New Post</Text>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    header: {\n        height: 80,\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n    },\n    container: {\n        width: \"90%\",\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"space-between\",\n        alignSelf: \"center\"\n    },\n    icon: {\n\n    },\n    title: {\n        fontSize: 25,\n        color: \"white\",\n        position: \"absolute\"\n    },\n    postButton: {\n        borderRadius: 10,\n        backgroundColor: colors.daylRed.text\n    },\n    buttonText: {\n        fontSize: 15,\n        color: \"white\",\n        marginVertical: 5,\n        marginHorizontal: 10\n    }\n})",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/SocialNetwork/NewPost/NewPostHeader/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 95,
    "kind": "function",
    "name": "NewPostHeader",
    "memberof": "src/components/SocialNetwork/NewPost/NewPostHeader/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/SocialNetwork/NewPost/NewPostHeader/index.tsx~NewPostHeader",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/SocialNetwork/NewPost/NewPostHeader/index.tsx",
    "importStyle": "NewPostHeader",
    "description": "",
    "lineNumber": 11,
    "params": [
      {
        "nullable": null,
        "types": [
          "newPostHeaderProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 96,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/components/SocialNetwork/NewPost/NewPostHeader/index.tsx",
    "static": true,
    "longname": "src/components/SocialNetwork/NewPost/NewPostHeader/index.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/components/SocialNetwork/NewPost/NewPostHeader/index.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 97,
    "kind": "file",
    "name": "src/components/SocialNetwork/NewPost/NewPostText/index.tsx",
    "content": "import React, {useEffect, useState} from \"react\";\nimport {Image, StyleSheet, Text, TextInput, View} from \"react-native\";\n\nexport type newPostTextProps = {\n    text: string,\n    setText(text: string) : void,\n}\n\nexport default function NewPostText(props: newPostTextProps) {\n\n    const [charLeft, setCharLeft] = useState(250)\n    const userAvatar = \"https://upload.wikimedia.org/wikipedia/commons/thumb/9/98/Pablo_picasso_1.jpg/800px-Pablo_picasso_1.jpg\"\n\n\n    useEffect(() => {\n        setCharLeft(250 - props.text.length)\n    }, [props.text])\n\n    return (\n        <View style={styles.comment}>\n            <View style={styles.container}>\n                <Image source={{uri: userAvatar}} style={styles.avatar}/>\n                <TextInput placeholder={\"Comment...\"} placeholderTextColor={\"gray\"} multiline={true} maxLength={250}\n                           style={styles.textInput} enablesReturnKeyAutomatically={true}\n                           onChangeText={(text) => props.setText(text)}/>\n            </View>\n            <View style={styles.charLeftContainer}>\n                <Text style={styles.charLeft}>{charLeft}</Text>\n            </View>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    comment: {\n        minHeight: \"30%\",\n        maxHeight: \"60%\",\n        width: \"100%\",\n        flexDirection: \"column\",\n    },\n    container: {\n        width: \"90%\",\n        flexDirection: \"row\",\n        alignItems: \"flex-start\",\n        justifyContent: \"flex-start\",\n        alignSelf: \"center\",\n        paddingVertical: 20,\n        maxHeight: \"80%\",\n    },\n    avatar: {\n        width: 30,\n        height: 30,\n        borderRadius: 20,\n    },\n    textInput: {\n        width: \"85%\",\n        color: \"white\",\n        fontSize: 20,\n        textAlign: \"left\",\n        textAlignVertical: \"top\",\n        marginHorizontal: 10,\n    },\n    charLeftContainer: {\n        alignItems: \"flex-end\",\n    },\n    charLeft: {\n        color: \"white\",\n        fontSize: 15,\n        marginHorizontal: 15\n    }\n})",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/SocialNetwork/NewPost/NewPostText/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 98,
    "kind": "function",
    "name": "NewPostText",
    "memberof": "src/components/SocialNetwork/NewPost/NewPostText/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/SocialNetwork/NewPost/NewPostText/index.tsx~NewPostText",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/SocialNetwork/NewPost/NewPostText/index.tsx",
    "importStyle": "NewPostText",
    "description": "",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "newPostTextProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 99,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/components/SocialNetwork/NewPost/NewPostText/index.tsx",
    "static": true,
    "longname": "src/components/SocialNetwork/NewPost/NewPostText/index.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/components/SocialNetwork/NewPost/NewPostText/index.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 34,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 100,
    "kind": "file",
    "name": "src/components/SocialNetwork/Notifications/NotificationComponent/index.tsx",
    "content": "import React from \"react\";\nimport {Image, Text, TouchableOpacity, View} from \"react-native\";\nimport FollowingButtonComponent from \"../../../Utilities/FollowingButtonComponent\";\nimport {styles} from \"./styles\";\n\n// NOTIFICATION COMPONENT\n\nexport type notificationComponentProps = {\n    userName: string;\n    userAvatar: string;\n    date: string;\n    type: string;\n    id: string;\n}\n\nconst NotificationComponent = (props: notificationComponentProps) => {\n\n    // TYPE OF NOTIFICATION (FOLLOW / LIKE / ...)\n    // TODO : IMPLEMENT OTHER TYPES WHEN SOCIAL NETWORK READY\n    const notifText = () => {\n        switch (props.type) {\n            case \"follow\": {\n                return <Text style={styles.text}>@{props.userName} started following you</Text>\n            }\n            case \"like\": {\n                return <Text style={styles.text}>@{props.userName} liked your post</Text>\n            }\n        }\n    }\n\n    const handleNotifClick = () => {\n        console.log(\"Notif\")\n    }\n    \n    return (\n        <TouchableOpacity style={styles.container} onPress={() => handleNotifClick()}>\n            <Image source={{uri: props.userAvatar}} style={styles.avatar}/>\n            <View style={styles.textContainer}>\n                {notifText()}\n                <Text style={styles.date}>{props.date}</Text>\n            </View>\n            {props.type == \"follow\" ? <FollowingButtonComponent artistId={\"0\"}/>: null}\n        </TouchableOpacity>\n    )\n}\n\nexport default NotificationComponent",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/SocialNetwork/Notifications/NotificationComponent/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 101,
    "kind": "function",
    "name": "NotificationComponent",
    "memberof": "src/components/SocialNetwork/Notifications/NotificationComponent/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/SocialNetwork/Notifications/NotificationComponent/index.tsx~NotificationComponent",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/SocialNetwork/Notifications/NotificationComponent/index.tsx",
    "importStyle": "NotificationComponent",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 102,
    "kind": "file",
    "name": "src/components/SocialNetwork/Notifications/NotificationGrid/index.tsx",
    "content": "import React from \"react\";\nimport {StyleSheet, Text, View} from \"react-native\";\nimport NotificationComponent from \"../NotificationComponent\";\nimport {Notification} from \"../../../../../types\";\n\n// COMPONENT SHOWING A GRID OF NOTIFICATIONS\n\nexport type notificationGridProps = {\n    title: string;\n    notifications: Notification[] | [];\n}\n\nconst NotificationGrid = (props: notificationGridProps) => {\n\n    return (\n        <View style={styles.container}>\n            <Text style={styles.title}>{props.title}</Text>\n            {props.notifications.map((el) => {\n                return <NotificationComponent userName={el.userName} userAvatar={el.userAvatar} date={el.date} type={el.type} id={el.id} key={el.id}/>\n            })}\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        width: \"100%\"\n    },\n    title: {\n        fontSize: 20,\n        color: \"white\",\n        marginVertical: 10,\n        marginLeft: 20\n    },\n\n})\n\nexport default NotificationGrid",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/SocialNetwork/Notifications/NotificationGrid/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 103,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/components/SocialNetwork/Notifications/NotificationGrid/index.tsx",
    "static": true,
    "longname": "src/components/SocialNetwork/Notifications/NotificationGrid/index.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/components/SocialNetwork/Notifications/NotificationGrid/index.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 104,
    "kind": "function",
    "name": "NotificationGrid",
    "memberof": "src/components/SocialNetwork/Notifications/NotificationGrid/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/SocialNetwork/Notifications/NotificationGrid/index.tsx~NotificationGrid",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/SocialNetwork/Notifications/NotificationGrid/index.tsx",
    "importStyle": "NotificationGrid",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 105,
    "kind": "file",
    "name": "src/components/SocialNetwork/OptionComponent/index.tsx",
    "content": "import React from \"react\";\nimport {AntDesign, Feather, FontAwesome, MaterialIcons} from \"@expo/vector-icons\";\nimport {StyleSheet, Text, View} from \"react-native\";\n\nexport type optionComponentProps = {\n    type: string,\n}\n\nexport default function OptionComponent(props: optionComponentProps) {\n\n    let label = \"\"\n\n    const icon = () => {\n        switch (props.type) {\n            case \"like\": {\n                label = \"Like\"\n                return <AntDesign name={\"heart\"} size={25} color={\"lightgray\"} style={styles.icon}/>\n            }\n            case \"share\": {\n                label = \"Share\"\n                return <Feather name={\"share\"} size={25} color={\"white\"} style={styles.icon}/>\n            }\n            case \"add\": {\n                label = \"Add to list\"\n                return <FontAwesome name={\"bookmark-o\"} size={25} color={\"white\"} style={styles.icon}/>\n            }\n            case \"match\": {\n                label = \"Match\"\n                return <Feather name={\"bookmark\"} size={25} color={\"white\"} style={styles.icon}/>\n            }\n            case \"report\": {\n                label = \"Report\"\n                return <MaterialIcons name={\"report\"} size={25} color={\"white\"} style={styles.icon}/>\n            }\n        }\n    }\n\n    return (\n        <View style={styles.container}>\n            <View style={styles.iconContainer}>\n                {icon()}\n            </View>\n\n            <Text style={styles.label}>{label}</Text>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flexDirection: \"row\",\n        marginVertical: 10,\n    },\n    label: {\n        fontSize: 20,\n        color: \"lightgray\",\n        marginHorizontal: 10\n    },\n    icon: {\n    },\n    iconContainer: {\n        width: 50,\n        justifyContent: \"center\",\n        alignItems: \"center\"\n    }\n})",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/SocialNetwork/OptionComponent/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 106,
    "kind": "function",
    "name": "OptionComponent",
    "memberof": "src/components/SocialNetwork/OptionComponent/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/SocialNetwork/OptionComponent/index.tsx~OptionComponent",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/SocialNetwork/OptionComponent/index.tsx",
    "importStyle": "OptionComponent",
    "description": "",
    "lineNumber": 9,
    "params": [
      {
        "nullable": null,
        "types": [
          "optionComponentProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 107,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/components/SocialNetwork/OptionComponent/index.tsx",
    "static": true,
    "longname": "src/components/SocialNetwork/OptionComponent/index.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/components/SocialNetwork/OptionComponent/index.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 49,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 108,
    "kind": "file",
    "name": "src/components/SocialNetwork/PostAnalysis/index.tsx",
    "content": "import React from \"react\";\nimport {Text, TouchableOpacity, View} from \"react-native\";\nimport {styles} from \"./styles\";\nimport HeaderPost from \"../HeaderPost\";\nimport ToolBarPost from \"../ToolBarPost\";\n\nexport type postAnalysisProps = {\n    avatarUri: string;\n    userName: string;\n    verified: boolean;\n    role: string;\n    text: string;\n    repost: boolean;\n    threedots: boolean;\n}\n\nconst PostAnalysis = (props: postAnalysisProps) => {\n\n    const handleTextClick = () => {\n        console.log(\"Image\")\n    }\n\n    return (\n        <View\n            style={[styles.container, {scaleX: props.repost ? 0.9 : props.threedots ? 0.8 : 1, scaleY: props.repost ? 0.9 : props.threedots ? 0.8 : 1,}]}>\n            {/*HEADER POST*/}\n            <HeaderPost avatarUri={props.avatarUri} role={props.role} userName={props.userName} verified={props.verified} postType={\"analysis\"} text={props.text}/>\n            {/*IMAGE AND TITLE*/}\n            <View style={styles.postContent}>\n                {/*IMAGE*/}\n                <TouchableOpacity onPress={() => handleTextClick()}>\n                    <Text style={styles.textPost}>{props.text}</Text>\n                </TouchableOpacity>\n                <View>\n                    <ToolBarPost postType={\"analysis\"} isLiked={false}/>\n                </View>\n            </View>\n        </View>\n    )\n}\n\nexport default PostAnalysis",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/SocialNetwork/PostAnalysis/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 109,
    "kind": "function",
    "name": "PostAnalysis",
    "memberof": "src/components/SocialNetwork/PostAnalysis/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/SocialNetwork/PostAnalysis/index.tsx~PostAnalysis",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/SocialNetwork/PostAnalysis/index.tsx",
    "importStyle": "PostAnalysis",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 110,
    "kind": "file",
    "name": "src/components/SocialNetwork/PostComment/index.tsx",
    "content": "import React, {useState} from \"react\";\nimport {Text, TouchableOpacity, View} from \"react-native\";\nimport {styles} from \"./styles\";\nimport HeaderPost from \"../HeaderPost\";\nimport ToolBarPost from \"../ToolBarPost\";\n\nexport type postCommentProps = {\n    text: string;\n    avatarUri: string;\n    userName: string;\n    userId: string;\n    verified: boolean;\n    date: string;\n    repost: boolean;\n    threedots: boolean;\n}\n\nconst PostComment = (props: postCommentProps) => {\n\n    const [isModalVisible, setModalVisible] = useState(false)\n\n    const handleTextClick = () => {\n        console.log(\"Text\")\n    }\n\n    const handleToolBar = () => {\n        if (props.repost || props.threedots) {\n            return null\n        }\n        else\n            return <View><ToolBarPost postType={\"social\"} isLiked={false}/></View>\n    }\n\n    return (\n        <View>\n            <View style={[styles.container, {scaleX: props.repost ? 0.9 : props.threedots ? 0.8 : 1, scaleY: props.repost ? 0.9 : props.threedots ? 0.8 : 1,}]}>\n                {/*HEADER POST*/}\n                <HeaderPost avatarUri={props.avatarUri} userName={props.userName} postType={\"social\"}\n                            verified={props.verified} date={props.date} userId={props.userId} text={props.text}/>\n                {/*TEXT IMAGE AND TOOLBAR*/}\n                <View style={styles.postContent}>\n                    {/*TEXT AND IMAGE*/}\n                    <View>\n                        {/*TEXT*/}\n                        <TouchableOpacity onPress={() => handleTextClick()}>\n                            <Text style={styles.textPost}>{props.text}</Text>\n                        </TouchableOpacity>\n                    </View>\n                    {/*TOOLBAR*/}\n                    {handleToolBar()}\n                </View>\n            </View>\n        </View>\n    )\n}\n\nexport default PostComment",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/SocialNetwork/PostComment/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 111,
    "kind": "function",
    "name": "PostComment",
    "memberof": "src/components/SocialNetwork/PostComment/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/SocialNetwork/PostComment/index.tsx~PostComment",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/SocialNetwork/PostComment/index.tsx",
    "importStyle": "PostComment",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 112,
    "kind": "file",
    "name": "src/components/SocialNetwork/PostPainting/index.tsx",
    "content": "import React, {useState} from \"react\";\nimport {Image, Text, TouchableOpacity, View} from \"react-native\";\nimport {styles} from \"./styles\";\nimport OnClickImageComponent from \"../../Utilities/OnClickImage\";\nimport HeaderPost from \"../HeaderPost\";\nimport ToolBarPainting from \"../ToolBarPainting\";\nimport {ImagePicked} from \"../../../../types\";\n\nexport type postPaintingProps = {\n    image: ImagePicked;\n    artworkName: string;\n    avatarUri: string;\n    userName: string;\n    userId: string;\n    verified: boolean;\n    date: string;\n    repost: boolean;\n    threedots: boolean;\n}\n\nconst PostPainting = (props: postPaintingProps) => {\n\n    const [isModalVisible, setModalVisible] = useState(false)\n\n    const handleArtworkClick = () => {\n        setModalVisible(true)\n    }\n\n    const ratio = props.image ? props.image.height / props.image.width : 0;\n\n\n    return (\n        <View>\n\n            <OnClickImageComponent imageUri={props.image.uri} title={props.artworkName} onClickImage={isModalVisible}\n                                   setOnClickImage={setModalVisible}/>\n\n            <View\n                style={[styles.container, {\n                    scaleX: props.repost ? 0.9 : props.threedots ? 0.8 : 1,\n                    scaleY: props.repost ? 0.9 : props.threedots ? 0.8 : 1,\n                    marginBottom: props.repost ? 0 : 10\n                }]}>\n                {/*HEADER POST*/}\n                <HeaderPost avatarUri={props.avatarUri} userName={props.userName} verified={props.verified}\n                            postType={\"painting\"}\n                            date={props.date} userId={props.userId} artworkName={props.artworkName}\n                            image={props.image}/>\n                {/*IMAGE, TITLE AND TOOLBAR*/}\n                <View style={styles.postContent}>\n                    {/*IMAGE AND TOOLBAR*/}\n                    <TouchableOpacity style={styles.imagePost} onPress={() => handleArtworkClick()}>\n                        {/*IMAGE*/}\n                        <Image source={{uri: props.image.uri}}\n                               style={{width: \"100%\", aspectRatio: 3 / 2, borderRadius: 10,}}\n                               resizeMode={\"cover\"}/>\n                        {/*TOOL BAR*/}\n                        <View style={styles.toolBar}>\n                            <ToolBarPainting/>\n                        </View>\n                    </TouchableOpacity>\n                    {/*TITLE*/}\n                    <TouchableOpacity onPress={() => handleArtworkClick()}>\n                        <Text style={styles.textPost}>{props.artworkName}</Text>\n                    </TouchableOpacity>\n                </View>\n            </View>\n        </View>\n    )\n}\n\nexport default PostPainting",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/SocialNetwork/PostPainting/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 113,
    "kind": "function",
    "name": "PostPainting",
    "memberof": "src/components/SocialNetwork/PostPainting/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/SocialNetwork/PostPainting/index.tsx~PostPainting",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/SocialNetwork/PostPainting/index.tsx",
    "importStyle": "PostPainting",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 114,
    "kind": "file",
    "name": "src/components/SocialNetwork/PostSocial/index.tsx",
    "content": "import React, {useState} from \"react\";\nimport {Dimensions, Image, Text, TouchableOpacity, View} from \"react-native\";\nimport {styles} from \"./styles\";\nimport OnClickImageComponent from \"../../Utilities/OnClickImage\";\nimport ToolBarPost from \"../ToolBarPost\";\nimport HeaderPost from \"../HeaderPost\";\nimport {ImagePicked} from \"../../../../types\";\n\nexport type postSocialProps = {\n    image: ImagePicked;\n    text: string;\n    avatarUri: string;\n    userName: string;\n    userId: string;\n    verified: boolean;\n    date: string;\n    repost: boolean;\n    threedots: boolean;\n}\n\nconst PostSocial = (props: postSocialProps) => {\n\n    const [isModalVisible, setModalVisible] = useState(false)\n\n    const handleTextClick = () => {\n        console.log(\"Text\")\n    }\n\n    const handleImageClick = () => {\n        setModalVisible(!isModalVisible)\n    }\n\n    const handleToolBar = () => {\n        if (props.repost || props.threedots) {\n            return null\n        } else\n            return <View><ToolBarPost postType={\"social\"} isLiked={false}/></View>\n    }\n\n    const ratio = props.image ? props.image.height / props.image.width : 0;\n    const deviceHeight = Dimensions.get(\"window\").height\n    const deviceWidth = Dimensions.get(\"window\").width\n\n    return (\n        <View>\n\n            <OnClickImageComponent imageUri={props.image.uri} title={\"\"} onClickImage={isModalVisible}\n                                   setOnClickImage={setModalVisible}/>\n            <View style={[styles.container, {\n                scaleX: props.repost ? 0.9 : props.threedots ? 0.8 : 1,\n                scaleY: props.repost ? 0.9 : props.threedots ? 0.8 : 1,\n            }]}>\n                {/*HEADER POST*/}\n                <HeaderPost avatarUri={props.avatarUri} userName={props.userName} postType={\"social\"}\n                            verified={props.verified} date={props.date} userId={props.userId} text={props.text}\n                            image={props.image}/>\n                {/*TEXT IMAGE AND TOOLBAR*/}\n                <View style={styles.postContent}>\n                    {/*TEXT AND IMAGE*/}\n                    <View>\n                        {/*TEXT*/}\n                        <TouchableOpacity onPress={() => handleTextClick()}>\n                            <Text style={styles.textPost}>{props.text}</Text>\n                        </TouchableOpacity>\n                        {/*IMAGE*/}\n                        <TouchableOpacity style={styles.imagePost} onPress={() => handleImageClick()}>\n                            <Image source={{uri: props.image.uri}}\n                                   style={{width: 300, height: ratio * 300, borderRadius: 10,}}\n                                   resizeMode={\"contain\"}/>\n                        </TouchableOpacity>\n                    </View>\n                    {/*TOOLBAR*/}\n                    {handleToolBar()}\n                </View>\n            </View>\n        </View>\n    )\n}\n\nexport default PostSocial",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/SocialNetwork/PostSocial/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 115,
    "kind": "function",
    "name": "PostSocial",
    "memberof": "src/components/SocialNetwork/PostSocial/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/SocialNetwork/PostSocial/index.tsx~PostSocial",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/SocialNetwork/PostSocial/index.tsx",
    "importStyle": "PostSocial",
    "description": null,
    "lineNumber": 21,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 116,
    "kind": "file",
    "name": "src/components/SocialNetwork/RepostPost/index.tsx",
    "content": "import React from \"react\";\nimport {Text, TouchableOpacity, View} from \"react-native\";\nimport {styles} from \"./styles\";\nimport HeaderPost from \"../HeaderPost\";\nimport ToolBarPost from \"../ToolBarPost\";\n\nexport type repostPostProps = {\n    repostText: string;\n    repostAvatarUri: string;\n    repostUserName: string;\n    repostUserId: string;\n    repostVerified: boolean;\n    repostDate: string;\n    post: any\n}\n\nconst RepostPost = (props: repostPostProps) => {\n\n    const handleTextClick = () => {\n        console.log(\"Text\")\n    }\n\n    const handlePostClick = () => {\n        console.log(\"Post\")\n    }\n\n    return (\n        <View style={styles.container}>\n            {/*HEADER POST*/}\n            <HeaderPost avatarUri={props.repostAvatarUri} userName={props.repostUserName} postType={\"repost\"}\n                        verified={props.repostVerified} date={props.repostDate} userId={props.repostUserId} text={props.repostText}/>\n            {/*TEXT IMAGE AND TOOLBAR*/}\n            <View style={styles.postContent}>\n                {/*TEXT AND POST*/}\n                <View>\n                    {/*TEXT*/}\n                    <TouchableOpacity onPress={() => handleTextClick}>\n                        <Text style={styles.text}>{props.repostText}</Text>\n                    </TouchableOpacity>\n                    {/*POST*/}\n                    <TouchableOpacity style={styles.post} onPress={() => handlePostClick}>\n                        {props.post}\n                    </TouchableOpacity>\n                </View>\n                {/*TOOLBAR*/}\n                <View>\n                    <ToolBarPost postType={\"social\"} isLiked={false}/>\n                </View>\n            </View>\n        </View>\n    )\n}\n\nexport default RepostPost",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/SocialNetwork/RepostPost/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 117,
    "kind": "function",
    "name": "RepostPost",
    "memberof": "src/components/SocialNetwork/RepostPost/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/SocialNetwork/RepostPost/index.tsx~RepostPost",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/SocialNetwork/RepostPost/index.tsx",
    "importStyle": "RepostPost",
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 118,
    "kind": "file",
    "name": "src/components/SocialNetwork/ThreeDotsComponent/index.tsx",
    "content": "import React from \"react\";\nimport {StyleSheet, TouchableOpacity, View} from \"react-native\";\nimport OptionComponent from \"../OptionComponent\";\n\nexport default function ThreeDotsComponent() {\n\n    const buttonList = [\n        <OptionComponent type={\"like\"} key={0}/>,\n        <OptionComponent type={\"share\"} key={1}/>,\n        <OptionComponent type={\"add\"} key={2}/>,\n        <OptionComponent type={\"match\"} key={3}/>,\n        <OptionComponent type={\"report\"} key={4}/>,\n    ]\n\n    return (\n        <View style={styles.container}>\n            {buttonList.map((c) => {\n                return <TouchableOpacity style={styles.button} key={c.key}>{c}</TouchableOpacity>\n            })}\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        height: \"30%\",\n        width: \"85%\",\n        justifyContent: \"center\",\n        alignItems: \"flex-start\",\n        alignSelf: \"center\",\n        marginVertical: 20\n    },\n    button: {\n        width: \"100%\"\n    }\n})",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/SocialNetwork/ThreeDotsComponent/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 119,
    "kind": "function",
    "name": "ThreeDotsComponent",
    "memberof": "src/components/SocialNetwork/ThreeDotsComponent/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/SocialNetwork/ThreeDotsComponent/index.tsx~ThreeDotsComponent",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/SocialNetwork/ThreeDotsComponent/index.tsx",
    "importStyle": "ThreeDotsComponent",
    "description": "",
    "lineNumber": 5,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 120,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/components/SocialNetwork/ThreeDotsComponent/index.tsx",
    "static": true,
    "longname": "src/components/SocialNetwork/ThreeDotsComponent/index.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/components/SocialNetwork/ThreeDotsComponent/index.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 121,
    "kind": "file",
    "name": "src/components/SocialNetwork/ToolBarPainting/index.tsx",
    "content": "import React from \"react\";\nimport {TouchableOpacity, View} from \"react-native\";\nimport {AntDesign, Feather, FontAwesome} from \"@expo/vector-icons\";\nimport {styles} from \"./styles\";\n\n\nconst ToolBarPainting = () => {\n    return (\n        <View style={styles.iconContainer}>\n            {/*LIKE ICON*/}\n            <TouchableOpacity style={styles.icon} onPress={() => console.log(\"Like\")}>\n                <AntDesign name={\"heart\"} size={20} color={\"white\"}/>\n            </TouchableOpacity>\n            {/*SAVE ICON*/}\n            <TouchableOpacity style={styles.icon} onPress={() => console.log(\"Save\")}>\n                <FontAwesome name={\"bookmark\"} size={20} color={\"white\"}/>\n            </TouchableOpacity>\n            {/*SHARE ICON*/}\n            <TouchableOpacity style={styles.icon} onPress={() => console.log(\"Share\")}>\n                <Feather name={\"share\"} size={20} color={\"white\"}/>\n            </TouchableOpacity>\n        </View>\n    )\n}\n\nexport default ToolBarPainting",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/SocialNetwork/ToolBarPainting/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 122,
    "kind": "function",
    "name": "ToolBarPainting",
    "memberof": "src/components/SocialNetwork/ToolBarPainting/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/SocialNetwork/ToolBarPainting/index.tsx~ToolBarPainting",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/SocialNetwork/ToolBarPainting/index.tsx",
    "importStyle": "ToolBarPainting",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 123,
    "kind": "file",
    "name": "src/components/SocialNetwork/ToolBarPost/index.tsx",
    "content": "import React, {useState} from \"react\";\nimport {Text, TouchableOpacity, View} from \"react-native\";\nimport {AntDesign, Entypo, Feather, Fontisto} from \"@expo/vector-icons\";\nimport {styles} from \"./styles\";\nimport {useNavigation} from \"@react-navigation/native\";\n\nexport type toolBarProps = {\n    isLiked: boolean;\n    postType: string;\n}\n\nconst ToolBarPost = (props: toolBarProps) => {\n\n    const navigation = useNavigation()\n\n    const [isLiked, setIsLiked] = useState(props.isLiked)\n\n    const handleLikeClick = () => {\n        setIsLiked(!isLiked)\n    }\n\n    const handleCommentClick = () => {\n        // @ts-ignore\n        navigation.navigate(\"CommentsPage\")\n    }\n\n    return (\n        <View style={styles.container}>\n            {/*LIKES AND COMMENTS*/}\n            <View style={styles.leftIcons}>\n                {/*LIKES*/}\n                <View style={styles.textAndIcon}>\n                    {/*LIKES NUMBER*/}\n                    <Text style={styles.name}>73k</Text>\n                    {/*LIKES ICON*/}\n                    <TouchableOpacity style={styles.icon} onPress={() => handleLikeClick()}>\n                        {props.postType == \"social\" ? <AntDesign name={isLiked ? \"heart\" : \"hearto\"} size={25} color={isLiked ? \"red\" : \"white\"}/> :\n                            <Entypo name={\"arrow-bold-up\"} size={25} color={\"white\"}/>}\n                    </TouchableOpacity>\n                </View>\n                {/*COMMENTS*/}\n                <View style={styles.textAndIcon}>\n                    {/*NUMBER OF COMMENTS*/}\n                    <Text style={styles.name}>3074</Text>\n                    {/*COMMENT ICON*/}\n                    <TouchableOpacity style={styles.icon} onPress={() => handleCommentClick()}>\n                        {props.postType == \"social\" ? <Fontisto name={\"comment\"} size={25} color={\"white\"}/> :\n                            <Entypo name={\"arrow-bold-down\"} size={25} color={\"white\"}/>}\n                    </TouchableOpacity>\n                </View>\n                {/*REPOST*/}\n\n            </View>\n\n            <View style={styles.rightIcons}>\n                {/*REPOST ICON*/}\n                <TouchableOpacity style={styles.icon} onPress={() => console.log(\"Repost\")}>\n                    <Entypo name={\"forward\"} size={25} color={\"white\"}/>\n                </TouchableOpacity>\n                {/*SHARE BUTTON*/}\n                <TouchableOpacity style={styles.icon} onPress={() => console.log(\"Share\")}>\n                    <Feather name={\"share\"} size={25} color={\"white\"}/>\n                </TouchableOpacity>\n            </View>\n        </View>\n    )\n}\n\nexport default ToolBarPost",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/SocialNetwork/ToolBarPost/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 124,
    "kind": "function",
    "name": "ToolBarPost",
    "memberof": "src/components/SocialNetwork/ToolBarPost/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/SocialNetwork/ToolBarPost/index.tsx~ToolBarPost",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/SocialNetwork/ToolBarPost/index.tsx",
    "importStyle": "ToolBarPost",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 125,
    "kind": "file",
    "name": "src/components/SquareComponent/ArtistComponent.tsx",
    "content": "import React from 'react';\nimport {Image, Text, TouchableOpacity, View} from 'react-native';\nimport {useNavigation} from \"@react-navigation/native\";\nimport styles from \"./styles\"\nimport {LOREM} from \"../../services/constantes\";\n\n// PROPS\nexport type ArtistComponentProps = {\n    id: string,\n    title: string,\n    imageUri : string,\n}\n\n/**\n * Component used to display an artist with an image and his name\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=1uvt8qkC5FZjtlsEInLR3OhrN7S7jqdLr\" alt=\"ArtworkPage\" height=\"500\">\n * @param {ArtistComponentProps} props\n * @param {string} props.id - ID of the artist\n * @param {string} props.title - Name of the artist\n * @param {string} props.imageUri - URI of the artist's image\n * @constructor\n * @return ArtistComponent\n */\nexport default function ArtistComponent(props: ArtistComponentProps) {\n\n    const navigation = useNavigation()\n\n    // WHEN THE COMPONENT IS PRESSED\n    const onPressViewArtist = () => {\n        //@ts-ignore\n        navigation.navigate('ArtistNonUserPage', {\n            imageUri: props.imageUri,\n            information: LOREM,\n            artistName: props.title,\n            artistId: props.id,\n        })\n    }\n\n    return (\n        <TouchableOpacity onPress={onPressViewArtist}>\n            <View style={styles.container}>\n                {/*IMAGE*/}\n                <View style={styles.imageContainer}>\n                    <Image source={{uri: props.imageUri}} style={styles.image}/>\n                </View>\n                {/*ARTIST NAME*/}\n                <Text numberOfLines={1} style={styles.title}>{props.title}</Text>\n            </View>\n        </TouchableOpacity>\n    )\n}",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/SquareComponent/ArtistComponent.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 126,
    "kind": "function",
    "name": "ArtistComponent",
    "memberof": "src/components/SquareComponent/ArtistComponent.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/SquareComponent/ArtistComponent.tsx~ArtistComponent",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/SquareComponent/ArtistComponent.tsx",
    "importStyle": "ArtistComponent",
    "description": "Component used to display an artist with an image and his name\n\n<img src=\"https://drive.google.com/uc?export=view&id=1uvt8qkC5FZjtlsEInLR3OhrN7S7jqdLr\" alt=\"ArtworkPage\" height=\"500\">",
    "lineNumber": 25,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ArtistComponentProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.id",
        "description": "ID of the artist"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.title",
        "description": "Name of the artist"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.imageUri",
        "description": "URI of the artist's image"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "ArtistComponent"
    }
  },
  {
    "__docId__": 127,
    "kind": "file",
    "name": "src/components/SquareComponent/ListComponent.tsx",
    "content": "import React from 'react';\nimport {Animated, Text, TouchableOpacity, View} from 'react-native';\nimport {useNavigation} from \"@react-navigation/native\";\nimport {ListActions} from \"../../../types\";\nimport {useAuth} from \"../../contexts/Auth\";\nimport styles from \"./styles\";\nimport {useInteractions} from \"../../contexts/UserInteractions\";\n\n\n// PROPS\nexport type ListComponentProps = {\n    id: string,\n    title: string,\n    fourImages: [string],\n    action: ListActions,\n}\n\n/**\n * Component used to display a list with an image and its name\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=16v03MPIhiC6YE1GAaVGF-4pfavKDX078\" alt=\"ArtworkPage\" height=\"500\">\n * @param {ListComponentProps} props\n * @param {string} props.id - ID of the list\n * @param {string} props.title - Name of the list\n * @param {[string]} props.fourImages - URI of the list image\n * @param {ListActions} props.action - Type of action\n * @constructor\n * @return ListComponent\n */\nexport default function ListComponent(props: ListComponentProps) {\n\n    const userInt = useInteractions()\n    const navigation = useNavigation()\n    const auth = useAuth()\n\n    const onPressViewList = () => {\n        //@ts-ignore\n        navigation.navigate('ListContentPage', {\n            id: props.id,\n            name: props.title,\n        })\n    }\n\n    const onPressAddToList = () => {\n        userInt.addArtworksToList(props.id)\n        auth.setRefreshKey(auth.refreshKey+1)\n    }\n\n    return (\n        <TouchableOpacity onPress={props.action === ListActions.add ? onPressAddToList : onPressViewList}>\n            <View style={styles.container}>\n                {/*<View style={styles.imageContainer}>*/}\n                {/*    <Image source={{uri: props.fourImages[0]}} style={styles.image}/>*/}\n                {/*</View>*/}\n                {/*{props.fourImages.length > 3 ?*/}\n                {/*    <View style={styles.backgroundImageGrid}>*/}\n                {/*        {props.fourImages?.map((item) => {*/}\n                {/*            return <Image source={{uri: item}} style={styles.backgroundImageFour} key={item}/>*/}\n                {/*        })}*/}\n                {/*    </View> :*/}\n                {/*    <Animated.Image*/}\n                {/*        style={[styles.coverImage]}*/}\n                {/*        source={{uri: props.fourImages[0]}}*/}\n                {/*        resizeMode={'cover'}*/}\n                {/*    />}*/}\n\n                {/*IMAGE*/}\n                <Animated.Image\n                    style={[styles.coverImage]}\n                    source={!props.fourImages[0] ? require('../../../assets/images/placeholderList.png') : {uri: props.fourImages[0]}}\n                    //source={{uri: props.fourImages[0]}}\n                    resizeMode={'cover'}\n                />\n                {/*NAME OF THE LIST*/}\n                <Text numberOfLines={1} style={styles.title}>{props.title}</Text>\n            </View>\n        </TouchableOpacity>)\n}",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/SquareComponent/ListComponent.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 128,
    "kind": "function",
    "name": "ListComponent",
    "memberof": "src/components/SquareComponent/ListComponent.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/SquareComponent/ListComponent.tsx~ListComponent",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/SquareComponent/ListComponent.tsx",
    "importStyle": "ListComponent",
    "description": "Component used to display a list with an image and its name\n\n<img src=\"https://drive.google.com/uc?export=view&id=16v03MPIhiC6YE1GAaVGF-4pfavKDX078\" alt=\"ArtworkPage\" height=\"500\">",
    "lineNumber": 30,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ListComponentProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.id",
        "description": "ID of the list"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.title",
        "description": "Name of the list"
      },
      {
        "nullable": null,
        "types": [
          "[string]"
        ],
        "spread": false,
        "optional": false,
        "name": "props.fourImages",
        "description": "URI of the list image"
      },
      {
        "nullable": null,
        "types": [
          "ListActions"
        ],
        "spread": false,
        "optional": false,
        "name": "props.action",
        "description": "Type of action"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "ListComponent"
    }
  },
  {
    "__docId__": 129,
    "kind": "file",
    "name": "src/components/SquareComponentGrid/ArtistGrid/index.tsx",
    "content": "import React from 'react';\nimport {SafeAreaView, Text, TouchableOpacity, View} from 'react-native';\nimport {Artist, ArtistGridProps, SquareComponentType} from \"../../../../types\";\nimport SquareComponentGrid from \"../index\";\nimport styles from \"../styles\";\nimport {Entypo} from \"@expo/vector-icons\";\nimport {useNavigation} from \"@react-navigation/native\";\n\n/**\n * Component used to display a button + grid of artists\n * @param {ArtistGridProps} props\n * @param {string} props.title - Title of the grid\n * @param {[Artist] | []} props.data - An array of {@link Artist}\n * @param {void} [props.navigate] - Function used for navigation\n * @constructor\n * @return ArtistGrid\n */\nexport default function ArtistGrid(props: ArtistGridProps) {\n\n    const navigation = useNavigation()\n\n    return (\n        <SafeAreaView style={styles.container}>\n            {/*@ts-ignore*/}\n            <TouchableOpacity onPress={() => {props.navigate ? props.navigate() : navigation.navigate(\"DetailedScreenSquareComponents\", {title: props.title, data: props.data})}}>\n                <View style={styles.textAndChevron}>\n                    {/*TITLE*/}\n                    <Text style={styles.title}>{props.title}</Text>\n                    {/*CHEVRON*/}\n                    <Entypo name={\"chevron-right\"} size={30} color={\"white\"}/>\n                </View>\n            </TouchableOpacity>\n\n            <SquareComponentGrid title={props.title} data={props.data} type={SquareComponentType.artist}/>\n        </SafeAreaView>\n    )\n}",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/SquareComponentGrid/ArtistGrid/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 130,
    "kind": "function",
    "name": "ArtistGrid",
    "memberof": "src/components/SquareComponentGrid/ArtistGrid/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/SquareComponentGrid/ArtistGrid/index.tsx~ArtistGrid",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/SquareComponentGrid/ArtistGrid/index.tsx",
    "importStyle": "ArtistGrid",
    "description": "Component used to display a button + grid of artists",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ArtistGridProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.title",
        "description": "Title of the grid"
      },
      {
        "nullable": null,
        "types": [
          "[Artist] ",
          " []"
        ],
        "spread": false,
        "optional": false,
        "name": "props.data",
        "description": "An array of {@link Artist}"
      },
      {
        "nullable": null,
        "types": [
          "void"
        ],
        "spread": false,
        "optional": true,
        "name": "props.navigate",
        "description": "Function used for navigation"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "ArtistGrid"
    }
  },
  {
    "__docId__": 131,
    "kind": "file",
    "name": "src/components/SquareComponentGrid/ListGrid/index.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport {SafeAreaView, Text, TouchableOpacity, View} from 'react-native';\nimport {AntDesign, Entypo} from \"@expo/vector-icons\";\nimport {List, ListActions, SquareComponentType} from \"../../../../types\";\nimport SquareComponentGrid from \"../index\";\nimport styles from \"../styles\";\nimport {useNavigation} from \"@react-navigation/native\";\nimport SmallerSearchBar from \"../../Utilities/SearchBar/SmallerSearchBar\";\nimport Toast from \"react-native-toast-message\";\nimport NewListModal from \"../../Modals/NewListModal\";\nimport {useInteractions} from \"../../../contexts/UserInteractions\";\n\n// PROPS\nexport type ListGridProps = {\n    title: string,\n    data: List[],\n    action: ListActions,\n}\n\n/**\n * Component used to display a button + grid of lists\n * @param {ListGridProps} props\n * @param {string} props.title - Title of the grid\n * @param {[List] | []} props.data - An array of {@link List}\n * @param {ListActions} [props.action] - Type of action\n * @constructor\n * @return ListGridComponent\n */\nexport default function ListGridComponent(props: ListGridProps) {\n\n    const [modalNewList, setModalNewList] = useState(false)\n    const [clicked, setClicked] = useState(false)\n    const [searchPhrase, setSearchPhrase] = useState(\"\")\n    const [newData, setNewData] = useState<any>(props.data)\n\n    const navigation = useNavigation()\n    const userInt = useInteractions()\n\n    useEffect(() => {\n        setNewData(props.data)\n    }, [])\n\n    const onPressCreateNewList = () => {\n        setModalNewList(true)\n    }\n\n    const onPressSubmitNewList = (listName: string) => {\n        if (listName) {\n            userInt.createNewList(listName);\n            setModalNewList(false);\n        } else {\n            Toast.show({\n                    type: \"dayl\",\n                    props: {\n                        title: \"Failed\",\n                        text: \"No name was given to the list !\",\n                    }\n                }\n            )\n        }\n    }\n\n    useEffect(() => {\n        const temp = props.data.filter(item => item.title.includes(searchPhrase))\n        //@ts-ignore\n        setNewData(temp)\n    }, [searchPhrase])\n\n    return (\n        <SafeAreaView style={styles.container}>\n\n            {/*NEW LIST MODAL*/}\n            <NewListModal modalNewList={modalNewList} setModalNewList={setModalNewList}/>\n\n            <View style={props.action === ListActions.detailed ? styles.DetailedHeaderListGrid : styles.HeaderListGrid}>\n                {/*HEADER LISTS GRID*/}\n                <TouchableOpacity onPress={() => navigation.navigate('AllMyListsPage')}>\n                    <View style={styles.textAndChevron}>\n                        {/*TEXT*/}\n                        <Text\n                            style={props.action === ListActions.detailed ? styles.detailedTitle : styles.title}>{props.title}</Text>\n                        {/*CHEVRON*/}\n                        {props.action === ListActions.view &&\n                            <Entypo name={\"chevron-right\"} size={30} color={\"white\"}/>}\n\n                    </View>\n                </TouchableOpacity>\n\n                {/* PLUS BUTTON*/}\n                <View style={styles.plusButton}>\n                    <TouchableOpacity style={styles.plusButton} onPress={() => onPressCreateNewList()}>\n                        <AntDesign name={\"plus\"} size={props.action === ListActions.detailed ? 35 : 25}\n                                   color={\"white\"}/>\n                    </TouchableOpacity>\n                </View>\n\n            </View>\n            {props.action === ListActions.detailed &&\n                <SmallerSearchBar clicked={clicked} searchPhrase={searchPhrase} setSearchPhrase={setSearchPhrase}\n                                  setClicked={setClicked}/>}\n\n            <SquareComponentGrid title={props.title} data={searchPhrase === \"\" ? props.data : newData}\n                                 type={SquareComponentType.list}\n                                 action={props.action}/>\n        </SafeAreaView>\n    )\n}",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/SquareComponentGrid/ListGrid/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 132,
    "kind": "function",
    "name": "ListGridComponent",
    "memberof": "src/components/SquareComponentGrid/ListGrid/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/SquareComponentGrid/ListGrid/index.tsx~ListGridComponent",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/SquareComponentGrid/ListGrid/index.tsx",
    "importStyle": "ListGridComponent",
    "description": "Component used to display a button + grid of lists",
    "lineNumber": 29,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ListGridProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.title",
        "description": "Title of the grid"
      },
      {
        "nullable": null,
        "types": [
          "[List] ",
          " []"
        ],
        "spread": false,
        "optional": false,
        "name": "props.data",
        "description": "An array of {@link List}"
      },
      {
        "nullable": null,
        "types": [
          "ListActions"
        ],
        "spread": false,
        "optional": true,
        "name": "props.action",
        "description": "Type of action"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "ListGridComponent"
    }
  },
  {
    "__docId__": 133,
    "kind": "file",
    "name": "src/components/SquareComponentGrid/MyArtists/index.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {URL} from \"../../../services/constantes\";\nimport {Artist} from \"../../../../types\";\nimport {useAuth} from \"../../../contexts/Auth\";\nimport ArtistGrid from \"../ArtistGrid\";\nimport {Text, View} from \"react-native\";\nimport styles from \"../styles\";\nimport {useNavigation} from \"@react-navigation/native\";\n\n/**\n * Component used to display an {@link ArtistGrid} of the user's liked artists\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=1Pgk0bWTRAdnPszMAHLiKggq3S_6T4fzJ\" alt=\"ArtworkPage\" height=\"500\">\n * @constructor\n * @return ArtistGrid\n */\nexport default function MyLikedArtists() {\n\n    const [myLikedArtists, setMyLikedArtists] = useState<[Artist] | []>([]);\n    const auth = useAuth()\n    const navigation = useNavigation()\n\n    //API call (list of similar artist)\n    useEffect(() => {\n        setMyLikedArtists([])\n        if (auth.authData.artistLiked) {\n            auth.authData.artistLiked.forEach(artist => {\n                axios.get(URL + `artist/${artist}`).then((response) => {\n                    axios.get(URL + `paintingEntity/byArtist/${response.data.artistIdtfIntern}/0`).then((response2) => {\n\n                        // PARSING DATA\n                        if (response2.data[0].urlImage) {\n                            //@ts-ignore\n                            setMyLikedArtists(myLikedArtists => [...myLikedArtists, {\n                                id: response.data.artistIdtfIntern,\n                                title: response.data.artist_name_tot,\n                                imageUri: URL + `images/content/mini/${response.data.artistIdtfIntern}/${response2.data[0].urlImage}`\n                            }].slice(0, 4))\n                        } else {\n                            //@ts-ignore\n                            setMyLikedArtists(myLikedArtists => [...myLikedArtists, {\n                                id: response.data.artistIdtfIntern,\n                                title: response.data.artist_name_tot,\n                                imageUri: URL + `images/content/mini/${response.data.artistIdtfIntern}/${response2.data[1].urlImage}`\n                            }].slice(0, 4))\n                        }\n                    })\n                });\n            })\n        }\n    }, [auth.authData.artistLiked]);\n\n    //RETURN\n    return !auth.authData.artistLiked || auth.authData.artistLiked.length === 0  ? <View><Text style={styles.noLikedArtists}>No liked artists </Text></View> : (\n        <ArtistGrid title={\"My liked artists\"} data={myLikedArtists} navigate={() => navigation.navigate(\"AllMyArtistsPage\")}/>\n    )\n\n}\n\n\n\n\n\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/SquareComponentGrid/MyArtists/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 134,
    "kind": "function",
    "name": "MyLikedArtists",
    "memberof": "src/components/SquareComponentGrid/MyArtists/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/SquareComponentGrid/MyArtists/index.tsx~MyLikedArtists",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/SquareComponentGrid/MyArtists/index.tsx",
    "importStyle": "MyLikedArtists",
    "description": "Component used to display an {@link ArtistGrid} of the user's liked artists\n\n<img src=\"https://drive.google.com/uc?export=view&id=1Pgk0bWTRAdnPszMAHLiKggq3S_6T4fzJ\" alt=\"ArtworkPage\" height=\"500\">",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "ArtistGrid"
    },
    "params": []
  },
  {
    "__docId__": 135,
    "kind": "file",
    "name": "src/components/SquareComponentGrid/MyLists/index.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {URL} from \"../../../services/constantes\";\nimport {useAuth} from \"../../../contexts/Auth\";\nimport {List, ListActions} from \"../../../../types\";\nimport {Text, View} from 'react-native';\nimport ListGridComponent from \"../ListGrid\";\nimport styles from \"../../ArtworkCarouselDouble/styles\";\n\n// PROPS\nexport type MyListsComponentProps = {\n    action: ListActions\n}\n\n/**\n * Component used to display an {@link ListGridComponent} of the user's lists\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=1LZHELWGMb2z2E62Y6SaxzP0xm9vpvrcm\" alt=\"ArtworkPage\" height=\"500\">\n * @param {MyListsComponentProps} props\n * @param {ListActions} props.action - Type of action\n * @constructor\n * @return ListGridComponent\n */\nexport default function MyListsComponent(props: MyListsComponentProps) {\n\n    const auth = useAuth()\n\n    const [lists, setLists] = useState<[List] | []>([])\n\n    //API CALL (MY LISTS)\n    useEffect(() => {\n        axios.get(URL + `userLists/byUserId`, {params: {userId: auth.authData.id}}).then((response1) => {\n\n            const parsedData = response1.data.map((el: any) => {\n                return {\n                    id: el.id,\n                    fourImages: el.imageUrl === \"\" ? \"\" : [URL + `images/content/mini/${el.imageUrl}`],\n                    title: el.listName, action: props.action,\n                }\n            })\n            setLists(parsedData)\n\n            // for (let i = 0; i < response1.data.length; i++) {\n            //     // if (props.action === ListActions.add) {\n            //     //                 //@ts-ignore\n            //     //                 setLists(lists => [...lists, {\n            //     //                     id: response1.data[i].id,\n            //     //                     title: response1.data[i].listName,\n            //     //                     fourImages: \"fourImages\",\n            //     //                     action: ListActions.add,\n            //     //                     paintingId: props.paintingId\n            //     //                 }])\n            //     //             }\n            //     //             else\n            //     //             {\n            //     //                 //@ts-ignore\n            //     //                 setLists(lists => [...lists, {\n            //     //                     id: response1.data[i].id,\n            //     //                     title: response1.data[i].listName,\n            //     //                     fourImages: \"fourImages\",\n            //     //                     action: props.action,\n            //     //                 }])\n            //     //             }\n            //     // axios.get(URL + `userLists/detailByListId`, {params: {listId: response1.data[i].id}}).then((response2) => {\n            //     //\n            //     //     if (response1.data[i]) {\n            //     //\n            //     //         let fourImages : string[] = []\n            //     //         for (let j = 0; j < 4 && j < response2.data.listPaintings.length ; j++)\n            //     //         {\n            //     //             fourImages.push(URL + `images/content/mini/${response2.data.listPaintings[j].artist_idtf_intern}/${response2.data.listPaintings[j].generatedId}`)\n            //     //         }\n            //     //         //@ts-ignore\n            //     //         if (props.action === ListActions.add) {\n            //     //             //@ts-ignore\n            //     //             setLists(lists => [...lists, {\n            //     //                 id: response1.data[i].id,\n            //     //                 title: response1.data[i].listName,\n            //     //                 fourImages: fourImages,\n            //     //                 action: ListActions.add,\n            //     //                 paintingId: props.paintingId\n            //     //             }])\n            //     //         }\n            //     //         else\n            //     //         {\n            //     //             //@ts-ignore\n            //     //             setLists(lists => [...lists, {\n            //     //                 id: response1.data[i].id,\n            //     //                 title: response1.data[i].listName,\n            //     //                 fourImages: fourImages,\n            //     //                 action: props.action,\n            //     //             }])\n            //     //         }\n            //     //     }\n            //     // })\n            // }\n        });\n    }, [auth.authData.listIds]);\n\n    return !auth.authData.listIds || auth.authData.listIds.length === 0\n        ? <View><Text style={styles.noLikedArtworks}>No lists </Text></View>\n        : (<View style={{marginTop: 20}}>\n            <ListGridComponent title={\"My lists\"}\n                               data={props.action === ListActions.detailed || props.action === ListActions.add ? lists : lists.slice(0, 4)}\n                               action={props.action}/>\n        </View>)\n}\n\n\n\n\n\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/SquareComponentGrid/MyLists/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 136,
    "kind": "function",
    "name": "MyListsComponent",
    "memberof": "src/components/SquareComponentGrid/MyLists/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/SquareComponentGrid/MyLists/index.tsx~MyListsComponent",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/SquareComponentGrid/MyLists/index.tsx",
    "importStyle": "MyListsComponent",
    "description": "Component used to display an {@link ListGridComponent} of the user's lists\n\n<img src=\"https://drive.google.com/uc?export=view&id=1LZHELWGMb2z2E62Y6SaxzP0xm9vpvrcm\" alt=\"ArtworkPage\" height=\"500\">",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "MyListsComponentProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "ListActions"
        ],
        "spread": false,
        "optional": false,
        "name": "props.action",
        "description": "Type of action"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "ListGridComponent"
    }
  },
  {
    "__docId__": 137,
    "kind": "file",
    "name": "src/components/SquareComponentGrid/RandomArtists/index.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {URL} from \"../../../services/constantes\";\nimport {Artist} from \"../../../../types\";\nimport ArtistGrid from \"../ArtistGrid\";\n\n/**\n * Component used to display a grid of 4 random artists\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=1X0y_I7F3dmmADJcxTdgsCpijOvuY7dRt\" alt=\"ArtworkPage\" height=\"500\">\n * @constructor\n * @return ArtistGrid\n */\nexport default function RandomArtists() {\n\n    const [randomArtists, setRandomArtists] = useState<[Artist] | []>([]);\n\n    //API call (list of random artist)\n    useEffect(() => {\n        axios.get(URL + `paintingFront/randomNArtistsAndMPaintings`).then((response) => {\n\n            // PARSING DATA\n            const data = response.data.map((el: any) => {\n                return {\n                    id: el.second[0].artistId,\n                    imageUri: URL + `images/content/mini/${el.second[0].artistId}/${el.second[0].urlImage}`,\n                    title: el.second[0].artisteName,\n                }\n            })\n\n            setRandomArtists(data)\n        });\n    }, []);\n\n    return (\n        <ArtistGrid title={\"Random artists\"} data={randomArtists}/>\n    )\n}\n\n\n\n\n\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/SquareComponentGrid/RandomArtists/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 138,
    "kind": "function",
    "name": "RandomArtists",
    "memberof": "src/components/SquareComponentGrid/RandomArtists/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/SquareComponentGrid/RandomArtists/index.tsx~RandomArtists",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/SquareComponentGrid/RandomArtists/index.tsx",
    "importStyle": "RandomArtists",
    "description": "Component used to display a grid of 4 random artists\n\n<img src=\"https://drive.google.com/uc?export=view&id=1X0y_I7F3dmmADJcxTdgsCpijOvuY7dRt\" alt=\"ArtworkPage\" height=\"500\">",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "ArtistGrid"
    },
    "params": []
  },
  {
    "__docId__": 139,
    "kind": "file",
    "name": "src/components/SquareComponentGrid/SimilarArtists/index.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport axios from \"axios\";\nimport {URL} from \"../../../services/constantes\";\nimport {Artist} from \"../../../../types\";\nimport ArtistGrid from \"../ArtistGrid\";\n\n// PROPS\nexport type SimilarArtistsProps = {\n    artistId: string,\n}\n\n/**\n * Component used to display a grid of 4 similar artists\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=1tqlaBZP2Zc17YwnecW01Ftg8_7Igb26W\" alt=\"ArtworkPage\" height=\"500\">\n * @param {SimilarArtistsProps} props\n * @param {string} props.artistId - ID of the artist\n * @constructor\n * @return ArtistGrid\n * */\nexport default function SimilarArtists(props: SimilarArtistsProps) {\n\n    const [listSimilarArtist, setListSimilarArtist] = useState<[Artist] | []>([]);\n\n    //API CALL (list of similar artist)\n    useEffect(() => {\n\n        axios.get(URL + `similarArtists/findByArtistId/${props.artistId}/?numberOfArtists=49`).then((response) => {\n\n            // PARSING DATA\n            let data = response.data.filter(function (el: any) {\n                return el.artistDisplayDTO != null;\n            }).map(function (el: any) {\n                return {\n                    id: el.artistDisplayDTO.functionalId,\n                    imageUri: URL + `images/content/mini/${el.artistDisplayDTO.functionalId}/${el.artistDisplayDTO.backgroundImage}`,\n                    title: el.artistDisplayDTO.name\n                }\n            })\n            const fourArtist = data.slice(1, 5)\n\n            setListSimilarArtist(fourArtist)\n        });\n    }, [props.artistId]);\n\n    return (\n        <ArtistGrid title={\"Similar artists\"} data={listSimilarArtist}/>\n    )\n}\n\n\n\n\n\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/SquareComponentGrid/SimilarArtists/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 140,
    "kind": "function",
    "name": "SimilarArtists",
    "memberof": "src/components/SquareComponentGrid/SimilarArtists/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/SquareComponentGrid/SimilarArtists/index.tsx~SimilarArtists",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/SquareComponentGrid/SimilarArtists/index.tsx",
    "importStyle": "SimilarArtists",
    "description": "Component used to display a grid of 4 similar artists\n\n<img src=\"https://drive.google.com/uc?export=view&id=1tqlaBZP2Zc17YwnecW01Ftg8_7Igb26W\" alt=\"ArtworkPage\" height=\"500\">",
    "lineNumber": 21,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "SimilarArtistsProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.artistId",
        "description": "ID of the artist"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "ArtistGrid"
    }
  },
  {
    "__docId__": 141,
    "kind": "file",
    "name": "src/components/SquareComponentGrid/index.tsx",
    "content": "import React from 'react';\nimport {SafeAreaView, View} from 'react-native';\nimport {Artist, List, ListActions, SquareComponentType} from \"../../../types\";\nimport styles from \"./styles\"\nimport ListComponent from \"../SquareComponent/ListComponent\";\nimport ArtistComponent from \"../SquareComponent/ArtistComponent\";\n\n// PROPS\nexport type SquareComponentGridProps = {\n    title: string,\n    data: Artist[] | List[] | [],\n    type: SquareComponentType,\n    action?: ListActions,\n}\n\n/**\n * Component used to display a square component according to its {@link SquareComponentType}\n * @param {SquareComponentGridProps} props\n * @param {string} props.title - Title of the grid\n * @param {Artist[] | List[] | []} props.data - Array of {@link Artist} or {@link List}\n * @param {SquareComponentType} props.type - Type of {@link SquareComponentType}\n * @param {ListActions} [props.action] - Type of action\n * @constructor\n * @return SquareComponentGrid\n */\nexport default function SquareComponentGrid(props: SquareComponentGridProps) {\n\n    return (\n        <SafeAreaView style={styles.container}>\n            <View style={styles.grid}>\n                {props.type === SquareComponentType.list ? props.data.map((item) => {\n                    //@ts-ignore\n                    return (<ListComponent id={item.id} title={item.title} fourImages={item.fourImages} action={props.action} key={item.id}/>)\n                }) : props.data.map((item) => {\n                    //@ts-ignore\n                    return <ArtistComponent id={item.id} title={item.title} imageUri={item.imageUri} key={item.id}/>\n                })}\n            </View>\n        </SafeAreaView>\n    )\n}",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/SquareComponentGrid/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 142,
    "kind": "function",
    "name": "SquareComponentGrid",
    "memberof": "src/components/SquareComponentGrid/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/SquareComponentGrid/index.tsx~SquareComponentGrid",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/SquareComponentGrid/index.tsx",
    "importStyle": "SquareComponentGrid",
    "description": "Component used to display a square component according to its {@link SquareComponentType}",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "SquareComponentGridProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.title",
        "description": "Title of the grid"
      },
      {
        "nullable": null,
        "types": [
          "Artist[] ",
          " List[] ",
          " []"
        ],
        "spread": false,
        "optional": false,
        "name": "props.data",
        "description": "Array of {@link Artist} or {@link List}"
      },
      {
        "nullable": null,
        "types": [
          "SquareComponentType"
        ],
        "spread": false,
        "optional": false,
        "name": "props.type",
        "description": "Type of {@link SquareComponentType}"
      },
      {
        "nullable": null,
        "types": [
          "ListActions"
        ],
        "spread": false,
        "optional": true,
        "name": "props.action",
        "description": "Type of action"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "SquareComponentGrid"
    }
  },
  {
    "__docId__": 143,
    "kind": "file",
    "name": "src/components/UserData/index.tsx",
    "content": "import React, {useEffect, useState} from 'react';\nimport {Text, TouchableOpacity, View} from \"react-native\";\nimport styles from \"./styles\";\nimport axios from \"axios\";\nimport {useAuth} from \"../../contexts/Auth\";\nimport {URL} from \"../../services/constantes\";\nimport {Stats} from \"../../../types\";\nimport {useNavigation} from \"@react-navigation/native\";\n\n/**\n * Component displaying the user's data (FOLLOWING/FOLLOWERS/CONNECTIONS) in {@link MyProfile}\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=1YGroO4InY45ho6io6yUwwjcPTKjMZPE2\" alt=\"ArtworkPage\" height=\"100\">\n * @constructor\n * @return UserData\n */\nexport default function UserData() {\n\n    const auth = useAuth()\n    const navigation = useNavigation()\n    const [stats, setStats] = useState<Stats>({numberFollowers: 0, numberFollowing: 0, numberOfDrafts: 0});\n\n    // API CALL TO GET THE STATS OF THE USER\n    useEffect(() => {\n        axios\n            .get(URL + `users/statistics?userId=${auth.authData.id}`\n            )\n            .then((response) => {\n                setStats(response.data)\n            });\n\n    }, [auth.authData.id]);\n\n    return (\n        <View style={styles.container}>\n            {/*USER FOLLOWING*/}\n            <TouchableOpacity style={styles.dataContainer} onPress={() => navigation.navigate(\"MyFollowedPage\")}>\n                <Text style={styles.stats}>{stats.numberFollowing}</Text>\n                <Text style={styles.subtitle}>Following</Text>\n            </TouchableOpacity>\n            {/*USER FOLLOWERS*/}\n            <View style={styles.dataContainer}>\n                <Text style={styles.stats}>{stats.numberFollowers}</Text>\n                <Text style={styles.subtitle}>Followers</Text>\n            </View>\n            {/*USER CONNECTIONS*/}\n            <View style={styles.dataContainer}>\n                <Text style={styles.stats}>0</Text>\n                <Text style={styles.subtitle}>Connections</Text>\n            </View>\n        </View>\n    )\n}",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/UserData/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 144,
    "kind": "function",
    "name": "UserData",
    "memberof": "src/components/UserData/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/UserData/index.tsx~UserData",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/UserData/index.tsx",
    "importStyle": "UserData",
    "description": "Component displaying the user's data (FOLLOWING/FOLLOWERS/CONNECTIONS) in {@link MyProfile}\n\n<img src=\"https://drive.google.com/uc?export=view&id=1YGroO4InY45ho6io6yUwwjcPTKjMZPE2\" alt=\"ArtworkPage\" height=\"100\">",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "UserData"
    },
    "params": []
  },
  {
    "__docId__": 145,
    "kind": "file",
    "name": "src/components/Utilities/BackButton/index.tsx",
    "content": "import React from 'react';\nimport {TouchableOpacity} from 'react-native';\nimport styles from \"./styles\";\nimport {Entypo} from \"@expo/vector-icons\";\nimport {useNavigation} from \"@react-navigation/native\";\nimport {useAuth} from \"../../../contexts/Auth\";\n\n/**\n * Component displaying a Back Button, used to go back to the previous page\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=1j6HDoX10oAeKhhDfwYUGs3Ns3B63-5Yp\" alt=\"ArtworkPage\" height=\"100\">\n * @constructor\n * @return TouchableOpacity\n */\nexport default function BackButtonComponent() {\n\n    const navigation = useNavigation()\n\n    const auth = useAuth()\n\n    return (\n        <TouchableOpacity style={styles.backButton} onPress={() => {\n            auth.reloadData();\n            navigation.goBack()\n        }}>\n            <Entypo name={\"chevron-left\"} size={30} color={\"white\"}/>\n        </TouchableOpacity>\n    )\n}",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/Utilities/BackButton/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 146,
    "kind": "function",
    "name": "BackButtonComponent",
    "memberof": "src/components/Utilities/BackButton/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Utilities/BackButton/index.tsx~BackButtonComponent",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/Utilities/BackButton/index.tsx",
    "importStyle": "BackButtonComponent",
    "description": "Component displaying a Back Button, used to go back to the previous page\n\n<img src=\"https://drive.google.com/uc?export=view&id=1j6HDoX10oAeKhhDfwYUGs3Ns3B63-5Yp\" alt=\"ArtworkPage\" height=\"100\">",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "TouchableOpacity"
    },
    "params": []
  },
  {
    "__docId__": 147,
    "kind": "file",
    "name": "src/components/Utilities/BiographyInput/index.tsx",
    "content": "import React, {useEffect, useState} from \"react\";\nimport {Text, TextInput, View} from \"react-native\";\nimport {Entypo} from \"@expo/vector-icons\";\nimport {styles} from \"./styles\";\n\n// PROPS\nexport type BiographyInputProps = {\n    credentialsNeeded: string,\n    value: string,\n    setValue : any,\n}\n\n/**\n * Component displaying an input field for the user to insert his bio in {@link EditProfile} page\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=1PEq6_DIXaVY55LWLF3UDYvXtOmNp6_uH\" alt=\"ArtworkPage\" height=\"100\">\n * @param {BiographyInputProps} props\n * @param {string} props.credentialsNeeded - Title of the credential field\n * @param {string} props.value - Value of the text input\n * @param {any} props.setValue - Function used to set the value\n * @constructor\n * @return BiographyInput\n */\nexport default function BiographyInput(props: BiographyInputProps) {\n\n    const [clicked, setClicked] = useState(false)\n    const [numberOfChar, setNumberOfChar] = useState(props.value.length)\n\n    useEffect(() => {\n        setNumberOfChar(props.value.length)\n    }, [props.value])\n\n    return (\n        <View style={styles.container}>\n            <Text style={styles.text}>{props.credentialsNeeded}</Text>\n            <View style={styles.searchBar__unclicked}>\n\n                {/* Input field */}\n                <TextInput\n                    onEndEditing={() => setClicked(false)}\n                    style={styles.input}\n                    value={props.value}\n                    onChangeText={props.setValue}\n                    maxLength={250}\n                    multiline={true}\n\n                    onFocus={() => {\n                        setClicked(true);\n                    }}\n                />\n\n                <View style={styles.rightContainer}>\n                    {/* cross Icon, depending on whether the search bar is clicked or not */}\n                    {clicked && (<Entypo name=\"cross\" size={20} color=\"black\" style={{marginRight: 20}} onPress={() => {\n                        props.setValue(\"\")\n                    }}/>)}\n                </View>\n\n            </View>\n\n            {/*NUMBER OF CHARS LEFT FOR THE BIO*/}\n            <Text style={{\n                color: \"white\",\n                textAlign: \"right\",\n                flex: 1,\n                alignSelf: \"flex-end\",\n                marginTop: 10,\n                marginRight: 20\n            }}>{numberOfChar}/250</Text>\n        </View>\n    )\n}\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/Utilities/BiographyInput/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 148,
    "kind": "function",
    "name": "BiographyInput",
    "memberof": "src/components/Utilities/BiographyInput/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Utilities/BiographyInput/index.tsx~BiographyInput",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/Utilities/BiographyInput/index.tsx",
    "importStyle": "BiographyInput",
    "description": "Component displaying an input field for the user to insert his bio in {@link EditProfile} page\n\n<img src=\"https://drive.google.com/uc?export=view&id=1PEq6_DIXaVY55LWLF3UDYvXtOmNp6_uH\" alt=\"ArtworkPage\" height=\"100\">",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "BiographyInputProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.credentialsNeeded",
        "description": "Title of the credential field"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.value",
        "description": "Value of the text input"
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "props.setValue",
        "description": "Function used to set the value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "BiographyInput"
    }
  },
  {
    "__docId__": 149,
    "kind": "file",
    "name": "src/components/Utilities/CredentialsInput/index.tsx",
    "content": "import React, {useState} from \"react\";\nimport {Text, TextInput, View} from \"react-native\";\nimport {AntDesign, Entypo} from \"@expo/vector-icons\";\nimport {styles} from \"./styles\";\n\n// PROPS\nexport type CredentialsInputProps = {\n    credentialsNeeded: string,\n    value: string,\n    setValue : any,\n}\n\n/**\n * Component displaying an input field for the user to insert his credentials in {@link Login} and {@link SignUp} pages\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=1IO8nhdGFahbBJki-0lGEoZY8lRuYdWDP\" alt=\"ArtworkPage\" height=\"100\">\n * @param {CredentialsInputProps} props\n * @param {string} props.credentialsNeeded - Title of the credential field\n * @param {string} props.value - Value of the text input\n * @param {any} props.setValue - Function used to set the value\n * @constructor\n * @return CredentialsInputComponent\n */\nexport default function CredentialsInputComponent(props: CredentialsInputProps) {\n\n    const [clicked, setClicked] = useState(false)\n    const [hideField, setHideField] = useState(props.credentialsNeeded === \"Password\" || props.credentialsNeeded === \"Confirm password\")\n\n    return (\n        <View style={styles.container}>\n            {/*TITLE*/}\n            <Text style={styles.text}>{props.credentialsNeeded}</Text>\n\n            <View style={styles.searchBar__unclicked}>\n                {/* Input field */}\n                <TextInput\n                    onEndEditing={() => setClicked(false)}\n                    secureTextEntry={hideField}\n                    style={styles.input}\n                    value={props.value}\n                    onChangeText={props.setValue}\n                    onFocus={() => {\n                        setClicked(true);\n                    }}\n                />\n                <View style={styles.rightContainer}>\n                    {/* cross Icon, depending on whether the search bar is clicked or not */}\n                    {clicked && (<Entypo name=\"cross\" size={20} color=\"black\" style={{marginRight: 20}} onPress={() => {\n                        props.setValue(\"\")\n                    }}/>)}\n                    {(props.credentialsNeeded === \"Password\" || props.credentialsNeeded === \"Confirm password\") &&\n                        <AntDesign name={\"eye\"} size={20} onPress={() => setHideField(!hideField)}/>}\n                </View>\n            </View>\n        </View>\n    )\n}\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/Utilities/CredentialsInput/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 150,
    "kind": "function",
    "name": "CredentialsInputComponent",
    "memberof": "src/components/Utilities/CredentialsInput/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Utilities/CredentialsInput/index.tsx~CredentialsInputComponent",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/Utilities/CredentialsInput/index.tsx",
    "importStyle": "CredentialsInputComponent",
    "description": "Component displaying an input field for the user to insert his credentials in {@link Login} and {@link SignUp} pages\n\n<img src=\"https://drive.google.com/uc?export=view&id=1IO8nhdGFahbBJki-0lGEoZY8lRuYdWDP\" alt=\"ArtworkPage\" height=\"100\">",
    "lineNumber": 24,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "CredentialsInputProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.credentialsNeeded",
        "description": "Title of the credential field"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.value",
        "description": "Value of the text input"
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "props.setValue",
        "description": "Function used to set the value"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "CredentialsInputComponent"
    }
  },
  {
    "__docId__": 151,
    "kind": "file",
    "name": "src/components/Utilities/EditProfileInput/index.tsx",
    "content": "import React, {useState} from \"react\";\nimport {Text, TextInput, View} from \"react-native\";\nimport {Entypo} from \"@expo/vector-icons\";\nimport {styles} from \"./styles\";\n\n// PROPS\nexport type EditProfileInputProps = {\n    credentialsNeeded: string,\n    value: string,\n    setValue : any,\n    placeholder: string,\n}\n\n/**\n * Component displaying an input field for the user to insert his credentials in {@link EditProfile} page\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=1a6PLfPkQBZdoJhF0VNDoFoea7Hgt_RyJ\" alt=\"ArtworkPage\" height=\"100\">\n * @param {EditProfileInputProps} props\n * @param {string} props.credentialsNeeded - Title of the credential field\n * @param {string} props.value - Value of the text input\n * @param {any} props.setValue - Function used to set the value\n * @param {string} props.placeholder - Default placeholder for the field\n * @constructor\n * @return EditProfileInput\n */\nexport default function EditProfileInput(props: EditProfileInputProps) {\n\n    const [clicked, setClicked] = useState(false)\n\n    return (\n        <View style={styles.container}>\n            <Text style={styles.text}>{props.credentialsNeeded}</Text>\n            <View style={styles.searchBar__unclicked}>\n                {/* Input field */}\n                <TextInput style={styles.input} value={props.value} onChangeText={props.setValue}\n                           placeholderTextColor={\"black\"} defaultValue={props.placeholder}\n                           onEndEditing={() => setClicked(false)} onFocus={() => {\n                    setClicked(true)\n                }}/>\n                {/* cross Icon, depending on whether the search bar is clicked or not */}\n                {clicked && (<Entypo name=\"cross\" size={20} color=\"black\" style={{padding: 1}} onPress={() => {\n                    props.setValue(\"\")\n                }}/>)}\n            </View>\n        </View>\n    )\n}",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/Utilities/EditProfileInput/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 152,
    "kind": "function",
    "name": "EditProfileInput",
    "memberof": "src/components/Utilities/EditProfileInput/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Utilities/EditProfileInput/index.tsx~EditProfileInput",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/Utilities/EditProfileInput/index.tsx",
    "importStyle": "EditProfileInput",
    "description": "Component displaying an input field for the user to insert his credentials in {@link EditProfile} page\n\n<img src=\"https://drive.google.com/uc?export=view&id=1a6PLfPkQBZdoJhF0VNDoFoea7Hgt_RyJ\" alt=\"ArtworkPage\" height=\"100\">",
    "lineNumber": 26,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "EditProfileInputProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.credentialsNeeded",
        "description": "Title of the credential field"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.value",
        "description": "Value of the text input"
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "props.setValue",
        "description": "Function used to set the value"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.placeholder",
        "description": "Default placeholder for the field"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "EditProfileInput"
    }
  },
  {
    "__docId__": 153,
    "kind": "file",
    "name": "src/components/Utilities/LoadingScreen/index.tsx",
    "content": "import React from 'react';\nimport {ActivityIndicator, View} from 'react-native';\n\nexport const Index = () => {\n    return (\n        <View\n            style={{\n                flex: 1,\n                justifyContent: 'center',\n            }}>\n            <ActivityIndicator color={'#000'} animating={true} size=\"small\" />\n        </View>\n    );\n};\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/Utilities/LoadingScreen/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 154,
    "kind": "function",
    "name": "Index",
    "memberof": "src/components/Utilities/LoadingScreen/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Utilities/LoadingScreen/index.tsx~Index",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/Utilities/LoadingScreen/index.tsx",
    "importStyle": "{Index}",
    "description": null,
    "lineNumber": 4,
    "undocument": true,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 155,
    "kind": "file",
    "name": "src/components/Utilities/NewSearchBar/index.tsx",
    "content": "import React, {useState} from \"react\";\nimport {Keyboard, TextInput, TouchableOpacity, View} from \"react-native\";\nimport {styles} from \"./styles\";\nimport {Entypo, Feather, Ionicons} from \"@expo/vector-icons\";\nimport FilterModal from \"../../FilterModal\";\nimport ModalMatchingImage from \"../../Modals/MatchingImage\";\n\n// PROPS\nexport type SearchBarProps = {\n    clicked: boolean,\n    searchPhrase: string,\n    setSearchPhrase: any,\n    setClicked: any,\n    filter: {\n        styleFilter: string,\n        genreFilter: string,\n        nationalityFilter: string\n    },\n    setFilter(filter: {\n        styleFilter: string,\n        genreFilter: string,\n        nationalityFilter: string\n    }): void\n}\n\n/**\n * Component displaying a searchBar used in {@link ExplorePage}\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=10adsPmFxl7T0smH3oiT75BiJSEAvTChV\" alt=\"ArtworkPage\" height=\"100\">\n * @param {SearchBarProps} props\n * @param {boolean} props.clicked - Boolean checking if the searchbar is clicked\n * @param {string} props.searchPhrase - SearchPhrase text in the searchBar\n * @param {any} props.setSearchPhrase - Function to set the searchPhrase\n * @param {any} props.setClicked - Function to set {props.clicked}\n * @param {Object} props.filter - Object containing the filters\n * @param {string} props.filter.styleFilter - Style filter\n * @param {string} props.filter.genreFilter - Genre filter\n * @param {string} props.filter.nationalityFilter - Nationality filter\n * @param {Function} props.filter - Function to set the filters\n * @param {string} props.setFilter.styleFilter - Set style filter\n * @param {string} props.setFilter.genreFilter - Set genre filter\n * @param {string} props.setFilter.nationalityFilter - Set nationality filter\n * @constructor\n * @return NewSearchBar\n */\nexport default function NewSearchBar(props: SearchBarProps) {\n\n    const [showFilter, setShowFilter] = useState<boolean>(false)\n\n    return (\n        <View style={{\n            flexDirection: \"row\",\n            alignSelf: \"center\",\n            width: '100%',\n            alignItems: \"center\",\n            justifyContent: \"center\"\n        }}>\n            {(props.clicked || props.searchPhrase != \"\" || props.filter.styleFilter !== \"\" || props.filter.genreFilter !== \"\" || props.filter.nationalityFilter !== \"\") &&\n                <TouchableOpacity onPress={() => {\n                    Keyboard.dismiss();\n                    props.setClicked(false);\n                    props.setFilter({styleFilter: \"\", genreFilter: \"\", nationalityFilter: \"\"});\n                    props.setSearchPhrase(\"\");\n                }}><Entypo name={\"chevron-left\"} color={\"white\"} size={35}/></TouchableOpacity>}\n            <View\n                style={props.clicked || props.searchPhrase != \"\" || props.filter.styleFilter !== \"\" || props.filter.genreFilter !== \"\" || props.filter.nationalityFilter !== \"\" ? styles.container__Clicked : styles.container}>\n\n                <Feather name=\"search\" color=\"black\" style={styles.searchIcon}/>\n                <TextInput style={styles.textInput} placeholder=\"Artworks, artists, keywords\"\n                           placeholderTextColor={\"black\"} value={props.searchPhrase}\n                           onChangeText={props.setSearchPhrase} onFocus={() => {\n                    props.setClicked(true)\n                }}>\n                </TextInput>\n                <FilterModal filter={props.filter} setFilter={props.setFilter} isModalVisible={showFilter}\n                             setModalVisible={setShowFilter}/>\n                <View style={styles.rightContainer}>\n                    <ModalMatchingImage/>\n                    <Ionicons name={\"filter-outline\"} size={25} style={styles.icon}\n                              onPress={() => setShowFilter(!showFilter)}/>\n                </View>\n            </View>\n        </View>\n    )\n}\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/Utilities/NewSearchBar/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 156,
    "kind": "function",
    "name": "NewSearchBar",
    "memberof": "src/components/Utilities/NewSearchBar/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Utilities/NewSearchBar/index.tsx~NewSearchBar",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/Utilities/NewSearchBar/index.tsx",
    "importStyle": "NewSearchBar",
    "description": "Component displaying a searchBar used in {@link ExplorePage}\n\n<img src=\"https://drive.google.com/uc?export=view&id=10adsPmFxl7T0smH3oiT75BiJSEAvTChV\" alt=\"ArtworkPage\" height=\"100\">",
    "lineNumber": 46,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "SearchBarProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "props.clicked",
        "description": "Boolean checking if the searchbar is clicked"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.searchPhrase",
        "description": "SearchPhrase text in the searchBar"
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "props.setSearchPhrase",
        "description": "Function to set the searchPhrase"
      },
      {
        "nullable": null,
        "types": [
          "any"
        ],
        "spread": false,
        "optional": false,
        "name": "props.setClicked",
        "description": "Function to set {props.clicked}"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "props.filter",
        "description": "Object containing the filters"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.filter.styleFilter",
        "description": "Style filter"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.filter.genreFilter",
        "description": "Genre filter"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.filter.nationalityFilter",
        "description": "Nationality filter"
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "props.filter",
        "description": "Function to set the filters"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.setFilter.styleFilter",
        "description": "Set style filter"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.setFilter.genreFilter",
        "description": "Set genre filter"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.setFilter.nationalityFilter",
        "description": "Set nationality filter"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "NewSearchBar"
    }
  },
  {
    "__docId__": 157,
    "kind": "file",
    "name": "src/components/Utilities/OnClickImage/index.tsx",
    "content": "import React from 'react';\nimport {StatusBar, Text, TouchableOpacity, View} from 'react-native';\nimport styles from \"./styles\";\nimport {Entypo} from \"@expo/vector-icons\";\nimport ImageViewer from 'react-native-image-zoom-viewer';\nimport Modal from \"react-native-modal\";\nimport {onClickImageProps} from \"../../../../types\";\n\n/**\n * Component displaying a modal for showing an image in fullscreen\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=10QiizGTQZOLSibKi2GUtNz7XKO7K0qf-\" alt=\"ArtworkPage\" height=\"500\">\n * @param {onClickImageProps} props\n * @param {string} props.imageUri - URI of the image\n * @param {string} props.title - Title of the image\n * @param {boolean} props.onClickImage - Visibility of the modal\n * @param {void} props.setOnClickImage - Toggles the visibility of the modal\n * @param {string} [props.date] - Date of the artwork\n * @param {string} [props.artistName] - Name of the artist\n * @constructor\n * @return Modal\n */\nexport default function OnClickImageComponent(props: onClickImageProps) {\n\n    const renderFooter = () => {\n        return (\n            <View style={styles.infoContainer}>\n                <Text style={styles.title}>{props.title}</Text>\n                {props.artistName && <Text style={styles.subtitle}>{props.artistName}</Text>}\n                {props.date && <Text style={styles.date}>{props.date}</Text>}\n            </View>\n        )\n    }\n\n    return (\n        <Modal animationIn={\"fadeIn\"} style={styles.modal} backdropOpacity={0} isVisible={props.onClickImage}\n               onBackButtonPress={() => {\n                   props.setOnClickImage(!props.onClickImage)\n               }} statusBarTranslucent={true}>\n            <StatusBar backgroundColor={\"black\"} showHideTransition={\"none\"}/>\n\n            {/*IMAGE VIEWER*/}\n            <ImageViewer enableSwipeDown={true} onSwipeDown={() => props.setOnClickImage(false)} swipeDownThreshold={20}\n                         style={styles.zoomableView} imageUrls={[{url: props.imageUri.replace('/mini', '')}]}\n                         renderIndicator={() => (<View></View>)} footerContainerStyle={styles.infoContainer}\n                         renderFooter={renderFooter}/>\n\n            {/*BACK BUTTON*/}\n            <TouchableOpacity style={styles.closeButton} onPress={() => props.setOnClickImage(!props.onClickImage)}>\n                <Entypo name={\"cross\"} size={30} color={\"white\"}/>\n            </TouchableOpacity>\n        </Modal>\n    )\n}\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/Utilities/OnClickImage/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 158,
    "kind": "function",
    "name": "OnClickImageComponent",
    "memberof": "src/components/Utilities/OnClickImage/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Utilities/OnClickImage/index.tsx~OnClickImageComponent",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/Utilities/OnClickImage/index.tsx",
    "importStyle": "OnClickImageComponent",
    "description": "Component displaying a modal for showing an image in fullscreen\n\n<img src=\"https://drive.google.com/uc?export=view&id=10QiizGTQZOLSibKi2GUtNz7XKO7K0qf-\" alt=\"ArtworkPage\" height=\"500\">",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "onClickImageProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.imageUri",
        "description": "URI of the image"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.title",
        "description": "Title of the image"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "props.onClickImage",
        "description": "Visibility of the modal"
      },
      {
        "nullable": null,
        "types": [
          "void"
        ],
        "spread": false,
        "optional": false,
        "name": "props.setOnClickImage",
        "description": "Toggles the visibility of the modal"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "props.date",
        "description": "Date of the artwork"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "props.artistName",
        "description": "Name of the artist"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "Modal"
    }
  },
  {
    "__docId__": 159,
    "kind": "file",
    "name": "src/components/Utilities/SearchBar/SmallerSearchBar.tsx",
    "content": "import React from \"react\";\nimport {Button, Keyboard, StyleSheet, TextInput, View} from \"react-native\";\nimport {Entypo, Feather} from \"@expo/vector-icons\";\n\nexport type SmallerSmallerSearchBarProps = {\n    clicked: boolean, searchPhrase: string, setSearchPhrase: any, setClicked: any\n}\n\nconst SmallerSearchBar = (props: SmallerSmallerSearchBarProps) => {\n\n\n\n\n\n    return (<View style={styles.container}>\n        <View\n            style={props.clicked ? styles.SmallerSearchBar__clicked : styles.SmallerSearchBar__unclicked}\n        >\n            {/* search Icon */}\n            <Feather\n                name=\"search\"\n                size={20}\n                color=\"black\"\n                style={{marginLeft: 1}}\n            />\n            {/* Input field */}\n            <TextInput\n                style={styles.input}\n                placeholder=\"Search\"\n                placeholderTextColor={\"black\"}\n                value={props.searchPhrase}\n                onChangeText={props.setSearchPhrase}\n                onFocus={() => {\n                    props.setClicked(true);\n                }}/>\n\n\n            {/* cross Icon, depending on whether the search bar is clicked or not */}\n            {props.clicked && (<Entypo name=\"cross\" size={20} color=\"black\" style={{padding: 1}} onPress={() => {\n                props.setSearchPhrase(\"\")\n            }}/>)}\n        </View>\n        {/* cancel button, depending on whether the search bar is clicked or not */}\n        {props.clicked && (<View>\n            <View style={styles.button}>\n                <Button\n                    title=\"Cancel\"\n                    onPress={() => {\n                        props.setClicked(false);\n                        Keyboard.dismiss();\n                    }}\n                ></Button>\n            </View>\n        </View>)}\n    </View>);\n};\nexport default SmallerSearchBar;\n\n// styles\nconst styles = StyleSheet.create({\n    container: {\n        marginTop: 20,\n        margin: 15, justifyContent: \"center\", alignItems: \"center\", flexDirection: \"row\", width: \"90%\",\n    }, SmallerSearchBar__unclicked: {\n        padding: 10,\n        flexDirection: \"row\",\n        width: \"98%\",\n        backgroundColor: \"grey\",\n        borderRadius: 10,\n        alignItems: \"center\",\n        color: \"black\"\n    }, SmallerSearchBar__clicked: {\n        padding: 10,\n        flexDirection: \"row\",\n        width: \"80%\",\n        backgroundColor: \"grey\",\n        borderRadius: 10,\n        alignItems: \"center\",\n        justifyContent: \"space-evenly\",\n        color: \"black\",\n        marginLeft: 5,\n        marginRight: 5\n    }, input: {\n        fontSize: 14,marginLeft: 10, width: \"90%\", color: \"black\",\n    },\n    button : {\n        borderRadius: 100,\n        width: \"auto\",\n    },\n    filterIcon :{\n        right: 25\n    }\n});",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/Utilities/SearchBar/SmallerSearchBar.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 160,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/components/Utilities/SearchBar/SmallerSearchBar.tsx",
    "static": true,
    "longname": "src/components/Utilities/SearchBar/SmallerSearchBar.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/components/Utilities/SearchBar/SmallerSearchBar.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 60,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 161,
    "kind": "function",
    "name": "SmallerSearchBar",
    "memberof": "src/components/Utilities/SearchBar/SmallerSearchBar.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Utilities/SearchBar/SmallerSearchBar.tsx~SmallerSearchBar",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/Utilities/SearchBar/SmallerSearchBar.tsx",
    "importStyle": "SmallerSearchBar",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 162,
    "kind": "file",
    "name": "src/components/Utilities/SearchBar/index.tsx",
    "content": "import React, {useState} from \"react\";\nimport {Button, Keyboard, StyleSheet, TextInput, TouchableOpacity, View} from \"react-native\";\nimport {Entypo, Feather, Ionicons} from \"@expo/vector-icons\";\nimport FilterModal from \"../../FilterModal\";\n\nexport type SearchBarProps = {\n    clicked: boolean, searchPhrase: string, setSearchPhrase: any, setClicked: any,\n    filter: {}, setFilter(filter: {}): void\n}\n\n/**\n * OLD SEARCHBAR\n * @ignore\n * @param props\n * @constructor\n */\nconst SearchBar = (props: SearchBarProps) => {\n\n    const [showFilter, setShowFilter] = useState<boolean>(false)\n\n    return (<View style={styles.container}>\n            <View\n                style={props.clicked ? styles.searchBar__clicked : styles.searchBar__unclicked}\n            >\n                {/* search Icon */}\n                <Feather\n                    name=\"search\"\n                    size={20}\n                    color=\"black\"\n                    style={{marginHorizontal: props.clicked ? 10 : 5}}\n                />\n                {/* Input field */}\n                <TextInput\n                    onEndEditing={() => props.setClicked(false)}\n                    style={styles.input}\n                    placeholder=\"Search\"\n                    placeholderTextColor={\"black\"}\n                    value={props.searchPhrase}\n                    onChangeText={props.setSearchPhrase}\n                    onFocus={() => {\n                        props.setClicked(true);\n                    }}/>\n                <TouchableOpacity style={{right: 30, marginRight: props.clicked ? -5 : 0}} onPress={() => setShowFilter(!showFilter)}>\n                    <Ionicons name={\"filter-outline\"} size={20}/>\n                </TouchableOpacity>\n                <FilterModal filter={props.filter} setFilter={props.setFilter} isModalVisible={showFilter} setModalVisible={setShowFilter}/>\n                {/* cross Icon, depending on whether the search bar is clicked or not */}\n                {props.clicked && (\n                    <TouchableOpacity onPress={() => {\n                        props.setSearchPhrase(\"\")}}>\n                    <Entypo name=\"cross\" size={30} color=\"black\" style={{marginRight: 10}}\n                    />\n                    </TouchableOpacity>\n                        )}\n            </View>\n            {/* cancel button, depending on whether the search bar is clicked or not */}\n            {props.clicked && (<View>\n                <View style={styles.button}>\n                    <Button\n                        title=\"Cancel\"\n                        onPress={() => {\n                            props.setClicked(false);\n                            props.setSearchPhrase(\"\")\n                            //props.setFilter({})\n                            Keyboard.dismiss();\n                        }}\n                    ></Button>\n                </View>\n                </View>)}\n        </View>);\n};\nexport default SearchBar;\n\n// styles\nconst styles = StyleSheet.create({\n    container: {\n        marginTop: 20,\n        margin: 15, justifyContent: \"center\", alignItems: \"center\", flexDirection: \"row\", width: \"90%\",\n    }, searchBar__unclicked: {\n        padding: 10,\n        flexDirection: \"row\",\n        width: \"95%\",\n        backgroundColor: \"#d9dbda\",\n        borderRadius: 15,\n        alignItems: \"center\",\n        color: \"black\"\n    }, searchBar__clicked: {\n        padding: 10,\n        flexDirection: \"row\",\n        width: \"80%\",\n        backgroundColor: \"#d9dbda\",\n        borderRadius: 15,\n        alignItems: \"center\",\n        justifyContent: \"space-evenly\",\n        color: \"black\",\n        marginLeft: 10,\n        marginRight: 10\n    }, input: {\n        fontSize: 20,marginLeft: 10, width: \"90%\", color: \"black\",\n    },\n    button : {\n        borderRadius: 100,\n        width: \"auto\",\n    },\n});",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/Utilities/SearchBar/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 163,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/components/Utilities/SearchBar/index.tsx",
    "static": true,
    "longname": "src/components/Utilities/SearchBar/index.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/components/Utilities/SearchBar/index.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 75,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 164,
    "kind": "function",
    "name": "SearchBar",
    "memberof": "src/components/Utilities/SearchBar/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Utilities/SearchBar/index.tsx~SearchBar",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/Utilities/SearchBar/index.tsx",
    "importStyle": "SearchBar",
    "description": "OLD SEARCHBAR",
    "lineNumber": 17,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 165,
    "kind": "file",
    "name": "src/components/Utilities/Tag/index.tsx",
    "content": "import React from \"react\";\nimport {StyleSheet, Text, TouchableOpacity} from \"react-native\";\nimport {FontAwesome} from \"@expo/vector-icons\";\nimport colors from \"../../../../constants/Colors\";\n\n// PROPS\nexport type TagProps = {\n    title: string\n}\n\n// TODO : Navigation\n\n/**\n * Component for tagging artworks according to keywords\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=18SR5-hiVTriZ9s34AG31bZWZBinAi1Ia\" alt=\"ArtworkPage\" height=\"100\">\n * @param {TagProps} props\n * @param {string} props.title - Title of the tag\n * @constructor\n * @return TouchableOpacity\n */\nexport default function Tag (props: TagProps) {\n\n    return (\n        <TouchableOpacity style={styles.tag}>\n            <FontAwesome style={styles.icon} name={\"tag\"} size={15}/>\n            <Text style={styles.text}>{props.title}</Text>\n        </TouchableOpacity>\n    )\n}\n\nconst styles = StyleSheet.create({\n    tag: {\n        alignSelf: \"flex-start\",\n        height: 30,\n        backgroundColor: colors.daylRed.text,\n        flexDirection: \"row\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        borderRadius: 10,\n    },\n    text: {\n        color: \"white\",\n        fontSize: 13,\n        marginRight: 10,\n        marginLeft: 10,\n        fontWeight: \"bold\",\n        textTransform: \"capitalize\"\n    },\n    icon: {\n        marginLeft: 10\n    }\n})\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/Utilities/Tag/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 166,
    "kind": "function",
    "name": "Tag",
    "memberof": "src/components/Utilities/Tag/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Utilities/Tag/index.tsx~Tag",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/Utilities/Tag/index.tsx",
    "importStyle": "Tag",
    "description": "Component for tagging artworks according to keywords\n\n<img src=\"https://drive.google.com/uc?export=view&id=18SR5-hiVTriZ9s34AG31bZWZBinAi1Ia\" alt=\"ArtworkPage\" height=\"100\">",
    "lineNumber": 22,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "TagProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.title",
        "description": "Title of the tag"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "TouchableOpacity"
    }
  },
  {
    "__docId__": 167,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/components/Utilities/Tag/index.tsx",
    "static": true,
    "longname": "src/components/Utilities/Tag/index.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/components/Utilities/Tag/index.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 32,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 168,
    "kind": "file",
    "name": "src/components/Utilities/ToastComponent/index.tsx",
    "content": "import React from \"react\";\nimport {StyleSheet, Text, TouchableOpacity, View} from \"react-native\";\nimport Toast from \"react-native-toast-message\";\n\n// COMPONENT FOR SHOWING TOAST ON TOP OF SCREEN\n\nexport type ToastComponentProps = {\n    title: string; // first line\n    text: string; // second line\n    type: string; // success, error, warning, dayl\n}\n\n// 100% customisable toast\nexport const toastConfig = {\n    dayl: ({props}: any) => (\n        <View style={{\n            width: '95%', backgroundColor: \"#292929\", borderRadius: 10,\n            borderLeftColor: \"white\", borderLeftWidth: 10, paddingHorizontal: 15, paddingVertical: 15\n        }}>\n            <Text style={{fontSize: 15, color: \"white\"}}>{props.text}</Text>\n        </View>\n    )\n}\n\nconst ToastComponent = (props: ToastComponentProps) => {\n\n    // FUNCTION SPAWNING TOAST ONPRESS\n    const showToast = () => {\n        Toast.show({\n            type: props.type,\n            props: {\n                title: props.title,\n                text: props.text,\n            }\n        });\n    }\n\n    return (\n        <TouchableOpacity style={styles.button} onPress={() => showToast()}><Text style={styles.buttonText}>TOAST TEST</Text></TouchableOpacity>\n    )\n}\n\nconst styles = StyleSheet.create({\n    button: {\n        width: \"30%\",\n        height: 40,\n        alignItems: \"center\",\n        backgroundColor: \"gray\",\n        alignSelf: \"center\",\n        justifyContent: \"center\",\n        borderRadius: 10,\n        margin: 10\n    },\n    buttonText: {\n        fontWeight: \"bold\",\n        fontSize: 15,\n        color: \"white\",\n        textAlign: \"center\",\n    },\n})\n\nexport default ToastComponent",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/Utilities/ToastComponent/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 169,
    "kind": "variable",
    "name": "toastConfig",
    "memberof": "src/components/Utilities/ToastComponent/index.tsx",
    "static": true,
    "longname": "src/components/Utilities/ToastComponent/index.tsx~toastConfig",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/Utilities/ToastComponent/index.tsx",
    "importStyle": "{toastConfig}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "{\"dayl\": *}"
      ]
    }
  },
  {
    "__docId__": 170,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/components/Utilities/ToastComponent/index.tsx",
    "static": true,
    "longname": "src/components/Utilities/ToastComponent/index.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/components/Utilities/ToastComponent/index.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 43,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 171,
    "kind": "function",
    "name": "ToastComponent",
    "memberof": "src/components/Utilities/ToastComponent/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Utilities/ToastComponent/index.tsx~ToastComponent",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/Utilities/ToastComponent/index.tsx",
    "importStyle": "ToastComponent",
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "params": [
      {
        "name": "props",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 172,
    "kind": "file",
    "name": "src/components/Utilities/ToolBarListPage/index.tsx",
    "content": "import React from 'react';\nimport {Animated, SafeAreaView, TouchableOpacity, View} from 'react-native';\nimport {Entypo, FontAwesome, MaterialCommunityIcons, Octicons} from \"@expo/vector-icons\";\nimport {useAuth} from \"../../../contexts/Auth\";\nimport {styles} from \"./styles\";\nimport {useNavigation} from \"@react-navigation/native\";\nimport {LinearGradient} from \"expo-linear-gradient\";\nimport {PageTypeList} from \"../../../../types\";\nimport {useInteractions} from \"../../../contexts/UserInteractions\";\n\n// PROPS\nexport type ToolBarListPageProps = {\n    type: PageTypeList,\n    listId: string | undefined,\n    modalVisible: boolean,\n    setModalVisible(modalVisible: boolean): void,\n    addToListModal: boolean,\n    setAddToListModal(addToListModal: boolean): void,\n}\n\n/**\n * Component displaying the toolbar for the {@link ListContentPage} and {@link AllMyArtworks}\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=1RD3birE2392NqlnnwkHW18EHkc-cnecG\" alt=\"ArtworkPage\" height=\"100\">\n * @param {ToolBarListPageProps} props\n * @param {PageTypeList} props.type - Type of page\n * @param {string} props.listId - ID of the list\n * @param {boolean} props.modalVisible - Visibility of the EditList modal\n * @param {void} props.setModalVisible - Toggles the visibility of the EditList modal\n * @param {boolean} props.addToListModal - Visibility of the AddToList modal\n * @param {void} props.setAddToListModal - Toggles the visibility of the AddToList modal\n * @constructor\n * @return ToolBarListPage\n */\nexport default function ToolBarListPage(props: ToolBarListPageProps) {\n\n    const auth = useAuth()\n    const userInt = useInteractions()\n    const navigation = useNavigation()\n\n    return (\n        <SafeAreaView style={styles.container}>\n            <Animated.View style={[styles.linearGradientContainer, {opacity: 1}]}>\n                <LinearGradient colors={['transparent', 'black']} start={{x: 0, y: 1,}} end={{x: 0, y: 0.5}}\n                                style={[styles.linearGradient]}/>\n            </Animated.View>\n\n            {/*BACK BUTTON*/}\n            <TouchableOpacity style={styles.backButton} onPress={() => {\n                userInt.setEdit(false);\n                auth.reloadData();\n                navigation.goBack()\n            }}>\n                <Entypo name={\"chevron-left\"} size={35} color={\"white\"}/>\n            </TouchableOpacity>\n\n            {props.type !== PageTypeList.OtherList &&\n                <View style={styles.RightContainer}>\n                    {/* ADD MULTIPLE ELEMENTS TO LIST*/}\n                    {userInt.edit && <TouchableOpacity style={styles.icon} disabled={userInt.selected.length === 0}\n                                                       onPress={() => {\n                                                           props.setAddToListModal(!props.addToListModal);\n                                                           auth.setRefreshKey(auth.refreshKey + 1)\n                                                       }}>\n                        <FontAwesome name={\"bookmark-o\"} size={25}\n                                     color={userInt.selected.length > 0 ? \"white\" : \"grey\"}/>\n                    </TouchableOpacity>\n                    }\n                    {/*DELETE SELECTED ELEMENTS*/}\n                    {userInt.edit && <TouchableOpacity style={styles.icon} disabled={userInt.selected.length === 0}\n                                                       onPress={() => {\n                                                           userInt.deleteArtworks(props.listId);\n                                                           auth.setRefreshKey(auth.refreshKey + 1);\n                                                           auth.reloadData()\n                                                       }}>\n                        <Octicons name={\"trash\"} size={25} color={userInt.selected.length > 0 ? \"white\" : \"grey\"}/>\n                    </TouchableOpacity>\n                    }\n\n                    {/* EDIT ELEMENTS BUTTON */}\n                    <TouchableOpacity style={styles.icon} onPress={() => {\n                        userInt.setEdit(!userInt.edit);\n                        userInt.setSelected([])\n                    }}>\n                        <MaterialCommunityIcons\n                            name={!userInt.edit ? \"checkbox-multiple-blank-circle-outline\" : \"checkbox-multiple-marked-circle-outline\"}\n                            size={25} color={\"white\"}/>\n                    </TouchableOpacity>\n\n                    {/*THREE DOTS TO EDIT LIST*/}\n                    {props.type != PageTypeList.LikedArtworks &&\n                        <TouchableOpacity style={styles.icon} onPress={() => {\n                            props.setModalVisible(!props.modalVisible)\n                        }}>\n                            <Entypo name={\"dots-three-horizontal\"} size={25} color={\"white\"}/>\n                        </TouchableOpacity>}\n\n                </View>}\n        </SafeAreaView>\n    )\n}",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/components/Utilities/ToolBarListPage/index.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 173,
    "kind": "function",
    "name": "ToolBarListPage",
    "memberof": "src/components/Utilities/ToolBarListPage/index.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/components/Utilities/ToolBarListPage/index.tsx~ToolBarListPage",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/components/Utilities/ToolBarListPage/index.tsx",
    "importStyle": "ToolBarListPage",
    "description": "Component displaying the toolbar for the {@link ListContentPage} and {@link AllMyArtworks}\n\n<img src=\"https://drive.google.com/uc?export=view&id=1RD3birE2392NqlnnwkHW18EHkc-cnecG\" alt=\"ArtworkPage\" height=\"100\">",
    "lineNumber": 35,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "ToolBarListPageProps"
        ],
        "spread": false,
        "optional": false,
        "name": "props",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "PageTypeList"
        ],
        "spread": false,
        "optional": false,
        "name": "props.type",
        "description": "Type of page"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "props.listId",
        "description": "ID of the list"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "props.modalVisible",
        "description": "Visibility of the EditList modal"
      },
      {
        "nullable": null,
        "types": [
          "void"
        ],
        "spread": false,
        "optional": false,
        "name": "props.setModalVisible",
        "description": "Toggles the visibility of the EditList modal"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "props.addToListModal",
        "description": "Visibility of the AddToList modal"
      },
      {
        "nullable": null,
        "types": [
          "void"
        ],
        "spread": false,
        "optional": false,
        "name": "props.setAddToListModal",
        "description": "Toggles the visibility of the AddToList modal"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "ToolBarListPage"
    }
  },
  {
    "__docId__": 174,
    "kind": "file",
    "name": "src/screens/ArtistNonUserPage.tsx",
    "content": "import {Animated, StyleSheet, View} from 'react-native';\nimport React, {useRef, useState} from \"react\";\nimport FollowingButtonComponent from \"../components/Utilities/FollowingButtonComponent\";\nimport OnClickImage from \"../components/Utilities/OnClickImage\";\n\nimport TopBarAnimatedHeader from \"../components/TopBarAnimatedHeader\";\nimport {HeaderType} from \"../../types\";\nimport HeaderArtistNonUser from \"../components/HeaderComponent/HeaderArtistNonUserComponent\";\nimport BackButton from \"../components/Utilities/BackButton\";\n\n/**\n * @ignore\n * @param route\n * @constructor\n */\nexport default function ArtistNonUserPage({route}: any) {\n\n    //GET ROUTE DATA\n\n    const {\n        imageUri,\n        information,\n        artistName,\n        artistId,\n    }: {\n        imageUri: string,\n        information: string,\n        artistName: string,\n        artistId: string,\n    } = route.params\n\n    //ON CLICK USE STATE\n\n    const [onClickImage, setOnClickImage] = useState(false)\n\n    //SCROLLY ANIMATION VALUE\n\n    const scrollY = useRef(new Animated.Value(0)).current;\n\n    //DEACTIVATE TOP BAR WHEN SCROLLY IS ABOVE CERTAIN AMOUNT\n\n    function deactivateTopBar(event: any) {\n        if (event.nativeEvent.contentOffset.y > 90)\n            setPointerEvenTopBar(\"auto\")\n        else\n            setPointerEvenTopBar(\"none\")\n    }\n\n    //USE STATE ACTIVATE/DEACTIVATE TOP BAR\n\n    let [pointerEventTopBar, setPointerEvenTopBar] = useState<any>(\"none\")\n\n    return (\n        <View>\n            {/*ON IMAGE CLICK OPEN ZOOM*/}\n            <OnClickImage imageUri={imageUri} title={artistName} onClickImage={onClickImage}\n                          setOnClickImage={setOnClickImage}/>\n\n            {/*ANIMATED TOP BAR THAT APPEARS WHEN SCROLL DOWN*/}\n            <View style={[styles.topBar]} pointerEvents={pointerEventTopBar}>\n                <TopBarAnimatedHeader title={artistName} type={HeaderType.NonUser} scrollY={scrollY}/>\n            </View>\n\n            {/*ANIMATED SCROLL VIEW*/}\n            <Animated.ScrollView alwaysBounceVertical={true} scrollEventThrottle={16}\n                                 showsVerticalScrollIndicator={false}\n                                 onScroll={Animated.event([{nativeEvent: {contentOffset: {y: scrollY}}}], {\n                                     useNativeDriver: true,\n                                     listener: (event: Object) => deactivateTopBar(event)\n                                 })}>\n                {/*HEADER COMPONENT*/}\n                <HeaderArtistNonUser imageUri={imageUri} artistName={artistName} scrollY={scrollY}\n                                     onClickImage={onClickImage} setOnClickImage={setOnClickImage}/>\n                {/*BACK BUTTON*/}\n                <BackButton/>\n                {/*FOLLOWING BUTTON*/}\n                <FollowingButtonComponent artistId={artistId}/>\n                {/*SUMMARY OF ARTWORK*/}\n                {/*<ArtistTabView artistId={artistId} information={information}/>*/}\n            </Animated.ScrollView>\n        </View>\n\n    )\n\n}\n\nconst styles = StyleSheet.create({\n\n    topBar: {\n        zIndex: 4\n    },\n\n});\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/screens/ArtistNonUserPage.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 175,
    "kind": "function",
    "name": "ArtistNonUserPage",
    "memberof": "src/screens/ArtistNonUserPage.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/ArtistNonUserPage.tsx~ArtistNonUserPage",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/screens/ArtistNonUserPage.tsx",
    "importStyle": "ArtistNonUserPage",
    "description": "",
    "lineNumber": 16,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 176,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/screens/ArtistNonUserPage.tsx",
    "static": true,
    "longname": "src/screens/ArtistNonUserPage.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/ArtistNonUserPage.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 87,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 177,
    "kind": "file",
    "name": "src/screens/CommentsPage.tsx",
    "content": "import React from \"react\";\nimport {ScrollView, StyleSheet, Text, View} from \"react-native\";\nimport BackButton from \"../components/Utilities/BackButton\";\nimport PostComponent from \"../components/SocialNetwork/PostComponent\";\nimport CommentBar from \"../components/SocialNetwork/CommentBar\";\n\n/**\n * TODO\n * @ignore\n * Page containing all comments of a post\n * @constructor\n */\nexport function CommentsPage() {\n\n    const pdp1 = \"https://upload.wikimedia.org/wikipedia/commons/thumb/9/98/Pablo_picasso_1.jpg/800px-Pablo_picasso_1.jpg\"\n    const textShort = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus. Suspendisse lectus tortor, dignissim sit amet, adipiscing nec, ultricies sed, dolor. Cras elementum ultrices diam.\"\n\n\n    return (\n        <View>\n            <ScrollView>\n                <BackButton/>\n                <View style={styles.header}>\n                    <Text style={styles.title}>Comments</Text>\n                </View>\n                <View>\n                    <PostComponent type={\"comment\"} text={textShort} avatarUri={pdp1} userName={\"Valentin Best\"}\n                                   userId={\"1\"} verified={false} date={\"6hrs ago\"}/>\n                    <PostComponent type={\"comment\"} text={textShort} avatarUri={pdp1} userName={\"Valentin Best\"}\n                                   userId={\"1\"} verified={false} date={\"6hrs ago\"}/>\n                    <PostComponent type={\"comment\"} text={textShort} avatarUri={pdp1} userName={\"Valentin Best\"}\n                                   userId={\"1\"} verified={false} date={\"6hrs ago\"}/>\n                    <PostComponent type={\"comment\"} text={textShort} avatarUri={pdp1} userName={\"Valentin Best\"}\n                                   userId={\"1\"} verified={false} date={\"6hrs ago\"}/>\n                    <PostComponent type={\"comment\"} text={textShort} avatarUri={pdp1} userName={\"Valentin Best\"}\n                                   userId={\"1\"} verified={false} date={\"6hrs ago\"}/>\n                    <PostComponent type={\"comment\"} text={textShort} avatarUri={pdp1} userName={\"Valentin Best\"}\n                                   userId={\"1\"} verified={false} date={\"6hrs ago\"}/>\n                    <PostComponent type={\"comment\"} text={textShort} avatarUri={pdp1} userName={\"Valentin Best\"}\n                                   userId={\"1\"} verified={false} date={\"6hrs ago\"}/>\n                    <PostComponent type={\"comment\"} text={textShort} avatarUri={pdp1} userName={\"Valentin Best\"}\n                                   userId={\"1\"} verified={false} date={\"6hrs ago\"}/>\n                    <PostComponent type={\"comment\"} text={textShort} avatarUri={pdp1} userName={\"Valentin Best\"}\n                                   userId={\"1\"} verified={false} date={\"6hrs ago\"}/>\n                    <PostComponent type={\"comment\"} text={textShort} avatarUri={pdp1} userName={\"Valentin Best\"}\n                                   userId={\"1\"} verified={false} date={\"6hrs ago\"}/>\n                    <PostComponent type={\"comment\"} text={textShort} avatarUri={pdp1} userName={\"Valentin Best\"}\n                                   userId={\"1\"} verified={false} date={\"6hrs ago\"}/>\n                    <PostComponent type={\"comment\"} text={textShort} avatarUri={pdp1} userName={\"Valentin Best\"}\n                                   userId={\"1\"} verified={false} date={\"6hrs ago\"}/>\n                    <PostComponent type={\"comment\"} text={textShort} avatarUri={pdp1} userName={\"Valentin Best\"}\n                                   userId={\"1\"} verified={false} date={\"6hrs ago\"}/>\n                    <PostComponent type={\"comment\"} text={textShort} avatarUri={pdp1} userName={\"Valentin Best\"}\n                                   userId={\"1\"} verified={false} date={\"6hrs ago\"}/>\n                    <PostComponent type={\"comment\"} text={textShort} avatarUri={pdp1} userName={\"Valentin Best\"}\n                                   userId={\"1\"} verified={false} date={\"6hrs ago\"}/>\n                </View>\n            </ScrollView>\n            <CommentBar/>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    header: {\n        paddingTop: 60,\n        marginBottom: 30,\n        width: \"100%\",\n        alignItems: \"center\",\n        justifyContent: \"center\"\n    },\n    title: {\n        fontSize: 30,\n        color: \"white\"\n    }\n})",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/screens/CommentsPage.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 178,
    "kind": "function",
    "name": "CommentsPage",
    "memberof": "src/screens/CommentsPage.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/CommentsPage.tsx~CommentsPage",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/screens/CommentsPage.tsx",
    "importStyle": "{CommentsPage}",
    "description": "TODO",
    "lineNumber": 13,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 179,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/screens/CommentsPage.tsx",
    "static": true,
    "longname": "src/screens/CommentsPage.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/CommentsPage.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 64,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 180,
    "kind": "file",
    "name": "src/screens/DetailedScreenSquareComponents.tsx",
    "content": "import {Dimensions, Platform, SafeAreaView, StyleSheet} from 'react-native';\nimport React from \"react\";\nimport {useNavigation} from \"@react-navigation/native\";\nimport SquareComponentGrid from \"../components/SquareComponentGrid\";\nimport {Artist, SquareComponentType} from \"../../types\";\nimport {HeaderDetailedPage} from \"../components/DetailedComponents/HeaderDetailedPage\";\n\n/**\n * @ignore\n */\nexport default function DetailedScreenSquareComponents({route, index}: any) {\n\n    const {\n        title,\n        data\n    }: {\n        title: string,\n        data: [Artist]\n    } = route.params\n\n\n    const navigation = useNavigation()\n\n    return (\n        <SafeAreaView style={styles.container}>\n            {/*<BackButton/>*/}\n            {/*<View style={styles.seperator}></View>*/}\n            {/*<View style={styles.textAndChevron}>*/}\n            {/*    /!*TEXT*!/*/}\n            {/*    <Text style={styles.detailedTitle}>{title}</Text>*/}\n            {/*</View>*/}\n\n            <HeaderDetailedPage title={title}/>\n\n            <SquareComponentGrid title={title} data={data} type={SquareComponentType.artist}/>\n        </SafeAreaView>\n    )\n}\n\nconst screenHeight = Dimensions.get('screen').height\nconst screenWidth = Dimensions.get('screen').width\nconst styles = StyleSheet.create({\n    container: {\n        paddingTop: Platform.OS === \"android\" ? 30 : 0\n    },\n    textAndChevron: {\n        flexDirection: \"row\",\n        alignItems: \"center\",\n    },\n    detailedTitle: {\n        marginLeft: 20,\n        color: 'white',\n        fontSize: 30,\n        //marginTop: 10,\n        fontWeight: \"bold\",\n        //marginBottom: 10,\n        textAlign: \"left\",\n    },\n    seperator: {\n        height: 70\n    }\n});\n\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/screens/DetailedScreenSquareComponents.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 181,
    "kind": "function",
    "name": "DetailedScreenSquareComponents",
    "memberof": "src/screens/DetailedScreenSquareComponents.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/DetailedScreenSquareComponents.tsx~DetailedScreenSquareComponents",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/screens/DetailedScreenSquareComponents.tsx",
    "importStyle": "DetailedScreenSquareComponents",
    "description": "",
    "lineNumber": 11,
    "ignore": true,
    "params": [
      {
        "name": "objectPattern",
        "types": [
          "{\"route\": *, \"index\": *}"
        ],
        "defaultRaw": {
          "route": null,
          "index": null
        },
        "defaultValue": "{\"route\":null,\"index\":null}"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 182,
    "kind": "variable",
    "name": "screenHeight",
    "memberof": "src/screens/DetailedScreenSquareComponents.tsx",
    "static": true,
    "longname": "src/screens/DetailedScreenSquareComponents.tsx~screenHeight",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/DetailedScreenSquareComponents.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 40,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 183,
    "kind": "variable",
    "name": "screenWidth",
    "memberof": "src/screens/DetailedScreenSquareComponents.tsx",
    "static": true,
    "longname": "src/screens/DetailedScreenSquareComponents.tsx~screenWidth",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/DetailedScreenSquareComponents.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 41,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 184,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/screens/DetailedScreenSquareComponents.tsx",
    "static": true,
    "longname": "src/screens/DetailedScreenSquareComponents.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/DetailedScreenSquareComponents.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 42,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 185,
    "kind": "file",
    "name": "src/screens/EditProfile.tsx",
    "content": "import {ScrollView, StyleSheet, Text, TouchableOpacity} from 'react-native';\nimport React, {useState} from \"react\";\nimport HeaderEditProfileComponent from \"../components/HeaderComponent/HeaderEditProfileComponent\";\nimport {useAuth} from \"../contexts/Auth\";\nimport {URL} from \"../services/constantes\"\nimport EditProfileInput from \"../components/Utilities/EditProfileInput\";\nimport colors from \"../../constants/Colors\";\nimport axios from \"axios\";\nimport Toast from \"react-native-toast-message\";\nimport BiographyInput from \"../components/Utilities/BiographyInput\";\n\n/**\n * Page on which the user can edit fields of his profile (First Name, Last Name, Bio, City, Country, IconImage, BannerImage)\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=1kE2Rf5sJ5bE5drRhAn1yba5plaIyhuoh\" alt=\"EditProfile\" height=\"500\">\n * @constructor\n * @return EditProfile\n */\nexport default function EditProfile() {\n\n    const auth = useAuth()\n\n    const [firstName, setFirstName] = useState(auth.authData.firstName)\n    const [lastName, setLastName] = useState(auth.authData.lastName)\n    const [profile, setProfile] = useState(auth.authData.biography)\n    const [city, setCity] = useState(auth.authData.city)\n    const [country, setCountry] = useState(auth.authData.country)\n\n    // API POST CALL TO UPDATE THE PROFILE\n    const submitNewProfile = () => {\n        if (firstName === \"\")\n            Toast.show({\n                type: \"dayl\",\n                props: {\n                    title: \"Error\",\n                    text: \"Please enter first name\",\n                }\n            })\n        else if (lastName === \"\")\n            Toast.show({\n                type: \"dayl\",\n                props: {\n                    title: \"Error\",\n                    text: \"Please enter last name\",\n                }\n            })\n        else {\n            axios.post(URL + \"users/update\",\n                {\n                    id: auth.authData.id,\n                    firstName: firstName,\n                    lastName: lastName,\n                    biography: profile,\n                    linkedinAccount: \"\",\n                    instragramAccount: \"\",\n                    facebookAccount: \"\",\n                    pinterestAccount: \"\",\n                    twitterAccount: \"\",\n                    city: city,\n                    country: country\n                }, {headers: {\"Access-Control-Allow-Origin\": \"*\", \"Content-Type\": \"application/json\"}})\n                .then((response) => {\n                    Toast.show({\n                        type: \"dayl\",\n                        props: {\n                            title: \"Success\",\n                            text: \"Successfully updated profile\",\n                        }\n                    })\n                    auth.reloadData();\n                })\n                .catch(err => {\n                    if (err.response) {\n                        Toast.show({\n                            type: \"dayl\",\n                            props: {\n                                title: \"Error\",\n                                text: \"Could not update profile, please try again later\",\n                            }\n                        })\n                    }\n                });\n        }\n    }\n\n    return (\n        <ScrollView>\n            {/*HEADER*/}\n            <HeaderEditProfileComponent\n                imageUri={auth.authData.backgroundImage === \"\" ? \"https://upload.wikimedia.org/wikipedia/commons/thumb/4/49/A_black_image.jpg/640px-A_black_image.jpg\" : URL + `images/contentUser/${auth.authData.id}/${auth.authData.backgroundImage}`}\n                title={auth.authData.firstName + \" \" + auth.authData.lastName}\n                avatarIconUri={auth.authData.iconImage === \"\" ? \"https://vetref.fr/wp-content/uploads/2021/02/blank-profile-picture-973460_640.png\" : URL + `images/contentUser/${auth.authData.id}/${auth.authData.iconImage}`}/>\n\n            {/*EDITING FIELD FOR FIRST NAME*/}\n            <EditProfileInput credentialsNeeded={\"First name\"} value={firstName} setValue={setFirstName}\n                              placeholder={auth.authData.firstName}/>\n            {/*EDITING FIELD FOR LAST NAME*/}\n            <EditProfileInput credentialsNeeded={\"Last name\"} value={lastName} setValue={setLastName}\n                              placeholder={auth.authData.lastName}/>\n            {/*EDITING FIELD FOR BIO*/}\n            <BiographyInput credentialsNeeded={\"Biography\"} value={profile} setValue={setProfile}/>\n            {/*EDITING FIELD FOR CITY*/}\n            <EditProfileInput credentialsNeeded={\"City\"} value={city} setValue={setCity}\n                              placeholder={auth.authData.city}/>\n            {/*EDITING FIELD FOR COUNTRY*/}\n            <EditProfileInput credentialsNeeded={\"Country\"} value={country} setValue={setCountry}\n                              placeholder={auth.authData.country}/>\n            {/*SUBMIT BUTTON*/}\n            <TouchableOpacity style={styles.saveButton} onPress={() => {submitNewProfile()}}>\n                <Text style={styles.saveText}>UPDATE PROFILE</Text>\n            </TouchableOpacity>\n        </ScrollView>\n    )\n}\n\nconst styles = StyleSheet.create({\n    searchBar__unclicked: {\n        padding: 10,\n        flexDirection: \"row\",\n        width: \"95%\",\n        backgroundColor: \"white\",\n        borderRadius: 15,\n        alignItems: \"center\",\n        color: \"black\"\n    },\n    input: {\n        fontSize: 20, marginLeft: 10, width: \"90%\", color: \"black\"\n    },\n    saveButton: {\n        width: '90%',\n        paddingVertical: 15,\n        backgroundColor: colors.daylRed.text,\n        justifyContent: \"center\",\n        alignSelf: \"center\",\n        borderRadius: 10,\n        marginTop: 20,\n        marginBottom: 100\n    },\n    saveText: {\n        color: \"white\",\n        fontSize: 18,\n        fontWeight: \"bold\",\n        textAlign: \"center\"\n    }\n});\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/screens/EditProfile.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 186,
    "kind": "function",
    "name": "EditProfile",
    "memberof": "src/screens/EditProfile.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/EditProfile.tsx~EditProfile",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/screens/EditProfile.tsx",
    "importStyle": "EditProfile",
    "description": "Page on which the user can edit fields of his profile (First Name, Last Name, Bio, City, Country, IconImage, BannerImage)\n\n<img src=\"https://drive.google.com/uc?export=view&id=1kE2Rf5sJ5bE5drRhAn1yba5plaIyhuoh\" alt=\"EditProfile\" height=\"500\">",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "EditProfile"
    },
    "params": []
  },
  {
    "__docId__": 187,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/screens/EditProfile.tsx",
    "static": true,
    "longname": "src/screens/EditProfile.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/EditProfile.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 116,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 188,
    "kind": "file",
    "name": "src/screens/ExplorePage.tsx",
    "content": "import {Platform, SafeAreaView, ScrollView, StyleSheet} from 'react-native';\nimport {useEffect, useState} from \"react\";\nimport axios from \"axios\";\nimport {URL} from \"../services/constantes\";\nimport ExploreComponent from \"../components/ExploreComponent\";\nimport SearchArtworkGridComponent from \"../components/SearchArtworkGridComponent\";\nimport {Artwork} from \"../../types\";\nimport NewSearchBar from \"../components/Utilities/NewSearchBar\";\n\n/**\n * Page on which the user can discover new artworks and artists\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=1B_EqzN75vi7ylrlq_GALFH1xL5RpdhGA\" alt=\"ArtworkPage\" height=\"500\">\n * @constructor\n * @return ExplorePage\n */\nexport default function ExplorePage() {\n\n    const [searchPhrase, setSearchPhrase] = useState<string>(\"\");\n    const [clicked, setClicked] = useState(false);\n    const [data, setData] = useState<[Artwork] | []>([]);\n    const [filter, setFilter] = useState({styleFilter: \"\", genreFilter: \"\", nationalityFilter: \"\"})\n\n    // API POST CALL TO GET THE RESULT OF THE SEARCH WITH THE SEARCHPHRASE\n    useEffect(() => {\n        setData([])\n\n        axios.post(URL + \"paintingSearch/findPaintingBySearchDto\", {\n            license: \"\",\n            style: filter.styleFilter,\n            genre: filter.genreFilter,\n            nationality: filter.nationalityFilter,\n            freeSearch: searchPhrase\n        }, {headers: {\"Access-Control-Allow-Origin\": \"*\", \"Content-Type\": \"application/json\", \"USER_PAINT\": \"0\"}})\n            .then((response) => {\n                const parsedData: [Artwork] | [] = response.data.map((el: any) => {\n                    return {\n                        id: el.id,\n                        imageUri: URL + `images/content/mini/${el.artistId}/${el.urlImage}`,\n                        artistName: el.artisteName,\n                        artworkName: el.name,\n                        artistId: el.artistId\n                    }\n                })\n                setData(parsedData)\n            });\n    }, [searchPhrase, filter])\n\n    return (\n        <SafeAreaView style={styles.container}>\n            <ScrollView horizontal={false} keyboardShouldPersistTaps={\"handled\"}>\n                {/*SEARCHBAR*/}\n                <NewSearchBar\n                    searchPhrase={searchPhrase}\n                    setSearchPhrase={setSearchPhrase}\n                    clicked={clicked}\n                    setClicked={setClicked}\n                    filter={filter}\n                    setFilter={setFilter}\n                />\n                {/*DISPLAYS ExploreComponent (default) | SearchArtworkGridComponent (if text in searchBar or filter activated)*/}\n                {searchPhrase !== \"\" || filter.styleFilter !== \"\" || filter.genreFilter !== \"\" || filter.nationalityFilter !== \"\"\n                    ? (<SearchArtworkGridComponent searchPhrase={searchPhrase} setClicked={setClicked} data={data}/>)\n                    : <ExploreComponent/>}\n            </ScrollView>\n        </SafeAreaView>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        paddingTop: Platform.OS === 'android' ? 25 : 0,\n    }, root: {\n        justifyContent: \"center\", alignItems: \"center\",\n\n    }, title: {\n        width: \"100%\", marginTop: 20, fontSize: 25, fontWeight: \"bold\", marginLeft: \"10%\", color: \"white\",\n    },\n});\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/screens/ExplorePage.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 189,
    "kind": "function",
    "name": "ExplorePage",
    "memberof": "src/screens/ExplorePage.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/ExplorePage.tsx~ExplorePage",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/screens/ExplorePage.tsx",
    "importStyle": "ExplorePage",
    "description": "Page on which the user can discover new artworks and artists\n\n<img src=\"https://drive.google.com/uc?export=view&id=1B_EqzN75vi7ylrlq_GALFH1xL5RpdhGA\" alt=\"ArtworkPage\" height=\"500\">",
    "lineNumber": 17,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "ExplorePage"
    },
    "params": []
  },
  {
    "__docId__": 190,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/screens/ExplorePage.tsx",
    "static": true,
    "longname": "src/screens/ExplorePage.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/ExplorePage.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 70,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 191,
    "kind": "file",
    "name": "src/screens/HomeScreen.tsx",
    "content": "import {Platform, SafeAreaView, ScrollView, StyleSheet, View} from 'react-native';\nimport {useAuth} from \"../contexts/Auth\";\nimport React from \"react\";\nimport HeaderMainPage from \"../components/SocialNetwork/HeaderMainPage\";\nimport PostComponent from \"../components/SocialNetwork/PostComponent\";\nimport NewPostButton from \"../components/SocialNetwork/NewPost/NewPostButton\";\nimport {IMG1, IMG2, LOREM, PP1, PP2} from \"../services/constantes\"\n\n/**\n * TODO\n * @ignore\n * @constructor\n */\nexport default function HomeScreen() {\n\n    const auth = useAuth()\n\n    const postS = <PostComponent type={\"social\"} image={IMG1} text={LOREM} avatarUri={PP1}\n                                 userName={\"Pablo Picasso\"} userId={\"1\"} verified={true} repost={true} threedots={false}\n                                 date={\"6hrs ago\"}/>\n\n    const postP = <PostComponent type={\"painting\"} artworkName={\"Nuit étoilée\"} image={IMG2} avatarUri={PP2}\n                                 userName={\"Vincent Van Gogh\"}\n                                 userId={\"2\"} verified={true} repost={true} threedots={false} date={\"6hrs ago\"}/>\n\n    return (\n        <SafeAreaView style={styles.container}>\n            <ScrollView>\n                <HeaderMainPage/>\n                <PostComponent type={\"social\"} image={IMG1} text={LOREM} avatarUri={PP1}\n                               userName={\"Pablo Picasso\"} userId={\"1\"} verified={true} repost={false} threedots={false}\n                               date={\"6hrs ago\"}/>\n                <PostComponent type={\"painting\"} artworkName={\"Nuit étoilée\"} image={IMG2} avatarUri={PP2}\n                               userName={\"Vincent Van Gogh\"}\n                               userId={\"2\"} verified={true} repost={false} threedots={false} date={\"6hrs ago\"}/>\n                <PostComponent type={\"repostSocial\"} image={IMG1} text={LOREM} avatarUri={PP1}\n                               userName={\"Pablo Picasso\"} userId={\"3\"} verified={true} repost={false} threedots={false}\n                               date={\"6hrs ago\"} post={postS}/>\n                <PostComponent type={\"repostPainting\"} image={IMG1} text={LOREM} avatarUri={PP1}\n                               userName={\"Pablo Picasso\"} userId={\"4\"} verified={true} repost={false} threedots={false}\n                               date={\"6hrs ago\"} post={postP}/>\n            </ScrollView>\n            <View style={styles.newPostButton}>\n                <NewPostButton/>\n            </View>\n            {/*<Toast config={toastConfig}/>*/}\n        </SafeAreaView>)\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        paddingTop: Platform.OS === \"android\" ? 30 : 0,\n    }, text: {\n        textAlign: \"center\", fontSize: 30, color: \"white\",\n    },\n    newPostButton: {\n        alignItems: \"flex-end\",\n        justifyContent: \"flex-end\",\n    }\n\n});\n\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/screens/HomeScreen.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 192,
    "kind": "function",
    "name": "HomeScreen",
    "memberof": "src/screens/HomeScreen.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/HomeScreen.tsx~HomeScreen",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/screens/HomeScreen.tsx",
    "importStyle": "HomeScreen",
    "description": "TODO",
    "lineNumber": 14,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 193,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/screens/HomeScreen.tsx",
    "static": true,
    "longname": "src/screens/HomeScreen.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/HomeScreen.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 50,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 194,
    "kind": "file",
    "name": "src/screens/ImagePickerTest.tsx",
    "content": "import {Dimensions, Image, StyleSheet, TouchableOpacity, View} from 'react-native';\nimport React, {useState} from \"react\";\nimport * as ImagePicker from 'expo-image-picker';\nimport {useAuth} from \"../contexts/Auth\";\nimport {URL} from \"../services/constantes\";\nimport Toast from \"react-native-toast-message\";\n\n/**\n * @ignore\n * @constructor\n */\nexport default function ImagePickerTest() {\n\n    const [image, setImage] = useState({})\n\n    const options: Object = {\n        mediaType: 'photo'\n    }\n\n    const auth = useAuth()\n\n    // const pickImage = async () => {\n    //     // No permissions request is necessary for launching the image library\n    //     let result = await ImagePicker.launchImageLibraryAsync({\n    //         mediaTypes: ImagePicker.MediaTypeOptions.Images,\n    //         allowsEditing: true,\n    //     });\n    //\n\n    //     console.log(result);\n    //     setImage(result)\n    // };\n    //\n    // console.log(auth.authData.iconImage)\n    //\n    // const sendData = (result: any) => {\n    //     const xhr = new XMLHttpRequest();\n    //\n    //     xhr.open('POST', URL + `images/submitImageForMatching?fileName=Bob&artist=Bob`);\n    //\n    //     xhr.onload = async () => {\n    //         const response = await JSON.parse(xhr.response);\n    //         console.log(response)\n    //         console.log(response.status)\n    //         response.status === 500 ? toggleImage(null) : toggleImage(response)\n    //     }\n    //     xhr.onerror = e => {\n    //         toggleImage(null)\n    //     };\n    //     xhr.ontimeout = e => {\n    //         toggleImage(null)\n    //     };\n    //\n    //     const formData = new FormData();\n    //\n    //     formData.append('image', {\n    //         // @ts-ignore\n    //         uri: result.uri,\n    //         type: result.type + \"/\" + result.uri.split(\"/\")[11],\n    //         name: result.uri.split(\"/\")[11]\n    //     });\n    //\n    //     xhr.send(formData);\n    // }\n\n    // LAUNCH CAMERA OR FILE MANAGER\n    // const sendData = (result: any) => {\n    //     const xhr = new XMLHttpRequest();\n    //\n    //\n    //     // console.log(result)\n    //     // console.log(\"URI\")\n    //     const name : string = result.uri.split('/').pop()\n    //     const type : string =  result.type+'/'+result.uri.split('.').pop()\n    //\n    //\n    //     xhr.open('POST', URL + `images/uploadUserBackgroundIcon?userId=${auth.authData.id}`);\n    //\n    //     const formData = new FormData();\n    //\n    //     formData.append('image', {\n    //         // @ts-ignore\n    //         uri: result.uri,\n    //         type: 'image/jpeg',\n    //         name: name\n    //     });\n    //     // xhr.setRequestHeader('application/json;charset=UTF-8')\n    //     xhr.send(formData);\n    //\n    //     xhr.onreadystatechange = function () {\n    //         console.log(xhr.status)\n    //         console.log(xhr.responseText)\n    //     }\n    // }\n    //\n    // const pickImage = async () => {\n    //     // CHECK PERMISSIONS\n    //\n    //     // CHOOSE PICTURE\n    //     let result = await ImagePicker.launchImageLibraryAsync({\n    //         mediaTypes: ImagePicker.MediaTypeOptions.Images,\n    //         allowsEditing: true,\n    //         quality: 1,\n    //         base64: true\n    //     });\n    //\n    //     // CASE NO PICTURE WERE CHOSEN\n    //     if (result.cancelled) {\n    //         return\n    //     }\n    //\n    //     // CASE PICTURE IS VALID => SEND DATA TO API\n    //     if (result) {\n    //         onSubmitBg(result)\n    //     }\n    // }\n    //\n    // const onSubmitBg = async (data) => {\n    //\n    //     console.log(data)\n    //     console.log(data.uri)\n    //\n    //     var file = {\n    //         uri: data.uri,\n    //         type: 'image/jpeg',\n    //         name: data.uri.split('/').pop()\n    //     }\n    //\n    //     console.log(\"FILE\")\n    //     console.log(file)\n    //\n    //     var formData = new FormData();\n    //     formData.append(\"file\", file);\n    //\n    //     var xhr = new XMLHttpRequest();\n    //     xhr.open('POST', URL + `images/uploadUserBackgroundIcon?userId=${auth.authData.id}`);\n    //     xhr.setRequestHeader('Content-Type', 'multipart/form-data');\n    //     console.log('OPENED', xhr.status);\n    //\n    //     xhr.send(formData);\n    //\n    //     xhr.onreadystatechange = function () {\n    //         console.log(xhr.responseText)\n    //         console.log(xhr.status)\n    //     }\n    // }\n\n    const sendData = (result: any) => {\n        const xhr = new XMLHttpRequest();\n\n        xhr.open('POST', URL + `images/uploadUserBackgroundIcon?userId=112`);\n\n\n        const formData = new FormData();\n\n        formData.append('image', {\n            // @ts-ignore\n            uri: result.uri,\n            type: result.type + \"/\" + result.uri.split(\"/\")[11],\n            name: result.uri.split(\"/\")[11]\n        });\n\n        xhr.send(formData);\n\n        xhr.onreadystatechange = function () {\n            if (xhr.status === 200) {\n                Toast.show({\n                    type: \"dayl\",\n                    props: {\n                        title: \"Success\",\n                        text: \"Changed banner\",\n                    }\n                })\n            } else {\n                Toast.show({\n                    type: \"dayl\",\n                    props: {\n                        title: \"Error\",\n                        text: \"Could not change banner\",\n                    }\n                })\n            }\n        }\n    }\n\n    // LAUNCH CAMERA OR FILE MANAGER\n    const pickImage = async () => {\n        // CHECK PERMISSIONS\n\n\n        // CHOOSE PICTURE\n        let result = await ImagePicker.launchImageLibraryAsync({\n            mediaTypes: ImagePicker.MediaTypeOptions.Images,\n            allowsEditing: true,\n            quality: 1,\n        });\n\n        // CASE NO PICTURE WERE CHOSEN\n        if (result.cancelled) {\n            return\n        }\n\n        // CASE PICTURE IS VALID => SEND DATA TO API\n        if (result) {\n            sendData(result)\n        }\n    }\n\n\n    return (\n        <View style={{backgroundColor: \"green\", width: '100%', height: '100%'}}>\n            <TouchableOpacity style={{width: 200, height: 50, backgroundColor: \"red\", marginTop: 200}} onPress={() => {\n                pickImage()\n            }}>\n\n            </TouchableOpacity>\n            <View style={{borderColor: \"red\", borderWidth: 1, width: 201, height: 201}}>\n                <Image style={{width: 200, height: 200}}\n                       source={{uri: URL + `images/contentUser/${auth.authData.id}/${auth.authData.backgroundImage}`}}/>\n            </View>\n\n        </View>\n    )\n}\n\nconst screenHeight = Dimensions.get('screen').height\nconst screenWidth = Dimensions.get('screen').width\nconst styles = StyleSheet.create({});\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/screens/ImagePickerTest.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 195,
    "kind": "function",
    "name": "ImagePickerTest",
    "memberof": "src/screens/ImagePickerTest.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/ImagePickerTest.tsx~ImagePickerTest",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/screens/ImagePickerTest.tsx",
    "importStyle": "ImagePickerTest",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 196,
    "kind": "variable",
    "name": "screenHeight",
    "memberof": "src/screens/ImagePickerTest.tsx",
    "static": true,
    "longname": "src/screens/ImagePickerTest.tsx~screenHeight",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/ImagePickerTest.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 226,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 197,
    "kind": "variable",
    "name": "screenWidth",
    "memberof": "src/screens/ImagePickerTest.tsx",
    "static": true,
    "longname": "src/screens/ImagePickerTest.tsx~screenWidth",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/ImagePickerTest.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 227,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 198,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/screens/ImagePickerTest.tsx",
    "static": true,
    "longname": "src/screens/ImagePickerTest.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/ImagePickerTest.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 228,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 199,
    "kind": "file",
    "name": "src/screens/ListContentPage.tsx",
    "content": "import {Animated, Button, Modal, Platform, SafeAreaView, StyleSheet, View} from 'react-native';\nimport React, {useEffect, useRef, useState} from \"react\";\nimport colors from \"../../constants/Colors\";\nimport TopBarAnimatedHeader from \"../components/TopBarAnimatedHeader\";\nimport {Artwork, HeaderType, ListActions, PageTypeList} from \"../../types\";\nimport axios from \"axios\";\nimport {useAuth} from \"../contexts/Auth\";\nimport {URL} from \"../services/constantes\"\nimport HeaderListComponent from \"../components/HeaderComponent/HeaderListComponent\";\nimport SmallerSearchBar from \"../components/Utilities/SearchBar/SmallerSearchBar\";\nimport layout from \"../../constants/Layout\";\nimport EditListModal from \"../components/Modals/EditListModal\";\nimport ToolBarListPage from \"../components/Utilities/ToolBarListPage\";\nimport MyListsComponent from \"../components/SquareComponentGrid/MyLists\";\nimport ArtworkGrid from \"../components/ArtworkGrid\";\nimport {useInteractions} from \"../contexts/UserInteractions\";\n\n/**\n * TODO LEO\n * @param route\n * @constructor\n */\nexport default function ListContentPage({route}: any) {\n\n    const {\n        id,\n        name,\n        data\n    }: {\n        id: string | undefined,\n        name: string,\n        data?: Artwork[]\n    } = route.params\n\n    const userInt = useInteractions()\n\n    const scrollY = useRef(new Animated.Value(0)).current;\n\n    let [pointerEventTopBar, setPointerEvenTopBar] = useState<any>(\"none\")\n\n    const [painting, setPainting] = useState<[Artwork] | []>([]);\n\n    const [clicked, setClicked] = useState(false)\n\n    const [searchPhrase, setSearchPhrase] = useState(\"\")\n\n    const [newData, setNewData] = useState(data)\n\n    const [modalVisible, setModalVisible] = useState(false)\n\n    const [addToListModal, setAddToListModal] = useState(false)\n\n    const auth = useAuth()\n\n    useEffect(() => {\n        const temp = painting.filter(item => item.artworkName.toLowerCase().includes(searchPhrase.toLowerCase()) || item.artistName.toLowerCase().includes(searchPhrase.toLowerCase()))\n        setNewData(temp)\n    }, [searchPhrase])\n\n    useEffect(() => {\n        userInt.setEdit(false)\n        if (data)\n            setNewData(data)\n    }, [])\n\n    if (!data) {\n        if (id === undefined) {\n            useEffect(() => {\n\n                if (auth.authData.paintingLiked) {\n                    setPainting([])\n                    for (let i = 0; i < auth.authData.paintingLiked.length; i++)\n                        axios.get(URL + `paintingEntity/${auth.authData.paintingLiked[i]}`).then((response) => {\n\n                            let data = response.data;\n                            let parsedData: Artwork = {\n                                id: data.id,\n                                imageUri: URL + `images/content/mini/${data.artist_idtf_intern}/${data.generatedId}`,\n                                artistName: data.artist_name_tot,\n                                artworkName: data.aw_title_Eng,\n                                artistId: data.artist_idtf_intern\n                            }\n                            // @ts-ignore\n                            setPainting(painting => [...painting, parsedData]);\n                            setNewData(painting)\n                        });\n                }\n            }, [auth.authData.paintingLiked]);\n\n        } else {\n            useEffect(() => {\n                setPainting([])\n                axios.get(URL + `userLists/detailByListId`, {params: {listId: id}}).then((response) => {\n                    let data = response.data.listPaintings;\n                    const parsedData = data.map((el: any) => {\n                        return {\n                            id: el.id,\n                            imageUri: URL + `images/content/mini/${el.artist_idtf_intern}/${el.generatedId}`,\n                            artistName: el.artist_name_tot,\n                            artworkName: el.aw_title_Eng,\n                            artistId: el.artist_idtf_intern\n                        }\n                    })\n                    setPainting(parsedData)\n                });\n            }, [id, auth.refreshKey]);\n        }\n    } else {\n        useEffect(() => {\n            setPainting(data)\n        }, [])\n    }\n\n\n    return (\n        <View style={styles.container}>\n            {/*ANIMATED TOP BAR THAT APPEARS WHEN SCROLL DOWN*/}\n            <View style={[styles.topBar]} pointerEvents={pointerEventTopBar}>\n                <TopBarAnimatedHeader title={name} type={HeaderType.List} scrollY={scrollY}/>\n            </View>\n\n\n            <Modal animationType={\"fade\"} transparent={true} visible={addToListModal}\n                   onRequestClose={() => {\n                       setAddToListModal(!addToListModal)\n                   }}>\n                <SafeAreaView style={styles.modal}>\n                    <Button onPress={() => {\n                        setAddToListModal(!addToListModal)\n                    }} title={\"close\"}/>\n                    <MyListsComponent action={ListActions.add}/>\n                </SafeAreaView>\n            </Modal>\n\n            {/*ANIMATED SCROLL VIEW*/}\n            <Animated.ScrollView alwaysBounceVertical={true} scrollEventThrottle={16}\n                                 showsVerticalScrollIndicator={false}\n                                 onScroll={Animated.event([{nativeEvent: {contentOffset: {y: scrollY}}}], {\n                                     useNativeDriver: true,\n                                     listener: (event: any) => setPointerEvenTopBar(event.nativeEvent.contentOffset.y > 90 ? \"auto\" : \"none\")\n                                 })}>\n\n                {/*ANIMATED HEADER*/}\n                <HeaderListComponent listName={name} scrollY={scrollY}\n                                     fourImages={data ? searchPhrase === \"\" ? painting : newData : painting}/>\n\n                {/*Search Bar*/}\n                {id && <SmallerSearchBar clicked={clicked} searchPhrase={searchPhrase} setSearchPhrase={setSearchPhrase}\n                                         setClicked={setClicked}/>}\n\n                {/* ARTWORK GRID */}\n                <ArtworkGrid data={searchPhrase === \"\" ? painting : newData}/>\n\n                {<ToolBarListPage type={!data ? PageTypeList.MyList : PageTypeList.OtherList} listId={id}\n                                  modalVisible={modalVisible} setModalVisible={setModalVisible}\n                                  addToListModal={addToListModal} setAddToListModal={setAddToListModal}/>}\n\n                {/*EDIT LIST MODAL*/}\n                {id && <EditListModal listId={id} modalVisible={modalVisible} setModalVisible={setModalVisible}/>}\n\n            </Animated.ScrollView>\n        </View>\n    )\n}\n\nconst height = layout.window.height\nconst styles = StyleSheet.create({\n    container: {\n        width: '100%',\n        flex: 1,\n        paddingTop: Platform.OS === 'android' ? 25 : 0,\n    },\n    topBar: {\n        zIndex: 4\n    },\n    containerModal: {\n        height: 2 * height / 7,\n        backgroundColor: \"#1c1e21\",\n        top: height / 2 - height / 5,\n        borderRadius: 20,\n        width: '95%',\n        alignSelf: \"center\"\n    },\n    renameText: {\n        fontSize: 30,\n        color: \"white\",\n        fontWeight: \"bold\",\n        justifyContent: \"center\",\n        alignSelf: \"center\",\n        marginTop: 20\n    },\n    textInput: {\n        borderWidth: 1,\n        borderColor: \"white\",\n        borderRadius: 10,\n        marginTop: 30,\n        height: '15%',\n        width: '90%',\n        justifyContent: \"center\",\n        alignSelf: \"center\",\n        color: \"white\",\n        fontSize: 20,\n\n    },\n    submitButton: {\n        backgroundColor: colors.daylRed.text,\n        height: '20%',\n        width: '90%',\n        alignSelf: \"center\",\n        marginTop: 30,\n        borderRadius: 10,\n        justifyContent: \"center\"\n    },\n    submitText: {\n        color: \"white\",\n        fontSize: 20,\n        fontWeight: \"bold\",\n        textAlign: \"center\",\n        textAlignVertical: \"center\",\n        justifyContent: \"center\",\n        alignSelf: \"center\",\n    },\n    deleteList: {\n        position: \"absolute\",\n        right: 20,\n        top: 25\n    },\n    cross: {\n        position: \"absolute\",\n        left: 20,\n        top: 25\n    },\n    modal: {\n        backgroundColor: \"black\",\n        color: \"black\",\n        height: '100%'\n\n    },\n});",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/screens/ListContentPage.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 200,
    "kind": "function",
    "name": "ListContentPage",
    "memberof": "src/screens/ListContentPage.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/ListContentPage.tsx~ListContentPage",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/screens/ListContentPage.tsx",
    "importStyle": "ListContentPage",
    "description": "TODO LEO",
    "lineNumber": 23,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 201,
    "kind": "variable",
    "name": "height",
    "memberof": "src/screens/ListContentPage.tsx",
    "static": true,
    "longname": "src/screens/ListContentPage.tsx~height",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/ListContentPage.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 166,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 202,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/screens/ListContentPage.tsx",
    "static": true,
    "longname": "src/screens/ListContentPage.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/ListContentPage.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 167,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 203,
    "kind": "file",
    "name": "src/screens/Login.tsx",
    "content": "import {Dimensions, Platform, SafeAreaView, StyleSheet, Text, TouchableOpacity, View} from 'react-native';\nimport {LinearGradient} from \"expo-linear-gradient\";\nimport React, {useState} from \"react\";\nimport colors from \"../../constants/Colors\";\nimport {Entypo} from \"@expo/vector-icons\";\nimport CredentialsInputComponent from \"../components/Utilities/CredentialsInput\";\nimport {useAuth} from '../contexts/Auth';\nimport {useNavigation} from \"@react-navigation/native\";\nimport Toast from \"react-native-toast-message\";\n\n/**\n * Page used for logging in the app\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=1WcFKurJ5a-S5k91C-symqzRa0Yf_XRSw\" alt=\"ArtworkPage\" height=\"500\">\n * @constructor\n * @return LoginScreen\n */\nexport default function LoginScreen() {\n\n    const [email, setEmail] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n\n    const auth = useAuth()\n\n    const onPressLogIn = () => {\n        const signIn = auth.logIn(email, password)\n    }\n\n    // TODO\n    const lostPassword = () => {\n        if (email != \"\") {\n\n        } else {\n            Toast.show({\n                type: \"dayl\",\n                props: {\n                    title: \"Success\",\n                    text: \"Please enter valid email\",\n                }\n            })\n        }\n    }\n\n    const navigation = useNavigation()\n\n    return (\n        <View style={styles.container}>\n            {/*DESIGN : GRADIENT*/}\n            <LinearGradient colors={['black', colors.daylRed.text]} start={{x: 0, y: 1,}} end={{x: 0, y: 0}}\n                            style={[styles.linearGradient]}/>\n            <SafeAreaView style={styles.safeview}>\n                <View style={styles.headerSignUp}>\n                    {/*BACK BUTTON*/}\n                    <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>\n                        <Entypo name={\"chevron-left\"} size={35} color={\"white\"}/>\n                    </TouchableOpacity>\n\n                    <Text style={styles.signUp}>Log in</Text>\n\n                    <View style={styles.emptyViewRight}></View>\n                </View>\n            </SafeAreaView>\n            <View>\n                {/*INPUT FIELD TO ENTER EMAIL OF USER*/}\n                <CredentialsInputComponent credentialsNeeded={\"Email\"} value={email} setValue={setEmail}/>\n                {/*INPUT FIELD TO ENTER PASSWORD OF USER*/}\n                <CredentialsInputComponent credentialsNeeded={\"Password\"} value={password} setValue={setPassword}/>\n            </View>\n            {/*LOST PASSWORD BUTTON*/}\n            <TouchableOpacity style={styles.button} onPress={() => lostPassword()}>\n                <Text style={styles.buttonText}>Lost password?</Text>\n            </TouchableOpacity>\n            {/*LOGIN BUTTON*/}\n            <TouchableOpacity style={styles.buttonLogIn} onPress={() => onPressLogIn()}>\n                <Text style={styles.buttonTextLogIn}>Log in</Text>\n            </TouchableOpacity>\n        </View>\n    )\n}\n\nconst screenHeight = Dimensions.get('screen').height\nconst screenWidth = Dimensions.get('screen').width\nconst styles = StyleSheet.create({\n\n    container: {\n        width: '100%',\n        height: '100%',\n        paddingTop: Platform.OS === 'android' ? 50 : 0,\n    },\n\n    linearGradient: {\n        position: \"absolute\",\n        width: '100%',\n        height: '100%',\n        resizeMode: 'cover',\n        zIndex: 0\n    },\n\n    safeview: {\n        justifyContent: \"center\",\n    },\n\n    button: {\n        marginTop: screenHeight / 40,\n        borderRadius: 20,\n        paddingTop: screenHeight / 80,\n        paddingBottom: screenHeight / 80,\n        paddingRight: screenWidth / 15,\n        paddingLeft: screenWidth / 15,\n        alignSelf: \"center\",\n        alignItems: \"center\",\n        backgroundColor: \"transparent\",\n        justifyContent: \"center\",\n        flexDirection: \"row\",\n        borderWidth: 2,\n        borderColor: \"white\"\n    },\n\n    buttonText: {\n        textAlign: \"center\",\n        justifyContent: \"center\",\n        fontSize: 15,\n\n        color: \"white\"\n    },\n\n    buttonLogIn: {\n        position: \"absolute\",\n        bottom: 0,\n\n        alignSelf: \"center\",\n        borderRadius: 18,\n        backgroundColor: \"white\",\n        justifyContent: \"center\",\n        paddingTop: screenHeight / 65,\n        paddingBottom: screenHeight / 65,\n        paddingRight: screenWidth / 8,\n        paddingLeft: screenWidth / 8,\n        marginBottom: 65\n    },\n\n    buttonTextLogIn: {\n        textAlign: \"center\",\n        justifyContent: \"center\",\n        fontSize: 20,\n        fontWeight: \"bold\",\n        color: \"black\"\n    },\n\n    headerSignUp: {\n        flexDirection: \"row\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\"\n    },\n\n    backButton: {\n        marginLeft: 20,\n        width: '10%'\n    },\n\n    signUp: {\n        fontSize: 22,\n        color: \"white\"\n    },\n\n    emptyViewRight: {\n        marginRight: 20,\n        width: '10%'\n    }\n\n});\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/screens/Login.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 204,
    "kind": "function",
    "name": "LoginScreen",
    "memberof": "src/screens/Login.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/Login.tsx~LoginScreen",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/screens/Login.tsx",
    "importStyle": "LoginScreen",
    "description": "Page used for logging in the app\n\n<img src=\"https://drive.google.com/uc?export=view&id=1WcFKurJ5a-S5k91C-symqzRa0Yf_XRSw\" alt=\"ArtworkPage\" height=\"500\">",
    "lineNumber": 18,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "LoginScreen"
    },
    "params": []
  },
  {
    "__docId__": 205,
    "kind": "variable",
    "name": "screenHeight",
    "memberof": "src/screens/Login.tsx",
    "static": true,
    "longname": "src/screens/Login.tsx~screenHeight",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/Login.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 81,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 206,
    "kind": "variable",
    "name": "screenWidth",
    "memberof": "src/screens/Login.tsx",
    "static": true,
    "longname": "src/screens/Login.tsx~screenWidth",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/Login.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 82,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 207,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/screens/Login.tsx",
    "static": true,
    "longname": "src/screens/Login.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/Login.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 83,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 208,
    "kind": "file",
    "name": "src/screens/MatchingByColorPage.tsx",
    "content": "import {Platform, SafeAreaView, ScrollView, StyleSheet, TouchableOpacity} from 'react-native';\nimport MatchingByColorGrid from \"../components/ArtworkGrid/MatchingByColorGrid\";\nimport {MaterialIcons} from \"@expo/vector-icons\";\nimport layout from \"../../constants/Layout\";\nimport ColorPickerModal from \"../components/Modals/ColorPickerModal\";\nimport {useState} from \"react\";\n\n/**\n * Page displaying artworks when the user starts a matching by color\n * @param {Object} route\n * @param {string} color - Color picked by the user\n * @constructor\n * @return MatchingByColorPage\n */\nexport default function MatchingByColorPage({route}: any) {\n\n    let {\n        color,\n    }: {\n        color: string,\n    } = route.params\n\n    const [isModalVisible, setModalVisible] = useState(false)\n    const [newColor, setColor] = useState(color)\n\n    return (\n        <SafeAreaView style={styles.container}>\n            {/*COLOR PICKER MODAL*/}\n            <ColorPickerModal isModalVisible={isModalVisible} setModalVisible={setModalVisible} color={newColor}\n                              setColor={setColor}/>\n            {/*COLOR ICON - TO CHOOSE ANOTHER COLOR*/}\n            <TouchableOpacity style={[{backgroundColor: `#${color}`}, styles.colorPickerButton]}\n                              onPress={() => setModalVisible(true)}>\n                <MaterialIcons name={\"colorize\"} size={30} color={\"white\"}/>\n            </TouchableOpacity>\n            {/*RESULT MATCHING ARTWORK GRID*/}\n            <ScrollView showsVerticalScrollIndicator={false}>\n                <MatchingByColorGrid color={color}/>\n            </ScrollView>\n        </SafeAreaView>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        paddingTop: Platform.OS === 'android' ? 25 : 0,\n    },\n    colorPickerButton: {\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        position: \"absolute\",\n        bottom: 30,\n        right: 30,\n        borderRadius: 30,\n        zIndex: 3,\n        width: layout.window.width / 7,\n        height: layout.window.width / 7\n    }\n});\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/screens/MatchingByColorPage.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 209,
    "kind": "function",
    "name": "MatchingByColorPage",
    "memberof": "src/screens/MatchingByColorPage.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/MatchingByColorPage.tsx~MatchingByColorPage",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/screens/MatchingByColorPage.tsx",
    "importStyle": "MatchingByColorPage",
    "description": "Page displaying artworks when the user starts a matching by color",
    "lineNumber": 15,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "color",
        "description": "Color picked by the user"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "MatchingByColorPage"
    }
  },
  {
    "__docId__": 210,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/screens/MatchingByColorPage.tsx",
    "static": true,
    "longname": "src/screens/MatchingByColorPage.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/MatchingByColorPage.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 44,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 211,
    "kind": "file",
    "name": "src/screens/MessagesPage.tsx",
    "content": "import {Platform, SafeAreaView, ScrollView, StyleSheet, Text, TouchableOpacity, View} from 'react-native';\nimport React from \"react\";\nimport {MessagePreview} from \"../../types\";\nimport MessageGrid from \"../components/SocialNetwork/MessageGrid\";\nimport {useNavigation} from \"@react-navigation/native\";\nimport {Entypo} from \"@expo/vector-icons\";\n\n/**\n * TODO\n * @ignore\n * @constructor\n */\nexport default function MessagesPage() {\n\n    // TODO : CHANGE STATIC\n\n    const pdp1 = \"https://upload.wikimedia.org/wikipedia/commons/thumb/9/98/Pablo_picasso_1.jpg/800px-Pablo_picasso_1.jpg\"\n\n    const pdp2 = \"https://www.larousse.fr/encyclopedie/data/images/1311089-Vincent_Van_Gogh_Portrait_de_lartiste.jpg\"\n\n    const messages: MessagePreview[] = [\n        {\n            userName: \"Pablo Picasso\",\n            userAvatar: pdp1,\n            date: \"6hrs ago\",\n            lastMessage: \"Love your art !\",\n            id: \"1\"\n        },\n        {\n            userName: \"Pablo Picasso\",\n            userAvatar: pdp1,\n            date: \"6hrs ago\",\n            lastMessage: \"Love your art !\",\n            id: \"2\"\n        },\n        {\n            userName: \"Pablo Picasso\",\n            userAvatar: pdp1,\n            date: \"6hrs ago\",\n            lastMessage: \"Love your art !\",\n            id: \"3\"\n        },\n        {\n            userName: \"Pablo Picasso\",\n            userAvatar: pdp1,\n            date: \"6hrs ago\",\n            lastMessage: \"Love your art !\",\n            id: \"4\"\n        },\n    ]\n\n    const navigation = useNavigation()\n\n    return (\n        <SafeAreaView style={styles.container}>\n            <ScrollView>\n                <View style={styles.headerWithBackbutton}>\n                    <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>\n                        <Entypo name={\"chevron-left\"} size={35} color={\"white\"}/>\n                    </TouchableOpacity>\n\n                    <Text style={styles.signUp}>Messages</Text>\n\n                    <View style={styles.emptyViewRight}></View>\n\n                </View>\n                <MessageGrid messages={messages}/>\n            </ScrollView>\n        </SafeAreaView>)\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        paddingTop: Platform.OS === \"android\" ? 30 : 0\n    },\n    title: {\n        textAlign: \"center\", fontSize: 25, color: \"white\", marginBottom: 20\n    },\n    headerWithBackbutton: {\n        flexDirection: \"row\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        marginTop: 10,\n        marginBottom: 10\n    },\n    backButton: {\n        marginLeft: 20,\n        width: '10%'\n    },\n\n    signUp: {\n\n        fontSize: 22,\n        color: \"white\"\n    },\n    emptyViewRight: {\n        marginRight: 20,\n\n        width: '10%'\n    }\n\n});",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/screens/MessagesPage.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 212,
    "kind": "function",
    "name": "MessagesPage",
    "memberof": "src/screens/MessagesPage.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/MessagesPage.tsx~MessagesPage",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/screens/MessagesPage.tsx",
    "importStyle": "MessagesPage",
    "description": "TODO",
    "lineNumber": 13,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 213,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/screens/MessagesPage.tsx",
    "static": true,
    "longname": "src/screens/MessagesPage.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/MessagesPage.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 72,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 214,
    "kind": "file",
    "name": "src/screens/ModalScreen.tsx",
    "content": "import {StatusBar} from 'expo-status-bar';\nimport {Platform, StyleSheet} from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport {Text, View} from '../components/Themed';\n\n/**\n * @ignore\n * @constructor\n */\nexport default function ModalScreen() {\n    return (\n        <View style={styles.container}>\n            <Text style={styles.title}>Modal</Text>\n            <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\"/>\n            <EditScreenInfo path=\"/screens/ModalScreen.tsx\"/>\n\n            {/* Use a light status bar on iOS to account for the black space above the modal */}\n            <StatusBar style={Platform.OS === 'ios' ? 'light' : 'auto'}/>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    title: {\n        fontSize: 20,\n        fontWeight: 'bold',\n    },\n    separator: {\n        marginVertical: 30,\n        height: 1,\n        width: '80%',\n    },\n});\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/screens/ModalScreen.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 215,
    "kind": "function",
    "name": "ModalScreen",
    "memberof": "src/screens/ModalScreen.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/ModalScreen.tsx~ModalScreen",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/screens/ModalScreen.tsx",
    "importStyle": "ModalScreen",
    "description": "",
    "lineNumber": 11,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 216,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/screens/ModalScreen.tsx",
    "static": true,
    "longname": "src/screens/ModalScreen.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/ModalScreen.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 217,
    "kind": "file",
    "name": "src/screens/MyProfile.tsx",
    "content": "import {Animated, Platform, RefreshControl, StyleSheet, TouchableOpacity, View} from 'react-native';\nimport React, {useEffect, useRef, useState} from \"react\";\nimport {useAuth} from \"../contexts/Auth\";\nimport TopBarAnimatedHeader from \"../components/TopBarAnimatedHeader\";\nimport MyListsComponent from \"../components/SquareComponentGrid/MyLists\";\nimport {HeaderType, ListActions} from \"../../types\";\nimport MyLikedArtists from \"../components/SquareComponentGrid/MyArtists\";\nimport Informations from \"../components/Informations\";\nimport UserData from \"../components/UserData\";\nimport HeaderUserComponent from \"../components/HeaderComponent/HeaderUserComponent\";\nimport LikedArtworksCarousel from \"../components/ArtworkCarouselDouble/LikedArtworksCarousel\";\nimport {Entypo} from \"@expo/vector-icons\";\nimport ThreeDotsProfileModal from \"../components/Modals/ThreeDotsProfileModal\";\nimport Toast from \"react-native-toast-message\";\n\n// USED FOR REFRESHING\nconst wait = (timeout: number) => {\n    return new Promise(resolve => setTimeout(resolve, timeout));\n}\n\n/**\n * Profile page of the user\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=1WgHBpa1CEHrexFU6I9vf5w_QyG8-DWAL\" alt=\"ArtworkPage\" height=\"500\">\n * @constructor\n * @return MyProfile\n */\nexport default function MyProfile() {\n\n    const scrollY = useRef(new Animated.Value(0)).current;\n    const auth = useAuth()\n\n    const [threeDotsVisible, setThreeDotsVisible] = useState(false)\n\n    // USE STATE FOR REFRESHING PAGE\n    const [refreshPage, setRefreshPage] = useState(false)\n\n    // CALLBACK TO REFRESH PAGE WHEN PULLING UP\n    const onRefresh = React.useCallback(() => {\n        auth.reloadData()\n        setRefreshPage(true);\n        wait(2000).then(() => setRefreshPage(false));\n    }, []);\n\n    // FUNCTION TO MONITOR SCROLL Y AND DEACTIVATE TOP BAR ACCORDINGLY\n    function deactivateTopBar(event: any) {\n        if (event.nativeEvent.contentOffset.y > 90)\n            setPointerEvenTopBar(\"auto\")\n        else\n            setPointerEvenTopBar(\"none\")\n    }\n\n    //USE STATE TO DEACTIVATE TOP BAR WHEN SCROLL UP\n    let [pointerEventTopBar, setPointerEvenTopBar] = useState<any>(\"none\")\n\n    const threeMenuOpacity = scrollY.interpolate({\n        inputRange: [-20, -10, 0], outputRange: [0, 0.4, 1], extrapolate: 'clamp',\n    })\n\n    return (\n        <View>\n            {/*ANIMATED TOP BAR THAT APPEARS WHEN SCROLL DOWN*/}\n            <View style={[styles.topBar]} pointerEvents={pointerEventTopBar}>\n                <TopBarAnimatedHeader title={auth.authData.firstName + \" \" + auth.authData.lastName} type={HeaderType.User} scrollY={scrollY}/>\n            </View>\n\n            {/*USER MENU BUTTON*/}\n            <TouchableOpacity style={[styles.menuButton]} onPress={() => setThreeDotsVisible(!threeDotsVisible)}>\n                <Animated.View style={{opacity: threeMenuOpacity}}>\n                    <Entypo name={\"menu\"} size={30} color={\"white\"}/>\n                </Animated.View>\n            </TouchableOpacity>\n\n            {/*USER MENU MODAL*/}\n            <ThreeDotsProfileModal modalVisible={threeDotsVisible} setModalVisible={setThreeDotsVisible}/>\n\n\n            {/*ANIMATED SCROLL VIEW*/}\n            <Animated.ScrollView alwaysBounceVertical={true} scrollEventThrottle={16}\n                                 showsVerticalScrollIndicator={false}\n                                 refreshControl={<RefreshControl refreshing={refreshPage} onRefresh={onRefresh}/>}\n                                 onScroll={Animated.event([{nativeEvent: {contentOffset: {y: scrollY}}}], {\n                                     useNativeDriver: true,\n                                     listener: (event: Object) => deactivateTopBar(event)\n                                 })}>\n\n                {/*HEADER USER COMPONENT*/}\n                <HeaderUserComponent scrollY={scrollY}/>\n\n                {/*USER DATA*/}\n                <UserData/>\n\n                {/*BIOGRAPHY USER*/}\n                <Informations title={\"Profile\"} text={auth.authData.biography}/>\n\n                {/*LIKED WORKS*/}\n                <LikedArtworksCarousel/>\n\n                {/*LISTS*/}\n                <MyListsComponent action={ListActions.view}/>\n\n                {/*MY ARTISTS*/}\n                <MyLikedArtists/>\n\n\n\n\n            </Animated.ScrollView>\n        </View>)\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        width: '100%',\n        flex: 1,\n        paddingTop: Platform.OS === 'android' ? 25 : 0,\n    },\n    topBar: {\n        zIndex: 4\n    },\n    menuButton: {\n        position: \"absolute\",\n        top: 42,\n        right: 35,\n        zIndex: 10\n    }\n\n});\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/screens/MyProfile.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 218,
    "kind": "function",
    "name": "wait",
    "memberof": "src/screens/MyProfile.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/MyProfile.tsx~wait",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/MyProfile.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "timeout",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 219,
    "kind": "function",
    "name": "MyProfile",
    "memberof": "src/screens/MyProfile.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/MyProfile.tsx~MyProfile",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/screens/MyProfile.tsx",
    "importStyle": "MyProfile",
    "description": "Profile page of the user\n\n<img src=\"https://drive.google.com/uc?export=view&id=1WgHBpa1CEHrexFU6I9vf5w_QyG8-DWAL\" alt=\"ArtworkPage\" height=\"500\">",
    "lineNumber": 28,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "MyProfile"
    },
    "params": []
  },
  {
    "__docId__": 220,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/screens/MyProfile.tsx",
    "static": true,
    "longname": "src/screens/MyProfile.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/MyProfile.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 221,
    "kind": "file",
    "name": "src/screens/NewPostPage.tsx",
    "content": "import {Image, StyleSheet, View} from 'react-native';\nimport React, {useState} from \"react\";\nimport NewPostHeader from \"../components/SocialNetwork/NewPost/NewPostHeader\";\nimport NewPostText from \"../components/SocialNetwork/NewPost/NewPostText\";\nimport NewPostToolBar from \"../components/SocialNetwork/NewPost/NewPostToolBar\";\nimport ImagePickerComponent from \"../components/ImagePickerComponent\";\nimport {ImagePicked} from \"../../types\";\nimport LocationPickerComponent from \"../components/LocationPickerComponent\";\nimport {useNavigation} from \"@react-navigation/native\";\n\n/**\n * TODO\n * @ignore\n * @constructor\n */\nexport default function NewPostPage() {\n\n    const navigation = useNavigation()\n\n    const [isImagePickerVisible, setImagePickerVisible] = useState(false)\n    const [isLocationPickerVisible, setLocationPickerVisible] = useState(false)\n    const [isTagVisible, setTagVisible] = useState(false)\n\n    const [text, setText] = useState(\"\")\n    const [image, setImage] = useState<ImagePicked>({uri: \"\", height: 0, width: 0})\n    const [location, setLocation] = useState({})\n\n    const ratio = image ? image.height / image.width : 0;\n\n    const onPress = () => {\n        console.log({\n            imageUri: image.uri,\n            text: text,\n        })\n        navigation.goBack()\n    }\n\n    return (\n        <View style={styles.container}>\n            <View>\n                <NewPostHeader onPress={onPress}/>\n                <NewPostText text={text} setText={setText}/>\n                {image.uri ?\n                    <Image source={{uri: image.uri, height: ratio * 300, width: 300}} style={[styles.image]}/> : null}\n            </View>\n            <View style={styles.toolbar}>\n                <NewPostToolBar isImagePickerVisible={isImagePickerVisible}\n                                setImagePickerVisible={setImagePickerVisible}\n                                isLocationPickerVisible={isLocationPickerVisible}\n                                setLocationPickerVisible={setLocationPickerVisible}/>\n            </View>\n            <ImagePickerComponent isImagePickerVisible={isImagePickerVisible}\n                                  setImagePickerVisible={setImagePickerVisible} image={image} setImage={setImage}/>\n            <LocationPickerComponent isLocationPickerVisible={isLocationPickerVisible}\n                                     setLocationPickerVisible={setLocationPickerVisible} location={location}\n                                     setLocation={setLocation}/>\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        paddingTop: 30, height: \"100%\", flexDirection: \"column\", justifyContent: \"space-between\",\n    },\n    image: {\n        alignSelf: \"center\",\n        borderRadius: 20,\n        resizeMode: \"contain\"\n    },\n    toolbar: {}\n});\n\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/screens/NewPostPage.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 222,
    "kind": "function",
    "name": "NewPostPage",
    "memberof": "src/screens/NewPostPage.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/NewPostPage.tsx~NewPostPage",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/screens/NewPostPage.tsx",
    "importStyle": "NewPostPage",
    "description": "TODO",
    "lineNumber": 16,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 223,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/screens/NewPostPage.tsx",
    "static": true,
    "longname": "src/screens/NewPostPage.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/NewPostPage.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 61,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 224,
    "kind": "file",
    "name": "src/screens/NotFoundScreen.tsx",
    "content": "import {StyleSheet, TouchableOpacity} from 'react-native';\n\nimport {Text, View} from '../components/Themed';\nimport {RootStackScreenProps} from '../../types';\n\n/**\n * @ignore\n * @param navigation\n * @constructor\n */\nexport default function NotFoundScreen({navigation}: RootStackScreenProps<'NotFound'>) {\n    return (\n        <View style={styles.container}>\n            <Text style={styles.title}>This screen doesn't exist.</Text>\n            <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n                <Text style={styles.linkText}>Go to home screen!</Text>\n            </TouchableOpacity>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center',\n        padding: 20,\n    },\n    title: {\n        fontSize: 20,\n        fontWeight: 'bold',\n    },\n    link: {\n        marginTop: 15,\n        paddingVertical: 15,\n    },\n    linkText: {\n        fontSize: 14,\n        color: '#2e78b7',\n    },\n});\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/screens/NotFoundScreen.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 225,
    "kind": "function",
    "name": "NotFoundScreen",
    "memberof": "src/screens/NotFoundScreen.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/NotFoundScreen.tsx~NotFoundScreen",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/screens/NotFoundScreen.tsx",
    "importStyle": "NotFoundScreen",
    "description": "",
    "lineNumber": 11,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "navigation",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 226,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/screens/NotFoundScreen.tsx",
    "static": true,
    "longname": "src/screens/NotFoundScreen.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/NotFoundScreen.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 227,
    "kind": "file",
    "name": "src/screens/NotificationsPage.tsx",
    "content": "import {Platform, SafeAreaView, ScrollView, StyleSheet, Text, TouchableOpacity, View} from 'react-native';\nimport React from \"react\";\nimport ConnectionRequest from \"../components/SocialNetwork/Notifications/ConnectionRequest\";\nimport NotificationGrid from \"../components/SocialNetwork/Notifications/NotificationGrid\";\nimport {Notification} from '../../types';\nimport {useNavigation} from \"@react-navigation/native\";\nimport {Entypo} from \"@expo/vector-icons\";\n\n/**\n * TODO\n * @ignore\n * @param route\n * @constructor\n */\nexport default function NotificationsPage({route}: any) {\n\n    // TODO : CHANGE STATIC\n\n    const pdp1 = \"https://upload.wikimedia.org/wikipedia/commons/thumb/9/98/Pablo_picasso_1.jpg/800px-Pablo_picasso_1.jpg\"\n\n    const pdp2 = \"https://www.larousse.fr/encyclopedie/data/images/1311089-Vincent_Van_Gogh_Portrait_de_lartiste.jpg\"\n\n\n    const notifList: Notification[] = [\n        {\n            userName: \"pablopicasso\",\n            userAvatar: pdp1,\n            date: \"6hrs ago\",\n            type: \"like\",\n            id: \"1\"\n        },\n        {\n            userName: \"pablopicasso\",\n            userAvatar: pdp1,\n            date: \"6hrs ago\",\n            type: \"like\",\n            id: \"2\"\n        },\n        {\n            userName: \"pablopicasso\",\n            userAvatar: pdp1,\n            date: \"6hrs ago\",\n            type: \"like\",\n            id: \"3\"\n        },\n    ]\n\n    const navigation = useNavigation()\n\n    return (\n        <SafeAreaView style={styles.container}>\n\n            <ScrollView>\n                <View style={styles.headerWithBackbutton}>\n                    <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>\n                        <Entypo name={\"chevron-left\"} size={35} color={\"white\"}/>\n                    </TouchableOpacity>\n\n                    <Text style={styles.signUp}>Notifications</Text>\n\n                    <View style={styles.emptyViewRight}></View>\n\n                </View>\n                <ConnectionRequest requestNumber={500} lastRequestUser={{user1Avatar: pdp1, user2Avatar: pdp2}}/>\n                <NotificationGrid title={\"This month\"} notifications={notifList}/>\n                <NotificationGrid title={\"This year\"} notifications={notifList}/>\n            </ScrollView>\n        </SafeAreaView>)\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        paddingTop: Platform.OS === \"android\" ? 30 : 0\n    },\n    title: {\n        textAlign: \"center\",\n        fontSize: 25, color: \"white\",\n    },\n    headerWithBackbutton: {\n        flexDirection: \"row\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n        marginTop: 10\n    },\n    backButton: {\n        marginLeft: 20,\n        width: '10%'\n    },\n\n    signUp: {\n        fontSize: 22,\n        color: \"white\"\n    },\n    emptyViewRight: {\n        marginRight: 20,\n\n        width: '10%'\n    }\n});\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/screens/NotificationsPage.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 228,
    "kind": "function",
    "name": "NotificationsPage",
    "memberof": "src/screens/NotificationsPage.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/NotificationsPage.tsx~NotificationsPage",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/screens/NotificationsPage.tsx",
    "importStyle": "NotificationsPage",
    "description": "TODO",
    "lineNumber": 15,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 229,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/screens/NotificationsPage.tsx",
    "static": true,
    "longname": "src/screens/NotificationsPage.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/NotificationsPage.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 71,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 230,
    "kind": "file",
    "name": "src/screens/OldArtistPage.tsx",
    "content": "//ARTWORK PAGE\nimport {Animated, StyleSheet, View} from 'react-native';\nimport React, {useEffect, useState} from \"react\";\nimport {HeaderType} from \"../types\";\nimport BackButton from \"../components/Utilities/BackButton\";\nimport OnClickImage from \"../components/Utilities/OnClickImage\";\nimport TopBarAnimatedHeader from \"../components/TopBarAnimatedHeader\";\nimport {IMG1, IMG2, LOREM, PP1, PP2} from \"../services/constantes\";\nimport TabViewComponent, {\n    COLLAPSED_HEIGHT_ARTIST,\n    HEADER_HEIGHT_ARTIST,\n    SCROLLABLE_HEIGHT_ARITST\n} from \"../components/TabViewComponent\";\nimport {TabBar} from \"react-native-tab-view\";\nimport Informations from \"../components/Informations\";\nimport PaintingsFromSameArtist from \"../components/ArtworkCarouselDouble/PaintingsFromSameArtist\";\nimport SimilarArtists from \"../components/SquareComponentGrid/SimilarArtists\";\nimport PostComponent from \"../components/SocialNetwork/PostComponent\";\nimport HeaderArtistNonUser from \"../components/HeaderComponent/HeaderArtistNonUserComponent\";\nimport FollowingButtonComponent from \"../components/Utilities/FollowingButtonComponent\";\nimport colors from \"../constants/Colors\";\n\n\nconst postS = <PostComponent type={\"social\"} image={IMG1} text={LOREM} avatarUri={PP1}\n                             userName={\"Pablo Picasso\"} userId={\"1\"} verified={true} repost={true} threedots={false}\n                             date={\"6hrs ago\"}/>\n\nconst postP = <PostComponent type={\"painting\"} artworkName={\"Nuit étoilée\"} image={IMG2} avatarUri={PP2}\n                             userName={\"Vincent Van Gogh\"}\n                             userId={\"2\"} verified={true} repost={true} threedots={false} date={\"6hrs ago\"}/>\n\nexport default function OldArtistPage({route}: any) {\n\n    const {\n        imageUri,\n        information,\n        artistName,\n        artistId,\n    }: {\n        imageUri: string,\n        information: string,\n        artistName: string,\n        artistId: string,\n    } = route.params\n\n\n    const scrollY = (new Animated.Value(0));\n\n    useEffect(() => {\n        scrollY.setValue(0)\n    }, [artistId])\n\n    const [onClickImage, setOnClickImage] = useState(false)\n\n    let [pointerEventTopBar, setPointerEvenTopBar] = useState<any>(\"none\")\n\n    //ANIMATION\n    const translateY = scrollY.interpolate({\n        inputRange: [0, SCROLLABLE_HEIGHT_ARITST],\n        outputRange: [0, -SCROLLABLE_HEIGHT_ARITST],\n        extrapolate: 'clamp',\n    });\n\n    let translateY2 = scrollY.interpolate({\n        inputRange: [-100, 0], outputRange: [150, 0], extrapolateLeft: \"extend\", extrapolateRight: \"clamp\"\n    })\n\n\n    const firstRoute = () => (\n        <Animated.ScrollView scrollEventThrottle={1}\n                             onScroll={Animated.event(\n                                 [{nativeEvent: {contentOffset: {y: scrollY}}}],\n                                 {useNativeDriver: true,}\n                             )}\n\n                             contentContainerStyle={{paddingTop: HEADER_HEIGHT_ARTIST + COLLAPSED_HEIGHT_ARTIST}}>\n            {/* SUMMARY ON ARTIST */}\n            <Informations title={\"Biography\"} text={information}/>\n            {/*    MORE PAINTINGS FROM SAME ARTIST*/}\n            <PaintingsFromSameArtist artistId={artistId}/>\n            {/*    SIMILAR ARTISTS*/}\n            <SimilarArtists artistId={artistId}/>\n        </Animated.ScrollView>)\n\n\n    const secondRoute = () => (\n        //    ANALYSIS\n        <Animated.ScrollView style={{backgroundColor: 'black', marginTop: 10}} scrollEventThrottle={1}\n                             onScroll={Animated.event(\n                                 [{nativeEvent: {contentOffset: {y: scrollY}}}],\n                                 {useNativeDriver: true}\n                             )}\n                             contentContainerStyle={{paddingTop: HEADER_HEIGHT_ARTIST + COLLAPSED_HEIGHT_ARTIST}}>\n            <PostComponent type={\"analysis\"} avatarUri={PP1} userName={\"Pablo Picasso\"} verified={true} role={\"EXPERT\"}\n                           text={LOREM} repost={false} threedots={false} userId={\"1\"}/>\n            <PostComponent type={\"analysis\"} avatarUri={PP1} userName={\"Pablo Picasso\"} verified={true} role={\"EXPERT\"}\n                           text={LOREM} repost={false} threedots={false} userId={\"1\"}/>\n            <PostComponent type={\"analysis\"} avatarUri={PP1} userName={\"Pablo Picasso\"} verified={true} role={\"EXPERT\"}\n                           text={LOREM} repost={false} threedots={false} userId={\"1\"}/>\n        </Animated.ScrollView>\n    )\n\n\n    const thirdRoute = () => (\n        //    ACTIVITY\n        <Animated.ScrollView style={{backgroundColor: 'black', marginTop: 10}} scrollEventThrottle={1}\n                             onScroll={Animated.event(\n                                 [{nativeEvent: {contentOffset: {y: scrollY}}}],\n                                 {useNativeDriver: true,}\n                             )}\n                             contentContainerStyle={{paddingTop: HEADER_HEIGHT_ARTIST + COLLAPSED_HEIGHT_ARTIST}}>\n            <PostComponent type={\"social\"} image={IMG1} text={LOREM} avatarUri={PP1}\n                           userName={\"Pablo Picasso\"} userId={\"1\"} verified={true} repost={false} threedots={false}\n                           date={\"6hrs ago\"}/>\n            <PostComponent type={\"painting\"} artworkName={\"Nuit étoilée\"} image={IMG2} avatarUri={PP2}\n                           userName={\"Vincent Van Gogh\"}\n                           userId={\"2\"} verified={true} repost={false} threedots={false} date={\"6hrs ago\"}/>\n            <PostComponent type={\"repostSocial\"} image={IMG1} text={LOREM} avatarUri={PP1}\n                           userName={\"Pablo Picasso\"} userId={\"3\"} verified={true} repost={false} threedots={false}\n                           date={\"6hrs ago\"} post={postS}/>\n            <PostComponent type={\"repostPainting\"} image={IMG1} text={LOREM} avatarUri={PP1}\n                           userName={\"Pablo Picasso\"} userId={\"4\"} verified={true} repost={false} threedots={false}\n                           date={\"6hrs ago\"} post={postP}/>\n        </Animated.ScrollView>\n    )\n\n    const header = (props: any) => {\n\n\n        return (\n            <Animated.View style={[styles.header,]}>\n                <BackButton/>\n\n                {/*DEACTIVATE TOP BAR AFTER SCROLL*/}\n                <View style={[styles.topBar]} pointerEvents={pointerEventTopBar}>\n                    <TopBarAnimatedHeader title={artistName} scrollY={scrollY} type={HeaderType.NonUser}/>\n                </View>\n\n                {/*WHEN IMAGE IS SCALED UP MOVE COMPONENTS DOWN*/}\n                <Animated.View style={[{transform: [{translateY}]}]}>\n                    <HeaderArtistNonUser imageUri={imageUri} artistName={artistName} scrollY={scrollY}\n\n                                         onClickImage={onClickImage} setOnClickImage={setOnClickImage}/>\n                    <View>\n                        <FollowingButtonComponent artistId={artistId}/>\n                    </View>\n                    <TabBar {...props} indicatorStyle={{backgroundColor: colors.daylRed.text}}\n                            style={[styles.tabbar, {transform: [{translateY: translateY2}]}]}/>\n                </Animated.View>\n            </Animated.View>)\n    }\n\n    return (\n        <View style={{flex: 1}}>\n\n            {/*ON CLICK SHOW IMAGE FULL SIZE*/}\n            <OnClickImage imageUri={imageUri} title={artistName} onClickImage={onClickImage}\n                          setOnClickImage={setOnClickImage} artistName={artistName}/>\n\n            {/*RENDER HEADER + TAB VIEWS*/}\n            <TabViewComponent header={header} firstRoute={firstRoute} secondRoute={secondRoute}\n                              thirdRoute={thirdRoute}/>\n\n        </View>\n    )\n}\n\nconst styles = StyleSheet.create({\n    topBar: {\n        zIndex: 4\n    },\n    header: {\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        right: 0,\n        zIndex: 1,\n    },\n    tabbar: {\n        backgroundColor: 'black',\n        elevation: 0,\n        shadowOpacity: 0\n    },\n\n});",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/screens/OldArtistPage.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 231,
    "kind": "variable",
    "name": "postS",
    "memberof": "src/screens/OldArtistPage.tsx",
    "static": true,
    "longname": "src/screens/OldArtistPage.tsx~postS",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/OldArtistPage.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 232,
    "kind": "variable",
    "name": "postP",
    "memberof": "src/screens/OldArtistPage.tsx",
    "static": true,
    "longname": "src/screens/OldArtistPage.tsx~postP",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/OldArtistPage.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 28,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 233,
    "kind": "function",
    "name": "OldArtistPage",
    "memberof": "src/screens/OldArtistPage.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/OldArtistPage.tsx~OldArtistPage",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/screens/OldArtistPage.tsx",
    "importStyle": "OldArtistPage",
    "description": "",
    "lineNumber": 32,
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "undefined",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 234,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/screens/OldArtistPage.tsx",
    "static": true,
    "longname": "src/screens/OldArtistPage.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/OldArtistPage.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 168,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 235,
    "kind": "file",
    "name": "src/screens/SignUp.tsx",
    "content": "import {Dimensions, Platform, SafeAreaView, ScrollView, StyleSheet, Text, TouchableOpacity, View} from 'react-native';\nimport {LinearGradient} from \"expo-linear-gradient\";\nimport React, {useState} from \"react\";\nimport colors from \"../../constants/Colors\";\nimport {Entypo} from \"@expo/vector-icons\";\nimport CredentialsInputComponent from \"../components/Utilities/CredentialsInput\";\nimport {useAuth} from \"../contexts/Auth\";\nimport {useNavigation} from \"@react-navigation/native\";\nimport Toast from \"react-native-toast-message\";\nimport DropDownPicker from \"react-native-dropdown-picker\"\n\n/**\n * Page used for signing up to the app\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=1sc4hor1c9Kw9bqdoXmzvuKm8H9I1W2XE\" alt=\"ArtworkPage\" height=\"500\">\n * @constructor\n * @return SignUpScreen\n */\nexport default function SignUpScreen() {\n\n    const [firstName, setFirstName] = useState(\"\")\n    const [lastName, setLastName] = useState(\"\")\n\n    const [email, setEmail] = useState(\"\")\n    const [password, setPassword] = useState(\"\")\n    const [confirm, setConfirm] = useState(\"\")\n\n    const [profileType, setProfileType] = useState(\"\")\n    const [profileTypeItems, setProfileTypeItems] = useState([{label: \"Amateur\", value: \"AMATEUR\"},])\n    const [openProfileType, setOpenProfileType] = useState(false)\n\n    const auth = useAuth()\n\n    // WHEN SIGNUP BUTTON IS PRESSED\n    const onPressSignUp = () => {\n        if (password != confirm) {\n            Toast.show({\n                type: \"dayl\", props: {\n                    title: \"Error\", text: \"Passwords do not match\",\n                }\n            })\n        }\n        if (firstName === \"\" || lastName === \"\" || email === \"\" || password === \"\") {\n            Toast.show({\n                type: \"dayl\", props: {\n                    title: \"Error\", text: \"Please fill all fields\",\n                }\n            })\n        } else {\n            const signup = auth.signUp(email, password, firstName, lastName)\n        }\n    }\n\n    const navigation = useNavigation()\n\n    return (\n        <ScrollView>\n            {/*DESIGN : GRADIENT*/}\n            <LinearGradient colors={['black', colors.daylRed.text]} start={{x: 0, y: 1,}} end={{x: 0, y: 0}}\n                            style={[styles.linearGradient]}/>\n\n            <SafeAreaView style={styles.safeview}>\n                <View style={styles.headerSignUp}>\n                    {/*BACK BUTTON*/}\n                    <TouchableOpacity style={styles.backButton} onPress={() => navigation.goBack()}>\n                        <Entypo name={\"chevron-left\"} size={35} color={\"white\"}/>\n                    </TouchableOpacity>\n\n                    <Text style={styles.signUp}>Sign up</Text>\n\n                    <View style={styles.emptyViewRight}></View>\n                </View>\n            </SafeAreaView>\n\n            <View>\n                {/*INPUT FIELD TO ENTER FIRST NAME OF USER*/}\n                <CredentialsInputComponent credentialsNeeded={\"First name\"} value={firstName} setValue={setFirstName}/>\n                {/*INPUT FIELD TO ENTER LAST NAME OF USER*/}\n                <CredentialsInputComponent credentialsNeeded={\"Last name\"} value={lastName} setValue={setLastName}/>\n                {/*<CredentialsInputComponent credentialsNeeded={\"Type of profile\"} value={type} setValue={setType}/>*/}\n                {/*DROPDOWN TO CHOOSE ACCOUNT TYPE*/}\n                <Text style={styles.accountTypeText}>Account type</Text>\n                <DropDownPicker\n                    placeholder={\"Account type\"}\n                    open={openProfileType}\n                    value={profileType}\n                    items={profileTypeItems}\n                    setOpen={setOpenProfileType}\n                    setValue={setProfileType}\n                    setItems={setProfileTypeItems}\n                    containerStyle={styles.containerPicker}\n                    style={styles.picker}\n                />\n                {/*INPUT FIELD TO ENTER EMAIL OF USER*/}\n                <CredentialsInputComponent credentialsNeeded={\"Email\"} value={email} setValue={setEmail}/>\n                {/*INPUT FIELD TO ENTER PASSWORD OF USER*/}\n                <CredentialsInputComponent credentialsNeeded={\"Password\"} value={password} setValue={setPassword}/>\n                {/*INPUT FIELD TO ENTER PASSWORD OF USER*/}\n                <CredentialsInputComponent credentialsNeeded={\"Confirm password\"} value={confirm}\n                                           setValue={setConfirm}/>\n            </View>\n\n            {/*SIGNUP BUTTON*/}\n            <TouchableOpacity style={styles.buttonLogIn} onPress={() => onPressSignUp()}>\n                <Text style={styles.buttonTextLogIn}>Sign up</Text>\n            </TouchableOpacity>\n        </ScrollView>\n    )\n}\n\nconst screenHeight = Dimensions.get('screen').height\nconst screenWidth = Dimensions.get('screen').width\nconst styles = StyleSheet.create({\n    container: {\n        width: '100%', height: '100%', //paddingTop: Platform.OS === 'android' ? 30 : 0,\n\n    }, linearGradient: {\n        position: \"absolute\", width: '100%', height: '100%', resizeMode: 'cover', zIndex: 0\n    }, header: {\n        fontSize: 25, color: \"white\", textAlign: \"center\"\n        //marginTop: Dimensions.get('screen').height/100\n    }, safeview: {\n        justifyContent: \"center\", paddingTop: Platform.OS === \"android\" ? 30 : 0\n\n    }, button: {\n        marginTop: screenHeight / 40,\n        borderRadius: 20,\n        height: screenHeight / 22,\n        width: screenWidth / 3,\n        alignSelf: \"center\",\n        alignItems: \"center\",\n        backgroundColor: \"transparent\",\n        justifyContent: \"center\",\n        flexDirection: \"row\",\n        borderWidth: 2,\n        borderColor: \"white\"\n\n\n    }, buttonText: {\n        textAlign: \"center\", justifyContent: \"center\", fontSize: 15, color: \"white\"\n    }, buttonLogIn: {\n        //position: \"absolute\",\n        marginTop: screenHeight / 40,\n        borderRadius: 20,\n        height: screenHeight / 22,\n        width: screenWidth / 3,\n        alignSelf: \"center\",\n        alignItems: \"center\",\n        backgroundColor: \"white\",\n        justifyContent: \"center\",\n        flexDirection: \"row\",\n        borderWidth: 2,\n        borderColor: \"white\",\n        bottom: 0\n\n\n    }, buttonTextLogIn: {\n        textAlign: \"center\", justifyContent: \"center\", fontSize: 20,\n\n        fontWeight: \"bold\", color: \"black\"\n    }, headerSignUp: {\n        flexDirection: \"row\", justifyContent: \"space-between\", alignItems: \"center\"\n    }, backButton: {\n        marginLeft: 20, width: '10%'\n    },\n\n    signUp: {\n        fontSize: 22, color: \"white\"\n    }, emptyViewRight: {\n        marginRight: 20,\n\n        width: '10%'\n    }, picker: {\n        alignSelf: \"center\",\n        flexDirection: \"row\",\n\n        backgroundColor: \"white\",\n        borderRadius: 50,\n        alignItems: \"center\",\n        borderColor: \"white\"\n    }, containerPicker: {\n        alignSelf: \"center\",\n        flexDirection: \"row\",\n        width: \"88%\",\n        backgroundColor: \"white\",\n        borderRadius: 15,\n        alignItems: \"center\",\n        borderColor: \"white\"\n    }, accountTypeText: {\n        textAlign: \"left\",\n        justifyContent: \"flex-start\",\n        alignSelf: \"flex-start\",\n        margin: 20,\n        marginLeft: 35,\n        marginTop: 0,\n\n        fontSize: 18,\n        color: \"white\",\n        marginBottom: 10\n    }\n\n});\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/screens/SignUp.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 236,
    "kind": "function",
    "name": "SignUpScreen",
    "memberof": "src/screens/SignUp.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/SignUp.tsx~SignUpScreen",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/screens/SignUp.tsx",
    "importStyle": "SignUpScreen",
    "description": "Page used for signing up to the app\n\n<img src=\"https://drive.google.com/uc?export=view&id=1sc4hor1c9Kw9bqdoXmzvuKm8H9I1W2XE\" alt=\"ArtworkPage\" height=\"500\">",
    "lineNumber": 19,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "SignUpScreen"
    },
    "params": []
  },
  {
    "__docId__": 237,
    "kind": "variable",
    "name": "screenHeight",
    "memberof": "src/screens/SignUp.tsx",
    "static": true,
    "longname": "src/screens/SignUp.tsx~screenHeight",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/SignUp.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 111,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 238,
    "kind": "variable",
    "name": "screenWidth",
    "memberof": "src/screens/SignUp.tsx",
    "static": true,
    "longname": "src/screens/SignUp.tsx~screenWidth",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/SignUp.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 112,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 239,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/screens/SignUp.tsx",
    "static": true,
    "longname": "src/screens/SignUp.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/SignUp.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 113,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 240,
    "kind": "file",
    "name": "src/screens/TabOneScreen.tsx",
    "content": "import {StyleSheet} from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport {Text, View} from '../components/Themed';\nimport {RootTabScreenProps} from '../../types';\n\n/**\n * @ignore\n * @param navigation\n * @constructor\n */\nexport default function TabOneScreen({navigation}: RootTabScreenProps<'TabOne'>) {\n    return (\n        <View style={styles.container}>\n            <Text style={styles.title}>Tab One</Text>\n            <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\"/>\n            <EditScreenInfo path=\"/screens/TabOneScreen.tsx\"/>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    title: {\n        fontSize: 20,\n        fontWeight: 'bold',\n    },\n    separator: {\n        marginVertical: 30,\n        height: 1,\n        width: '80%',\n    },\n});\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/screens/TabOneScreen.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 241,
    "kind": "function",
    "name": "TabOneScreen",
    "memberof": "src/screens/TabOneScreen.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/TabOneScreen.tsx~TabOneScreen",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/screens/TabOneScreen.tsx",
    "importStyle": "TabOneScreen",
    "description": "",
    "lineNumber": 12,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "navigation",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 242,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/screens/TabOneScreen.tsx",
    "static": true,
    "longname": "src/screens/TabOneScreen.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/TabOneScreen.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 243,
    "kind": "file",
    "name": "src/screens/TabTwoScreen.tsx",
    "content": "import {StyleSheet} from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport {Text, View} from '../components/Themed';\n\n/**\n * @ignore\n * @constructor\n */\nexport default function TabTwoScreen() {\n    return (\n        <View style={styles.container}>\n            <Text style={styles.title}>Tab Two</Text>\n            <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\"/>\n            <EditScreenInfo path=\"/screens/TabTwoScreen.tsx\"/>\n        </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        flex: 1,\n        alignItems: 'center',\n        justifyContent: 'center',\n    },\n    title: {\n        fontSize: 20,\n        fontWeight: 'bold',\n    },\n    separator: {\n        marginVertical: 30,\n        height: 1,\n        width: '80%',\n    },\n});\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/screens/TabTwoScreen.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 244,
    "kind": "function",
    "name": "TabTwoScreen",
    "memberof": "src/screens/TabTwoScreen.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/TabTwoScreen.tsx~TabTwoScreen",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/screens/TabTwoScreen.tsx",
    "importStyle": "TabTwoScreen",
    "description": "",
    "lineNumber": 10,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 245,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/screens/TabTwoScreen.tsx",
    "static": true,
    "longname": "src/screens/TabTwoScreen.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/TabTwoScreen.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 20,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 246,
    "kind": "file",
    "name": "src/screens/ThreeDotsPage.tsx",
    "content": "import {StyleSheet, View} from 'react-native';\nimport React from \"react\";\nimport ThreeDotsComponent from \"../components/SocialNetwork/ThreeDotsComponent\";\nimport BackButton from \"../components/Utilities/BackButton\";\nimport PostComponent from \"../components/SocialNetwork/PostComponent\";\nimport {ImagePicked} from \"../../types\";\n\n/**\n * TODO\n * @ignore\n * @param route\n * @constructor\n */\nexport default function ThreeDotsPage({route}: any) {\n\n    const {\n        image,\n        text,\n        avatarUri,\n        userName,\n        userId,\n        verified,\n        date,\n        postType,\n        artworkName,\n    }: {\n        image: ImagePicked,\n        text: string,\n        avatarUri: string,\n        userName: string,\n        userId: string,\n        verified: boolean,\n        date: string,\n        repost: boolean,\n        postType: string,\n        artworkName: string,\n\n    } = route.params\n\n    return (\n        <View style={styles.container}>\n            <BackButton/>\n            <View style={styles.itemContainer}>\n                <PostComponent type={postType} image={image} avatarUri={avatarUri} userName={userName}\n                               userId={userId} verified={verified} repost={false} threedots={true} date={date}\n                               text={text} artworkName={artworkName}/>\n                <ThreeDotsComponent/>\n            </View>\n        </View>)\n}\n\nconst styles = StyleSheet.create({\n    container: {\n        paddingTop: 30, height: \"100%\", flexDirection: \"column\", justifyContent: \"flex-start\",\n    }, itemContainer: {\n        paddingTop: 50\n    }\n});\n\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/screens/ThreeDotsPage.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 247,
    "kind": "function",
    "name": "ThreeDotsPage",
    "memberof": "src/screens/ThreeDotsPage.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/ThreeDotsPage.tsx~ThreeDotsPage",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/screens/ThreeDotsPage.tsx",
    "importStyle": "ThreeDotsPage",
    "description": "TODO",
    "lineNumber": 14,
    "ignore": true,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "route",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 248,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/screens/ThreeDotsPage.tsx",
    "static": true,
    "longname": "src/screens/ThreeDotsPage.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/ThreeDotsPage.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 249,
    "kind": "file",
    "name": "src/screens/WelcomeScreen.tsx",
    "content": "import {Dimensions, Image, StyleSheet, Text, TouchableOpacity, View} from 'react-native';\nimport {LinearGradient} from \"expo-linear-gradient\";\nimport React from \"react\";\nimport colors from \"../../constants/Colors\";\nimport {useNavigation} from \"@react-navigation/native\";\n\n/**\n * Page welcoming the user on first connection\n *\n * <img src=\"https://drive.google.com/uc?export=view&id=1DQfiwo80xiUo8X_rgmx1Igl3oNf_MC62\" alt=\"ArtworkPage\" height=\"500\">\n * @constructor\n * @return WelcomeScreen\n */\nexport default function WelcomeScreen() {\n\n    const navigation = useNavigation()\n\n    return (\n        <View style={styles.container}>\n            <LinearGradient colors={['black', colors.daylRed.text]} start={{x: 0, y: 1,}} end={{x: 0, y: 0}}\n                            style={[styles.linearGradient]}/>\n            {/*DAYL LOGO*/}\n            <View style={styles.imageContainer}>\n                <Image source={require(\"../../assets/images/dayl.png\")} style={{transform: [{scale: 0.35}]}}/>\n            </View>\n\n            {/*DAYL MANTRA*/}\n            <View style={styles.textContainer}>\n                <Text style={styles.text}>Discover new paintings.</Text>\n                <Text style={styles.text}>Match paintings you love.</Text>\n                <Text style={styles.text}>Share art.</Text>\n            </View>\n\n            <View style={styles.buttonsContainer}>\n                {/*LOGIN BUTTON*/}\n                <TouchableOpacity style={styles.buttonLogIn} onPress={() => navigation.navigate(\"LoginScreen\")}>\n                    <Text style={styles.buttonText}>Log in</Text>\n                </TouchableOpacity>\n\n                {/*SIGNUP BUTTON*/}\n                <TouchableOpacity style={styles.buttonSignUp} onPress={() => {\n                    navigation.navigate(\"SignUpScreen\")\n                }}>\n                    <Text style={styles.buttonText}>Sign up</Text>\n                </TouchableOpacity>\n            </View>\n        </View>\n    )\n}\n\nconst screenHeight = Dimensions.get('screen').height\nconst screenWidth = Dimensions.get('screen').width\nconst styles = StyleSheet.create({\n    container: {\n        width: '100%', height: '100%', justifyContent: 'center', alignItems: 'center'\n    }, linearGradient: {\n        position: \"absolute\", width: '100%', height: '100%', resizeMode: 'cover', zIndex: 0\n    },\n\n    buttonLogIn: {\n        borderRadius: 18,\n        backgroundColor: \"white\",\n        justifyContent: \"center\",\n        paddingTop: screenHeight / 65,\n        paddingBottom: screenHeight / 65,\n        paddingRight: screenWidth / 8,\n        paddingLeft: screenWidth / 8,\n        marginBottom: 20\n    },\n\n    buttonSignUp: {\n\n        borderRadius: 18,\n        backgroundColor: colors.daylRed.text,\n        justifyContent: \"center\",\n        paddingTop: screenHeight / 65,\n        paddingBottom: screenHeight / 65,\n        paddingRight: screenWidth / 6,\n        paddingLeft: screenWidth / 6,\n\n\n    }, buttonsContainer: {\n\n        position: \"absolute\",\n        bottom: 50,\n    },\n\n    buttonText: {\n        textAlign: \"center\", justifyContent: \"center\", fontSize: 20,\n        fontWeight: \"bold\", color: \"black\"\n    }, imageContainer: {\n        position: \"absolute\", top: 50, justifyContent: \"center\", alignSelf: \"center\"\n\n    }, textContainer: {\n        position: \"relative\", justifyContent: \"center\", alignSelf: \"center\",\n    }, text: {\n        margin: 28, textAlign: \"center\", fontSize: 20, color: \"white\",\n    }\n\n});\n",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/screens/WelcomeScreen.tsx",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 250,
    "kind": "function",
    "name": "WelcomeScreen",
    "memberof": "src/screens/WelcomeScreen.tsx",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/screens/WelcomeScreen.tsx~WelcomeScreen",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/screens/WelcomeScreen.tsx",
    "importStyle": "WelcomeScreen",
    "description": "Page welcoming the user on first connection\n\n<img src=\"https://drive.google.com/uc?export=view&id=1DQfiwo80xiUo8X_rgmx1Igl3oNf_MC62\" alt=\"ArtworkPage\" height=\"500\">",
    "lineNumber": 14,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "WelcomeScreen"
    },
    "params": []
  },
  {
    "__docId__": 251,
    "kind": "variable",
    "name": "screenHeight",
    "memberof": "src/screens/WelcomeScreen.tsx",
    "static": true,
    "longname": "src/screens/WelcomeScreen.tsx~screenHeight",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/WelcomeScreen.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 51,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 252,
    "kind": "variable",
    "name": "screenWidth",
    "memberof": "src/screens/WelcomeScreen.tsx",
    "static": true,
    "longname": "src/screens/WelcomeScreen.tsx~screenWidth",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/WelcomeScreen.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 52,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 253,
    "kind": "variable",
    "name": "styles",
    "memberof": "src/screens/WelcomeScreen.tsx",
    "static": true,
    "longname": "src/screens/WelcomeScreen.tsx~styles",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/screens/WelcomeScreen.tsx",
    "importStyle": null,
    "description": null,
    "lineNumber": 53,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 254,
    "kind": "file",
    "name": "src/services/authService.ts",
    "content": "import axios from \"axios\";\nimport {LOGIN, SALT, SIGNUP, URL} from \"./constantes\";\nimport {AuthData} from \"../../types\";\nimport sha1 from \"sha1\";\nimport Toast from \"react-native-toast-message\";\n\nlet id = 0\n\n/**\n * Function executing an API call to post and save the user credentials on signup\n * @param {string} email\n * @param {string} _password\n * @param {string} firstName\n * @param {string} lastName\n */\nconst signUp = (email: string, _password: string, firstName: string, lastName: string): Promise<AuthData> => {\n    return axios\n        .post(SIGNUP, {\n                firstName: firstName,\n                lastName: lastName,\n                email: email,\n                password: sha1(_password + SALT),\n                userType: \"amateur\",\n                pseudo: \"test\"\n            }\n            , {headers: {\"Access-Control-Allow-Origin\": \"*\", \"Content-Type\": \"application/json\"}})\n        .then((response) => {\n            return response.data\n        });\n};\n\n/**\n * Function executing an API call to verify the user credentials on log in\n * @param {string} email\n * @param {string} _password\n */\nconst logIn = (email: string, _password: string): Promise<AuthData> => {\n    return axios\n        .post(LOGIN, {\n                email: email,\n                password: sha1(_password + SALT),\n            }\n            , {headers: {\"Access-Control-Allow-Origin\": \"*\", \"Content-Type\": \"application/json\"}})\n        .then((response) => {\n            id = response.data.id\n            return response.data\n        })\n        .catch(err => {\n            if (err.response) {\n                Toast.show({\n                    type: \"dayl\",\n                    props: {\n                        title: \"Error\",\n                        text: \"Wrong password or wrong email\",\n                    }\n                })\n            }\n        });\n};\n\n/**\n * API call to get the user data on reload\n */\nconst reloadData = () => {\n    return axios\n        .get(URL + `users/${id}`).then((response) => {\n            return response.data\n        })\n}\n\n/**\n * Function executing an API call to delete an artwork from a list\n * @param {string[]} listToDelete\n * @param {string | undefined} listId\n */\nconst deleteArtworks = (listToDelete: string[], listId: string | undefined) => {\n    if (listId !== undefined) {\n        listToDelete.forEach(paintingId => {\n            axios.get(URL + \"userLists/removePaintingFromList\", {params: {paintingId: paintingId, listId: listId}})\n                .then((response) => {\n                    Toast.show({\n                        type: \"dayl\",\n                        props: {\n                            title: \"Success\",\n                            text: \"Successfully removed from liked artworks\",\n                        }\n                    })\n                })\n                .catch(err => {\n                    if (err.response) {\n                        Toast.show({\n                            type: \"dayl\",\n                            props: {\n                                title: \"Error\",\n                                text: \"Could not remove from list\",\n                            }\n                        })\n                    }\n                });\n        })\n    } else {\n        listToDelete.forEach(paintingId => {\n            axios.post(URL + \"users/updateFavoritePainting\", {\n                    userId: id,\n                    favoriteId: paintingId,\n                    operation: \"remove\"\n                },\n                {headers: {\"Access-Control-Allow-Origin\": \"*\", \"Content-Type\": \"application/json\", \"USER_PAINT\": 0}}\n            ).catch(err => {\n                if (err.response) {\n                    Toast.show({\n                        type: \"dayl\",\n                        props: {\n                            title: \"Error\",\n                            text: \"Could not remove from favorite artworks\",\n                        }\n                    })\n                }\n            });\n        })\n    }\n}\n\n/**\n * Function executing an API call to create a new list\n * @param {string} listTitle\n */\nconst createNewList = (listTitle: string) => {\n    axios.post(URL + \"userLists/save\",\n        {\n            listName: listTitle,\n            rank: 0,\n            userId: id,\n            id: 0,\n            status: \"ACTIVE\",\n            detail: \"\",\n            imageUrl: \"\"\n        }, {headers: {\"Access-Control-Allow-Origin\": \"*\", \"Content-Type\": \"application/json\"}}\n    )\n}\n\n/**\n * Function executing an API call to update a list\n * @param {string} listId\n * @param {string} newName\n */\nconst updateList = (listId: string, newName: string) => {\n    axios.get(URL + `userLists/detailByListId`, {params: {listId: listId}}).then((response) => {\n        let detail = response.data.userListDTO.detail;\n        axios.post(URL + \"userLists/update\", {\n                id: listId,\n                listName: newName,\n                detail: detail\n            },\n            {headers: {\"Access-Control-Allow-Origin\": \"*\", \"Content-Type\": \"application/json\", \"USER_PAINT\": 0}}\n        )\n    });\n}\n\n/**\n * Function executing an API call to delete a list\n * @param {string} listId\n */\nconst deleteList = (listId: string) => {\n    axios.delete(URL + `userLists/deleteById?listId=${listId}`, {\n        headers: {\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Content-Type\": \"application/json\"\n        }\n    })\n}\n\n/**\n * Function executing an API call to add an artwork to a list\n * @param {string} listId\n * @param {string[]} selectedArtworks\n */\nconst addArtworksToList = (listId: string, selectedArtworks: string[]) => {\n    axios.get(URL + `userLists/detailByListId`, {params: {listId: listId}}).then((response) => {\n        const data = response.data.listPaintings.map((el) => el.id)\n\n        selectedArtworks.forEach(paintingId => {\n\n            if (!data.includes(paintingId)) {\n                axios.get(URL + \"userLists/addPaintingToList\", {\n                    params: {\n                        listId: listId,\n                        paintingId: paintingId\n                    }\n                }).catch(err => {\n                    if (err.response) {\n                        Toast.show({\n                            type: \"dayl\",\n                            props: {\n                                title: \"Error\",\n                                text: \"Error adding to list\",\n                            }\n                        })\n                    }\n                });\n            }\n            else {\n                Toast.show({\n                    type: \"dayl\",\n                    props: {\n                        title: \"Error\",\n                        text: \"Already in list\",\n                    }\n                })\n            }\n        })\n\n    });\n\n\n\n}\n\n/**\n * Functions\n */\nexport const authService = {\n    signUp,\n    logIn,\n    reloadData,\n    deleteArtworks,\n    createNewList,\n    updateList,\n    deleteList,\n    addArtworksToList\n}",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/services/authService.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 255,
    "kind": "variable",
    "name": "id",
    "memberof": "src/services/authService.ts",
    "static": true,
    "longname": "src/services/authService.ts~id",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/services/authService.ts",
    "importStyle": null,
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "number"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 256,
    "kind": "function",
    "name": "signUp",
    "memberof": "src/services/authService.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/services/authService.ts~signUp",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/services/authService.ts",
    "importStyle": null,
    "description": "Function executing an API call to post and save the user credentials on signup",
    "lineNumber": 16,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "email",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "_password",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "firstName",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "lastName",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 257,
    "kind": "function",
    "name": "logIn",
    "memberof": "src/services/authService.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/services/authService.ts~logIn",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/services/authService.ts",
    "importStyle": null,
    "description": "Function executing an API call to verify the user credentials on log in",
    "lineNumber": 37,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "email",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "_password",
        "description": ""
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 258,
    "kind": "function",
    "name": "reloadData",
    "memberof": "src/services/authService.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/services/authService.ts~reloadData",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/services/authService.ts",
    "importStyle": null,
    "description": "API call to get the user data on reload",
    "lineNumber": 64,
    "params": [],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 259,
    "kind": "function",
    "name": "deleteArtworks",
    "memberof": "src/services/authService.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/services/authService.ts~deleteArtworks",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/services/authService.ts",
    "importStyle": null,
    "description": "Function executing an API call to delete an artwork from a list",
    "lineNumber": 76,
    "params": [
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "listToDelete",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string ",
          " undefined"
        ],
        "spread": false,
        "optional": false,
        "name": "listId",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 260,
    "kind": "function",
    "name": "createNewList",
    "memberof": "src/services/authService.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/services/authService.ts~createNewList",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/services/authService.ts",
    "importStyle": null,
    "description": "Function executing an API call to create a new list",
    "lineNumber": 128,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "listTitle",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 261,
    "kind": "function",
    "name": "updateList",
    "memberof": "src/services/authService.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/services/authService.ts~updateList",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/services/authService.ts",
    "importStyle": null,
    "description": "Function executing an API call to update a list",
    "lineNumber": 147,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "listId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "newName",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 262,
    "kind": "function",
    "name": "deleteList",
    "memberof": "src/services/authService.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/services/authService.ts~deleteList",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/services/authService.ts",
    "importStyle": null,
    "description": "Function executing an API call to delete a list",
    "lineNumber": 164,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "listId",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 263,
    "kind": "function",
    "name": "addArtworksToList",
    "memberof": "src/services/authService.ts",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/services/authService.ts~addArtworksToList",
    "access": "public",
    "export": false,
    "importPath": "daylart/src/services/authService.ts",
    "importStyle": null,
    "description": "Function executing an API call to add an artwork to a list",
    "lineNumber": 178,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "listId",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "string[]"
        ],
        "spread": false,
        "optional": false,
        "name": "selectedArtworks",
        "description": ""
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 264,
    "kind": "variable",
    "name": "authService",
    "memberof": "src/services/authService.ts",
    "static": true,
    "longname": "src/services/authService.ts~authService",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/services/authService.ts",
    "importStyle": "{authService}",
    "description": "Functions",
    "lineNumber": 222,
    "type": {
      "types": [
        "{\"signUp\": *, \"logIn\": *, \"reloadData\": *, \"deleteArtworks\": *, \"createNewList\": *, \"updateList\": *, \"deleteList\": *, \"addArtworksToList\": *}"
      ]
    }
  },
  {
    "__docId__": 265,
    "kind": "file",
    "name": "src/services/constantes.ts",
    "content": "import {ImagePicked} from \"../../types\";\n\nexport const URL = \"http://162.19.52.131:8088/\"\n\nexport const SALT = \"PAINTING_NOVAGEN_ETC\";\n\nexport const SIGNUP = \"http://162.19.52.131:8088/users/save\"\n\nexport const LOGIN = \"http://162.19.52.131:8088/users/login\"\n\nexport const RELOAD = \"http://162.19.52.131:8088/users/\"\n\nexport const PP1 = \"https://upload.wikimedia.org/wikipedia/commons/thumb/9/98/Pablo_picasso_1.jpg/800px-Pablo_picasso_1.jpg\"\nexport const PP2 = \"https://www.larousse.fr/encyclopedie/data/images/1311089-Vincent_Van_Gogh_Portrait_de_lartiste.jpg\"\n\nexport const LOREM = \"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed non risus. Suspendisse lectus tortor, dignissim sit amet, adipiscing nec, ultricies sed, dolor. Cras elementum ultrices diam.\"\n\nexport const IMG1 : ImagePicked = {uri: \"https://upload.wikimedia.org/wikipedia/commons/a/a5/Tsunami_by_hokusai_19th_century.jpg\", width: 3859, height: 2594}\nexport const IMG2 : ImagePicked = {uri: \"https://zeuxis-art.com//img/cms/Il%20etait%20une%20fois/la_nuit_etoilee.jpg\", width: 600, height : 433}",
    "static": true,
    "longname": "/Users/leopoldtran/daylappreactnative/src/services/constantes.ts",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 266,
    "kind": "variable",
    "name": "URL",
    "memberof": "src/services/constantes.ts",
    "static": true,
    "longname": "src/services/constantes.ts~URL",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/services/constantes.ts",
    "importStyle": "{URL}",
    "description": null,
    "lineNumber": 3,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 267,
    "kind": "variable",
    "name": "SALT",
    "memberof": "src/services/constantes.ts",
    "static": true,
    "longname": "src/services/constantes.ts~SALT",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/services/constantes.ts",
    "importStyle": "{SALT}",
    "description": null,
    "lineNumber": 5,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 268,
    "kind": "variable",
    "name": "SIGNUP",
    "memberof": "src/services/constantes.ts",
    "static": true,
    "longname": "src/services/constantes.ts~SIGNUP",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/services/constantes.ts",
    "importStyle": "{SIGNUP}",
    "description": null,
    "lineNumber": 7,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 269,
    "kind": "variable",
    "name": "LOGIN",
    "memberof": "src/services/constantes.ts",
    "static": true,
    "longname": "src/services/constantes.ts~LOGIN",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/services/constantes.ts",
    "importStyle": "{LOGIN}",
    "description": null,
    "lineNumber": 9,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 270,
    "kind": "variable",
    "name": "RELOAD",
    "memberof": "src/services/constantes.ts",
    "static": true,
    "longname": "src/services/constantes.ts~RELOAD",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/services/constantes.ts",
    "importStyle": "{RELOAD}",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 271,
    "kind": "variable",
    "name": "PP1",
    "memberof": "src/services/constantes.ts",
    "static": true,
    "longname": "src/services/constantes.ts~PP1",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/services/constantes.ts",
    "importStyle": "{PP1}",
    "description": null,
    "lineNumber": 13,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 272,
    "kind": "variable",
    "name": "PP2",
    "memberof": "src/services/constantes.ts",
    "static": true,
    "longname": "src/services/constantes.ts~PP2",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/services/constantes.ts",
    "importStyle": "{PP2}",
    "description": null,
    "lineNumber": 14,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 273,
    "kind": "variable",
    "name": "LOREM",
    "memberof": "src/services/constantes.ts",
    "static": true,
    "longname": "src/services/constantes.ts~LOREM",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/services/constantes.ts",
    "importStyle": "{LOREM}",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "string"
      ]
    }
  },
  {
    "__docId__": 274,
    "kind": "variable",
    "name": "IMG1",
    "memberof": "src/services/constantes.ts",
    "static": true,
    "longname": "src/services/constantes.ts~IMG1",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/services/constantes.ts",
    "importStyle": "{IMG1}",
    "description": null,
    "lineNumber": 18,
    "undocument": true,
    "type": {
      "types": [
        "{\"uri\": string, \"width\": number, \"height\": number}"
      ]
    }
  },
  {
    "__docId__": 275,
    "kind": "variable",
    "name": "IMG2",
    "memberof": "src/services/constantes.ts",
    "static": true,
    "longname": "src/services/constantes.ts~IMG2",
    "access": "public",
    "export": true,
    "importPath": "daylart/src/services/constantes.ts",
    "importStyle": "{IMG2}",
    "description": null,
    "lineNumber": 19,
    "undocument": true,
    "type": {
      "types": [
        "{\"uri\": string, \"width\": number, \"height\": number}"
      ]
    }
  },
  {
    "kind": "index",
    "content": "**Edit a file, create a new file, and clone from Bitbucket in under 2 minutes**\n\nWhen you're done, you can delete the content in this README and update the file with details for others getting started with your repository.\n\n*We recommend that you open this README in another tab as you perform the tasks below. You can [watch our video](https://youtu.be/0ocf7u76WSo) for a full demo of all the steps in this tutorial. Open the video in a new tab to avoid leaving Bitbucket.*\n\n---\n\n## Edit a file\n\nYou’ll start by editing this README file to learn how to edit a file in Bitbucket.\n\n1. Click **Source** on the left side.\n2. Click the README.md link from the list of files.\n3. Click the **Edit** button.\n4. Delete the following text: *Delete this line to make a change to the README from Bitbucket.*\n5. After making your change, click **Commit** and then **Commit** again in the dialog. The commit page will open and you’ll see the change you just made.\n6. Go back to the **Source** page.\n\n---\n\n## Create a file\n\nNext, you’ll add a new file to this repository.\n\n1. Click the **New file** button at the top of the **Source** page.\n2. Give the file a filename of **contributors.txt**.\n3. Enter your name in the empty file space.\n4. Click **Commit** and then **Commit** again in the dialog.\n5. Go back to the **Source** page.\n\nBefore you move on, go ahead and explore the repository. You've already seen the **Source** page, but check out the **Commits**, **Branches**, and **Settings** pages.\n\n---\n\n## Clone a repository\n\nUse these steps to clone from SourceTree, our client for using the repository command-line free. Cloning allows you to work on your files locally. If you don't yet have SourceTree, [download and install first](https://www.sourcetreeapp.com/). If you prefer to clone from the command line, see [Clone a repository](https://confluence.atlassian.com/x/4whODQ).\n\n1. You’ll see the clone button under the **Source** heading. Click that button.\n2. Now click **Check out in SourceTree**. You may need to create a SourceTree account or log in.\n3. When you see the **Clone New** dialog in SourceTree, update the destination path and name if you’d like to and then click **Clone**.\n4. Open the directory you just created to see your repository’s files.\n\nNow that you're more familiar with your Bitbucket repository, go ahead and add a new file locally. You can [push your change back to Bitbucket with SourceTree](https://confluence.atlassian.com/x/iqyBMg), or you can [add, commit,](https://confluence.atlassian.com/x/8QhODQ) and [push from the command line](https://confluence.atlassian.com/x/NQ0zDQ).",
    "longname": "/Users/leopoldtran/daylappreactnative/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  }
]